input = 0
output = 1
ipStack = 2
ip = 3
ipSideways = 4 - 15
paramStack = 16
bitIndex = 17
bits = 18
variables = 19 - 33
rax = 34

1+1: 4677 steps
2+2: 4831 steps
4+4: 4985 steps
8+8: 5139 steps
16+16: 5293 steps
32+32: 5447 steps
so to sum 2^n + 2^n, need 154n + 4677 steps

99*99 took 4,600,000 steps
22 minutes, 22 seconds

suggests each second simulates 3500 steps of turing machine

division: 23/3 == 7. 
2,685,524 steps. 

memset: MEM[0] = 5. 6.33 million steps. 30 minutes.
memget: Had setInput on bits tape. got MEM[0] to get 5. 5,541,154 steps. 29 minutes 41 seconds.

EDIT: changed add function 
1+1: 3392 steps
2+2: 3522 steps
4+4: 3652 steps
to sum 2^n + 2^n, need 130n + 3392 steps

and now 99*99 takes 3,926,980 stpes in 18 minutes 20 seconds

EDIT: with O2 optimization, 99*99 now only 3 minutes. About 21,000 steps of turing machine simulated per second

memset: MEM[0] = 5. Now 5,511,645 steps, in 4 minutes 40 seconds.

With O3 optimization, 99*99 now only 2 minutes 27 seconds

EDIT: leaving residual memory and avoiding some unnecessary work of erasing in pop, 99*99 takes 3,639,656 steps, in 2 minutes 42 seconds, suggesting about 22,000 steps per second. Probably just computer being bad. Addition of 2^n + 2^n needs 86n + 3244.

EDIT: reworking multiplication (by adding in basic_mul2, basic_div2, isEven, isOdd), computing 99*99 now takes 31,799 steps! Whoo!

MEM[0] = 5. Now takes 1,074,030 steps in 48 seconds.

EDIT: after reworking memset, "MEM[0] = 5" takes 216,417 steps.
Program BFS on input "5 3 1 1 2 1 3 3 4" runs successfully 
with output "0 1 1 2 -1" in 54,299,477 steps in 48 minutes.
Program heapsort on input 5 9 5 8 2 5 to get -> 2 5 5 8 9 ran successfully
in 90,218,745 steps in 1 hour, 14 minutes, 30 seconds.

EDIT: after adding infrastructure for "inlining" some basic functions, and inlining "isZero",
adding 2^n + 2^n needs 70n + 2859. 99*99 needs 31844 (it had increased to about 36k when I first added the
comparison to swap when x > y). "MEM[0] = 5" needs 192,925 steps.

Will try inlining some more functions tomorrow!

EDIT: after "inlining" "isPos" and "isNeg", 2^n + 2^n needs 54n + 2565.
EDIT: after "inlining" "basic_add", 2^n + 2^n needs 36n + 2329. 99*99 takes 28526 steps. "MEM[0] = 5" takes 173,388 steps.

EDIT: after "inlining" "basic_sub", 2^(n+1) - 2^n for n >= 0 takes 192n + 10649 steps. After optimizing sub(), now 142n + 5301.

EDIT: after inlining functions up to "isEven" and "isOdd", 2^(n+1)-2^n takes 84n + 4489. 99*99 takes 19214 steps, "MEM[0] = 5" takes 138,920 steps.

EDIT: after making some changes to memset, "MEM[0] = 5" takes 91,602 steps.
Program BFS on input "5 3 1 1 2 1 3 3 4" runs successfully 
with output "0 1 1 2 -1" in 16,142,636 steps in less than 12 minutes, 25 seconds.
Program heapsort on input 5 9 5 8 2 5 to get -> 2 5 5 8 9 ran successfully
in 27,579,090 steps in 19 minutes, 35 seconds - about 23,471 steps per second.

EDIT: made some further changes to memset: changed + to basic_add where appropriate. 
Also same change in mul(). Also made some expressions more compact, shaving off a bit of
time in performance. 
"99 * 99" takes 11,735 steps.
"MEM[0] = 5" takes 45,450 steps.
 
EDIT: made further small optimizations to memget, also changed div algorithm for efficienct.
"99 * 99" takes 11743 steps
"63 / -1" went from 414,601 -> 264122 -> 205643 -> 93671 steps
"MEM[0] = 5" takes 16,450 steps
"MEM[0] = 5; return MEM[0]" takes 40,542 steps
Program BFS on input "5 3 1 1 2 1 3 3 4" takes 3,751,956 steps in about 4 minutes 36 seconds. About 13600 steps per second...
Program heapsort on input "5 9 5 8 2 5" takes 5,601,188 steps in 7 minutes, 48 seconds.  

Works:
Assignment, declaration, +, -, *, /, <, >, <=, >=, ==, !=, ^, ||, &&
while loop, if - else if - else statements
recursive function calls
nextInt, printInt, printSpace
For loops
mod
memset, memget

