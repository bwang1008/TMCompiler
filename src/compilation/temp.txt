Execute: g++ -fsyntax-only ../programs/example_temp.cpp
Initial compilation OK
Library file found
line = int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp0 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ; 
: !VAR_TEMP_temp0 if  { 

line = 		return ( !VAR_USER_y ) ;
: !VAR_USER_y return  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp1 ; 
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ; 
: !VAR_TEMP_temp1 if  { 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp2 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp2 ; 
: !VAR_TEMP_temp2 if { 
: bool !VAR_TEMP_temp3 ; 
: !VAR_USER_y !FUNC_LIB_isPos  = !VAR_TEMP_temp3 ; 
: bool !VAR_TEMP_temp4 ; 
: !VAR_TEMP_temp4 !VAR_TEMP_temp3 = ; 
:  } 
: else { 
: !VAR_TEMP_temp4 !VAR_TEMP_temp2 = ; 
:  } 
: !VAR_TEMP_temp4 if  { 

line = 		if ( - !VAR_USER_x == !VAR_USER_y ) {
: int !VAR_TEMP_temp5 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp5 ; 
: bool !VAR_TEMP_temp6 ; 
: !VAR_TEMP_temp5 !VAR_USER_y == = !VAR_TEMP_temp6 ; 
: !VAR_TEMP_temp6 if  { 

line = 			return ( 0 ) ;
: int !VAR_TEMP_temp7 ; 
: !VAR_TEMP_temp7 0 = ; 
: !VAR_TEMP_temp7 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			if ( - !VAR_USER_x < !VAR_USER_y ) {
: int !VAR_TEMP_temp8 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp8 ; 
: bool !VAR_TEMP_temp9 ; 
: !VAR_TEMP_temp8 !VAR_USER_y < = !VAR_TEMP_temp9 ; 
: !VAR_TEMP_temp9 if  { 

line = 				return ( !FUNC_LIB_basic_sub ( !VAR_USER_y , - !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp10 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp10 ; 
: bool !VAR_TEMP_temp11 ; 
: !VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ; 
: !VAR_TEMP_temp11 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp12 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp12 ; 
: int !VAR_TEMP_temp13 ; 
: !VAR_TEMP_temp12 !VAR_USER_y !FUNC_LIB_basic_sub  = !VAR_TEMP_temp13 ; 
: bool !VAR_TEMP_temp14 ; 
: !VAR_TEMP_temp13 u- = !VAR_TEMP_temp14 ; 
: !VAR_TEMP_temp14 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = 	else {
: 	else {

line = 		if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp15 ; 
: !VAR_USER_x !FUNC_LIB_isPos  = !VAR_TEMP_temp15 ; 
: !VAR_TEMP_temp15 if { 
: bool !VAR_TEMP_temp16 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp16 ; 
: bool !VAR_TEMP_temp17 ; 
: !VAR_TEMP_temp17 !VAR_TEMP_temp16 = ; 
:  } 
: else { 
: !VAR_TEMP_temp17 !VAR_TEMP_temp15 = ; 
:  } 
: !VAR_TEMP_temp17 if  { 

line = 			if ( - !VAR_USER_y == !VAR_USER_x ) {
: int !VAR_TEMP_temp18 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp18 ; 
: bool !VAR_TEMP_temp19 ; 
: !VAR_TEMP_temp18 !VAR_USER_x == = !VAR_TEMP_temp19 ; 
: !VAR_TEMP_temp19 if  { 

line = 				return ( 0 ) ;
: int !VAR_TEMP_temp20 ; 
: !VAR_TEMP_temp20 0 = ; 
: !VAR_TEMP_temp20 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				if ( - !VAR_USER_y < !VAR_USER_x ) {
: int !VAR_TEMP_temp21 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp21 ; 
: bool !VAR_TEMP_temp22 ; 
: !VAR_TEMP_temp21 !VAR_USER_x < = !VAR_TEMP_temp22 ; 
: !VAR_TEMP_temp22 if  { 

line = 					return ( !FUNC_LIB_basic_sub ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp23 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp23 ; 
: bool !VAR_TEMP_temp24 ; 
: !VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ; 
: !VAR_TEMP_temp24 return  ; 

line = 				}
: 				}

line = 				else {
: 				else {

line = 					return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_y , !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp25 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp25 ; 
: int !VAR_TEMP_temp26 ; 
: !VAR_TEMP_temp25 !VAR_USER_x !FUNC_LIB_basic_sub  = !VAR_TEMP_temp26 ; 
: bool !VAR_TEMP_temp27 ; 
: !VAR_TEMP_temp26 u- = !VAR_TEMP_temp27 ; 
: !VAR_TEMP_temp27 return  ; 

line = 				}
: 				}

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp28 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp28 ; 
: !VAR_TEMP_temp28 if { 
: bool !VAR_TEMP_temp29 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp29 ; 
: bool !VAR_TEMP_temp30 ; 
: !VAR_TEMP_temp30 !VAR_TEMP_temp29 = ; 
:  } 
: else { 
: !VAR_TEMP_temp30 !VAR_TEMP_temp28 = ; 
:  } 
: !VAR_TEMP_temp30 if  { 

line = 				return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp31 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp31 ; 
: int !VAR_TEMP_temp32 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp32 ; 
: int !VAR_TEMP_temp33 ; 
: !VAR_TEMP_temp31 !VAR_TEMP_temp32 !FUNC_LIB_basic_add  = !VAR_TEMP_temp33 ; 
: bool !VAR_TEMP_temp34 ; 
: !VAR_TEMP_temp33 u- = !VAR_TEMP_temp34 ; 
: !VAR_TEMP_temp34 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp35 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ; 
: !VAR_TEMP_temp35 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp36 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ; 
: !VAR_TEMP_temp36 if  { 

line = 		return ( - !VAR_USER_y ) ;
: bool !VAR_TEMP_temp37 ; 
: !VAR_USER_y u- = !VAR_TEMP_temp37 ; 
: !VAR_TEMP_temp37 return  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp38 ; 
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ; 
: !VAR_TEMP_temp38 if  { 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp39 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp39 ; 
: !VAR_TEMP_temp39 if { 
: bool !VAR_TEMP_temp40 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp40 ; 
: bool !VAR_TEMP_temp41 ; 
: !VAR_TEMP_temp41 !VAR_TEMP_temp40 = ; 
:  } 
: else { 
: !VAR_TEMP_temp41 !VAR_TEMP_temp39 = ; 
:  } 
: !VAR_TEMP_temp41 if  { 

line = 		return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp42 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp42 ; 
: bool !VAR_TEMP_temp43 ; 
: !VAR_USER_x !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ; 
: !VAR_TEMP_temp43 return  ; 

line = 	}
: 	}

line = 	else {
: 	else {

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp44 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp44 ; 
: !VAR_TEMP_temp44 if { 
: bool !VAR_TEMP_temp45 ; 
: !VAR_USER_y !FUNC_LIB_isPos  = !VAR_TEMP_temp45 ; 
: bool !VAR_TEMP_temp46 ; 
: !VAR_TEMP_temp46 !VAR_TEMP_temp45 = ; 
:  } 
: else { 
: !VAR_TEMP_temp46 !VAR_TEMP_temp44 = ; 
:  } 
: !VAR_TEMP_temp46 if  { 

line = 			return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp47 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp47 ; 
: int !VAR_TEMP_temp48 ; 
: !VAR_TEMP_temp47 !VAR_USER_y !FUNC_LIB_basic_add  = !VAR_TEMP_temp48 ; 
: bool !VAR_TEMP_temp49 ; 
: !VAR_TEMP_temp48 u- = !VAR_TEMP_temp49 ; 
: !VAR_TEMP_temp49 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp50 ; 
: !VAR_USER_x !FUNC_LIB_isPos  = !VAR_TEMP_temp50 ; 
: !VAR_TEMP_temp50 if { 
: bool !VAR_TEMP_temp51 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp51 ; 
: bool !VAR_TEMP_temp52 ; 
: !VAR_TEMP_temp52 !VAR_TEMP_temp51 = ; 
:  } 
: else { 
: !VAR_TEMP_temp52 !VAR_TEMP_temp50 = ; 
:  } 
: !VAR_TEMP_temp52 if  { 

line = 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp53 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp53 ; 
: bool !VAR_TEMP_temp54 ; 
: !VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ; 
: !VAR_TEMP_temp54 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp55 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp55 ; 
: bool !VAR_TEMP_temp56 ; 
: !VAR_USER_x !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ; 
: !VAR_TEMP_temp56 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp57 ; 
: !VAR_USER_x !FUNC_LIB_isZero  = !VAR_TEMP_temp57 ; 
: !VAR_TEMP_temp57 if { 
: !VAR_TEMP_temp59 !VAR_TEMP_temp57 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp58 ; 
: !VAR_USER_y !FUNC_LIB_isZero  = !VAR_TEMP_temp58 ; 
: bool !VAR_TEMP_temp59 ; 
: !VAR_TEMP_temp59 !VAR_TEMP_temp58 = ; 
:  } 
: !VAR_TEMP_temp59 if  { 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp60 ; 
: !VAR_TEMP_temp60 0 = ; 
: !VAR_TEMP_temp60 return  ; 

line = 	}
: 	}

line = 	bool !VAR_USER_ansNeg ;
: 	bool !VAR_USER_ansNeg ;

line = 	!VAR_USER_ansNeg = false ;
: bool !VAR_TEMP_temp61 ; 
: !VAR_TEMP_temp61 false = ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp61 =  ; 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp62 ; 
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ; 
: !VAR_TEMP_temp62 if  { 

line = 		!VAR_USER_x = - !VAR_USER_x ;
: int !VAR_TEMP_temp63 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp63 ; 
: !VAR_USER_x !VAR_TEMP_temp63 =  ; 

line = 		!VAR_USER_ansNeg = true ;
: bool !VAR_TEMP_temp64 ; 
: !VAR_TEMP_temp64 true = ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp64 =  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp65 ; 
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ; 
: !VAR_TEMP_temp65 if  { 

line = 		!VAR_USER_y = - !VAR_USER_y ;
: int !VAR_TEMP_temp66 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp66 ; 
: !VAR_USER_y !VAR_TEMP_temp66 =  ; 

line = 		!VAR_USER_ansNeg = ! !VAR_USER_ansNeg ;
: bool !VAR_TEMP_temp67 ; 
: !VAR_USER_ansNeg !  = !VAR_TEMP_temp67 ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp67 =  ; 

line = 	}
: 	}

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp68 ; 
: !VAR_TEMP_temp68 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp68 =  ; 

line = 	int !VAR_USER_y0 ;
: 	int !VAR_USER_y0 ;

line = 	!VAR_USER_y0 = !VAR_USER_y ;
: !VAR_USER_y0 !VAR_USER_y =  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( !VAR_USER_y0 > 0 ) ) {
: int !VAR_TEMP_temp69 ; 
: !VAR_TEMP_temp69 0 = ; 
: bool !VAR_TEMP_temp70 ; 
: !VAR_USER_y0 !VAR_TEMP_temp69 >  = !VAR_TEMP_temp70 ; 
: bool !VAR_TEMP_temp71 ; 
: !VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ; 
: !VAR_TEMP_temp71 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_y1 ;
: 		int !VAR_USER_y1 ;

line = 		!VAR_USER_y1 = 1 ;
: int !VAR_TEMP_temp72 ; 
: !VAR_TEMP_temp72 1 = ; 
: !VAR_USER_y1 !VAR_TEMP_temp72 =  ; 

line = 		int !VAR_USER_y2 ;
: 		int !VAR_USER_y2 ;

line = 		!VAR_USER_y2 = 2 ;
: int !VAR_TEMP_temp73 ; 
: !VAR_TEMP_temp73 2 = ; 
: !VAR_USER_y2 !VAR_TEMP_temp73 =  ; 

line = 		int !VAR_USER_val1 ;
: 		int !VAR_USER_val1 ;

line = 		!VAR_USER_val1 = !VAR_USER_x ;
: !VAR_USER_val1 !VAR_USER_x =  ; 

line = 		int !VAR_USER_val2 ;
: 		int !VAR_USER_val2 ;

line = 		!VAR_USER_val2 = !VAR_USER_x + !VAR_USER_x ;
: int !VAR_TEMP_temp74 ; 
: !VAR_USER_x !VAR_USER_x +  = !VAR_TEMP_temp74 ; 
: !VAR_USER_val2 !VAR_TEMP_temp74 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

line = 			if ( ! ( !VAR_USER_val2 <= !VAR_USER_y0 ) ) {
: bool !VAR_TEMP_temp75 ; 
: !VAR_USER_val2 !VAR_USER_y0 <=  = !VAR_TEMP_temp75 ; 
: bool !VAR_TEMP_temp76 ; 
: !VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ; 
: !VAR_TEMP_temp76 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

line = 			!VAR_USER_y1 = !VAR_USER_y2 ;
: !VAR_USER_y1 !VAR_USER_y2 =  ; 

line = 			!VAR_USER_val1 = !VAR_USER_val2 ;
: !VAR_USER_val1 !VAR_USER_val2 =  ; 

line = 			!VAR_USER_y2 += !VAR_USER_y2 ;
: !VAR_USER_y2 !VAR_USER_y2 +=  ; 

line = 			!VAR_USER_val2 += !VAR_USER_val2 ;
: !VAR_USER_val2 !VAR_USER_val2 +=  ; 

line = 		}
: 		}

line = 		!VAR_USER_ans += !VAR_USER_val1 ;
: !VAR_USER_ans !VAR_USER_val1 +=  ; 

line = 		!VAR_USER_y0 -= !VAR_USER_y1 ;
: !VAR_USER_y0 !VAR_USER_y1 -=  ; 

line = 	}
: 	}

line = 	if ( !VAR_USER_ansNeg ) {
: !VAR_USER_ansNeg if  { 

line = 		!VAR_USER_ans = - !VAR_USER_ans ;
: int !VAR_TEMP_temp77 ; 
: !VAR_USER_ans u-  = !VAR_TEMP_temp77 ; 
: !VAR_USER_ans !VAR_TEMP_temp77 =  ; 

line = 	}
: 	}

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp78 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ; 
: !VAR_TEMP_temp78 if  { 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp79 ; 
: !VAR_TEMP_temp79 0 = ; 
: !VAR_TEMP_temp79 return  ; 

line = 	}
: 	}

line = 	if ( !VAR_USER_x < 0 && !VAR_USER_y < 0 ) {
: int !VAR_TEMP_temp80 ; 
: !VAR_TEMP_temp80 0 = ; 
: int !VAR_TEMP_temp81 ; 
: !VAR_TEMP_temp81 0 = ; 
: bool !VAR_TEMP_temp82 ; 
: !VAR_USER_x !VAR_TEMP_temp80 <  = !VAR_TEMP_temp82 ; 
: !VAR_TEMP_temp82 if { 
: bool !VAR_TEMP_temp83 ; 
: !VAR_USER_y !VAR_TEMP_temp81 <  = !VAR_TEMP_temp83 ; 
: bool !VAR_TEMP_temp84 ; 
: !VAR_TEMP_temp84 !VAR_TEMP_temp83 = ; 
:  } 
: else { 
: !VAR_TEMP_temp84 !VAR_TEMP_temp82 = ; 
:  } 
: !VAR_TEMP_temp84 if  { 

line = 		return ( !FUNC_LIB_div ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp85 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp85 ; 
: int !VAR_TEMP_temp86 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp86 ; 
: bool !VAR_TEMP_temp87 ; 
: !VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ; 
: !VAR_TEMP_temp87 return  ; 

line = 	}
: 	}

line = 	if ( !VAR_USER_x < 0 ) {
: int !VAR_TEMP_temp88 ; 
: !VAR_TEMP_temp88 0 = ; 
: bool !VAR_TEMP_temp89 ; 
: !VAR_USER_x !VAR_TEMP_temp88 < = !VAR_TEMP_temp89 ; 
: !VAR_TEMP_temp89 if  { 

line = 		return ( - !FUNC_LIB_div ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp90 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp90 ; 
: int !VAR_TEMP_temp91 ; 
: !VAR_TEMP_temp90 !VAR_USER_y !FUNC_LIB_div  = !VAR_TEMP_temp91 ; 
: bool !VAR_TEMP_temp92 ; 
: !VAR_TEMP_temp91 u- = !VAR_TEMP_temp92 ; 
: !VAR_TEMP_temp92 return  ; 

line = 	}
: 	}

line = 	if ( !VAR_USER_y < 0 ) {
: int !VAR_TEMP_temp93 ; 
: !VAR_TEMP_temp93 0 = ; 
: bool !VAR_TEMP_temp94 ; 
: !VAR_USER_y !VAR_TEMP_temp93 < = !VAR_TEMP_temp94 ; 
: !VAR_TEMP_temp94 if  { 

line = 		return ( - !FUNC_LIB_div ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp95 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp95 ; 
: int !VAR_TEMP_temp96 ; 
: !VAR_USER_x !VAR_TEMP_temp95 !FUNC_LIB_div  = !VAR_TEMP_temp96 ; 
: bool !VAR_TEMP_temp97 ; 
: !VAR_TEMP_temp96 u- = !VAR_TEMP_temp97 ; 
: !VAR_TEMP_temp97 return  ; 

line = 	}
: 	}

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp98 ; 
: !VAR_TEMP_temp98 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp98 =  ; 

line = 	int !VAR_USER_n ;
: 	int !VAR_USER_n ;

line = 	!VAR_USER_n = !VAR_USER_x ;
: !VAR_USER_n !VAR_USER_x =  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( !VAR_USER_n >= !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp99 ; 
: !VAR_USER_n !VAR_USER_y >=  = !VAR_TEMP_temp99 ; 
: bool !VAR_TEMP_temp100 ; 
: !VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ; 
: !VAR_TEMP_temp100 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_prevJump ;
: 		int !VAR_USER_prevJump ;

line = 		!VAR_USER_prevJump = 0 ;
: int !VAR_TEMP_temp101 ; 
: !VAR_TEMP_temp101 0 = ; 
: !VAR_USER_prevJump !VAR_TEMP_temp101 =  ; 

line = 		int !VAR_USER_jump ;
: 		int !VAR_USER_jump ;

line = 		!VAR_USER_jump = 1 ;
: int !VAR_TEMP_temp102 ; 
: !VAR_TEMP_temp102 1 = ; 
: !VAR_USER_jump !VAR_TEMP_temp102 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

line = 			if ( ! ( !VAR_USER_y * ( !VAR_USER_ans + !VAR_USER_jump ) <= !VAR_USER_x ) ) {
: int !VAR_TEMP_temp103 ; 
: !VAR_USER_ans !VAR_USER_jump +  = !VAR_TEMP_temp103 ; 
: int !VAR_TEMP_temp104 ; 
: !VAR_USER_y !VAR_TEMP_temp103 *  = !VAR_TEMP_temp104 ; 
: bool !VAR_TEMP_temp105 ; 
: !VAR_TEMP_temp104 !VAR_USER_x <=  = !VAR_TEMP_temp105 ; 
: bool !VAR_TEMP_temp106 ; 
: !VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ; 
: !VAR_TEMP_temp106 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

line = 			!VAR_USER_prevJump = !VAR_USER_jump ;
: !VAR_USER_prevJump !VAR_USER_jump =  ; 

line = 			!VAR_USER_jump += !VAR_USER_jump ;
: !VAR_USER_jump !VAR_USER_jump +=  ; 

line = 		}
: 		}

line = 		!VAR_USER_ans += !VAR_USER_prevJump ;
: !VAR_USER_ans !VAR_USER_prevJump +=  ; 

line = 		!VAR_USER_n = !VAR_USER_x - ( !VAR_USER_y * !VAR_USER_ans ) ;
: int !VAR_TEMP_temp107 ; 
: !VAR_USER_y !VAR_USER_ans *  = !VAR_TEMP_temp107 ; 
: int !VAR_TEMP_temp108 ; 
: !VAR_USER_x !VAR_TEMP_temp107 -  = !VAR_TEMP_temp108 ; 
: !VAR_USER_n !VAR_TEMP_temp108 =  ; 

line = 	}
: 	}

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	int !VAR_USER_d ;
: 	int !VAR_USER_d ;

line = 	!VAR_USER_d = !FUNC_LIB_div ( !VAR_USER_x , !VAR_USER_y ) ;
: int !VAR_TEMP_temp109 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_div  = !VAR_TEMP_temp109 ; 
: !VAR_USER_d !VAR_TEMP_temp109 =  ; 

line = 	return ( !VAR_USER_x - !VAR_USER_y * !VAR_USER_d ) ;
: int !VAR_TEMP_temp110 ; 
: !VAR_USER_y !VAR_USER_d *  = !VAR_TEMP_temp110 ; 
: bool !VAR_TEMP_temp111 ; 
: !VAR_USER_x !VAR_TEMP_temp110 - = !VAR_TEMP_temp111 ; 
: !VAR_TEMP_temp111 return  ; 

line = }
: }

line = int !FUNC_LIB_neg ( int !VAR_USER_x ) {
: int !FUNC_LIB_neg ( int !VAR_USER_x ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp112 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ; 
: !VAR_TEMP_temp112 if  { 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp113 ; 
: !VAR_TEMP_temp113 0 = ; 
: !VAR_TEMP_temp113 return  ; 

line = 	}
: 	}

line = 	return ( !FUNC_LIB_basic_neg ( !VAR_USER_x ) ) ;
: bool !VAR_TEMP_temp114 ; 
: !VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ; 
: !VAR_TEMP_temp114 return  ; 

line = }
: }

line = bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp115 ; 
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ; 
: !VAR_TEMP_temp115 if  { 

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp116 ; 
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ; 
: !VAR_TEMP_temp116 if  { 

line = 			return ( !FUNC_LIB_lt ( - !VAR_USER_y , - !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp117 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp117 ; 
: int !VAR_TEMP_temp118 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp118 ; 
: bool !VAR_TEMP_temp119 ; 
: !VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ; 
: !VAR_TEMP_temp119 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			return ( true ) ;
: bool !VAR_TEMP_temp120 ; 
: !VAR_TEMP_temp120 true = ; 
: !VAR_TEMP_temp120 return  ; 

line = 		}
: 		}

line = 	}
: 	}

line = 	else {
: 	else {

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp121 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ; 
: !VAR_TEMP_temp121 if  { 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp122 ; 
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ; 
: !VAR_TEMP_temp122 if  { 

line = 				return ( false ) ;
: bool !VAR_TEMP_temp123 ; 
: !VAR_TEMP_temp123 false = ; 
: !VAR_TEMP_temp123 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp124 ; 
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ; 
: !VAR_TEMP_temp124 if  { 

line = 					return ( false ) ;
: bool !VAR_TEMP_temp125 ; 
: !VAR_TEMP_temp125 false = ; 
: !VAR_TEMP_temp125 return  ; 

line = 				}
: 				}

line = 				else {
: 				else {

line = 					return ( true ) ;
: bool !VAR_TEMP_temp126 ; 
: !VAR_TEMP_temp126 true = ; 
: !VAR_TEMP_temp126 return  ; 

line = 				}
: 				}

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp127 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp127 ; 
: !VAR_TEMP_temp127 if { 
: !VAR_TEMP_temp129 !VAR_TEMP_temp127 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp128 ; 
: !VAR_USER_y !FUNC_LIB_isZero  = !VAR_TEMP_temp128 ; 
: bool !VAR_TEMP_temp129 ; 
: !VAR_TEMP_temp129 !VAR_TEMP_temp128 = ; 
:  } 
: !VAR_TEMP_temp129 if  { 

line = 				return ( false ) ;
: bool !VAR_TEMP_temp130 ; 
: !VAR_TEMP_temp130 false = ; 
: !VAR_TEMP_temp130 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				return ( !FUNC_LIB_basic_lt ( !VAR_USER_x , !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp131 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ; 
: !VAR_TEMP_temp131 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	return ( ( !VAR_USER_x == !VAR_USER_y ) || ( !VAR_USER_x < !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp132 ; 
: !VAR_USER_x !VAR_USER_y ==  = !VAR_TEMP_temp132 ; 
: !VAR_TEMP_temp132 if { 
: !VAR_TEMP_temp134 !VAR_TEMP_temp132 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp133 ; 
: !VAR_USER_x !VAR_USER_y <  = !VAR_TEMP_temp133 ; 
: bool !VAR_TEMP_temp134 ; 
: !VAR_TEMP_temp134 !VAR_TEMP_temp133 = ; 
:  } 
: !VAR_TEMP_temp134 return  ; 

line = }
: }

line = bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	return ( ! ( !VAR_USER_x <= !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp135 ; 
: !VAR_USER_x !VAR_USER_y <=  = !VAR_TEMP_temp135 ; 
: bool !VAR_TEMP_temp136 ; 
: !VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ; 
: !VAR_TEMP_temp136 return  ; 

line = }
: }

line = bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	return ( ! ( !VAR_USER_x < !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp137 ; 
: !VAR_USER_x !VAR_USER_y <  = !VAR_TEMP_temp137 ; 
: bool !VAR_TEMP_temp138 ; 
: !VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ; 
: !VAR_TEMP_temp138 return  ; 

line = }
: }

line = bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp139 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ; 
: !VAR_TEMP_temp139 if  { 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp140 ; 
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ; 
: !VAR_TEMP_temp140 if  { 

line = 			return ( true ) ;
: bool !VAR_TEMP_temp141 ; 
: !VAR_TEMP_temp141 true = ; 
: !VAR_TEMP_temp141 return  ; 

line = 		}
: 		}

line = 		return ( false ) ;
: bool !VAR_TEMP_temp142 ; 
: !VAR_TEMP_temp142 false = ; 
: !VAR_TEMP_temp142 return  ; 

line = 	}
: 	}

line = 	else {
: 	else {

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp143 ; 
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ; 
: !VAR_TEMP_temp143 if  { 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp144 ; 
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ; 
: !VAR_TEMP_temp144 if  { 

line = 				return ( !FUNC_LIB_basic_eq ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp145 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp145 ; 
: int !VAR_TEMP_temp146 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp146 ; 
: bool !VAR_TEMP_temp147 ; 
: !VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ; 
: !VAR_TEMP_temp147 return  ; 

line = 			}
: 			}

line = 			return ( false ) ;
: bool !VAR_TEMP_temp148 ; 
: !VAR_TEMP_temp148 false = ; 
: !VAR_TEMP_temp148 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			if ( !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp149 ; 
: !VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ; 
: !VAR_TEMP_temp149 if  { 

line = 				return ( !FUNC_LIB_basic_eq ( !VAR_USER_x , !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp150 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ; 
: !VAR_TEMP_temp150 return  ; 

line = 			}
: 			}

line = 			return ( false ) ;
: bool !VAR_TEMP_temp151 ; 
: !VAR_TEMP_temp151 false = ; 
: !VAR_TEMP_temp151 return  ; 

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	return ( ! ( !VAR_USER_x == !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp152 ; 
: !VAR_USER_x !VAR_USER_y ==  = !VAR_TEMP_temp152 ; 
: bool !VAR_TEMP_temp153 ; 
: !VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ; 
: !VAR_TEMP_temp153 return  ; 

line = }
: }

line = int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: bool !VAR_TEMP_temp154 ; 
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ; 
: !VAR_TEMP_temp154 if  { 

line = 		return ( !VAR_USER_y ) ;
: !VAR_USER_y return  ; 

line = 	}
: 	}

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp155 ; 
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ; 
: !VAR_TEMP_temp155 if  { 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

line = 	return ( !FUNC_LIB_basic_xor ( !VAR_USER_x , !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp156 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ; 
: !VAR_TEMP_temp156 return  ; 

line = }
: }

line = void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {

line = 	int !VAR_USER_currBitIndex ;
: 	int !VAR_USER_currBitIndex ;

line = 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
: int !VAR_TEMP_temp157 ; 
: !FUNC_LIB_getMemBitIndex  = !VAR_TEMP_temp157 ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp157 =  ; 

line = 	bool !VAR_USER_handledSign ;
: 	bool !VAR_USER_handledSign ;

line = 	!VAR_USER_handledSign = false ;
: bool !VAR_TEMP_temp158 ; 
: !VAR_TEMP_temp158 false = ; 
: !VAR_USER_handledSign !VAR_TEMP_temp158 =  ; 

line = 	int !VAR_USER_valIndex ;
: 	int !VAR_USER_valIndex ;

line = 	!VAR_USER_valIndex = 0 ;
: int !VAR_TEMP_temp159 ; 
: !VAR_TEMP_temp159 0 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp159 =  ; 

line = 	int !VAR_USER_V ;
: 	int !VAR_USER_V ;

line = 	!VAR_USER_V = !VAR_USER_val ;
: !VAR_USER_V !VAR_USER_val =  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( ! !FUNC_LIB_isZero ( !VAR_USER_V ) || ! !VAR_USER_handledSign ) ) {
: bool !VAR_TEMP_temp160 ; 
: !VAR_USER_V !FUNC_LIB_isZero  = !VAR_TEMP_temp160 ; 
: bool !VAR_TEMP_temp161 ; 
: !VAR_TEMP_temp160 !  = !VAR_TEMP_temp161 ; 
: !VAR_TEMP_temp161 if { 
: !VAR_TEMP_temp163 !VAR_TEMP_temp161 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp162 ; 
: !VAR_USER_handledSign !  = !VAR_TEMP_temp162 ; 
: bool !VAR_TEMP_temp163 ; 
: !VAR_TEMP_temp163 !VAR_TEMP_temp162 = ; 
:  } 
: bool !VAR_TEMP_temp164 ; 
: !VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ; 
: !VAR_TEMP_temp164 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_desiredBitIndex ;
: 		int !VAR_USER_desiredBitIndex ;

line = 		!VAR_USER_desiredBitIndex = ( ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex + 1 ) ) / 2 + !VAR_USER_index ;
: int !VAR_TEMP_temp165 ; 
: !VAR_TEMP_temp165 1 = ; 
: int !VAR_TEMP_temp166 ; 
: !VAR_TEMP_temp166 2 = ; 
: int !VAR_TEMP_temp167 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp167 ; 
: int !VAR_TEMP_temp168 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp168 ; 
: int !VAR_TEMP_temp169 ; 
: !VAR_TEMP_temp168 !VAR_TEMP_temp165 +  = !VAR_TEMP_temp169 ; 
: int !VAR_TEMP_temp170 ; 
: !VAR_TEMP_temp167 !VAR_TEMP_temp169 *  = !VAR_TEMP_temp170 ; 
: int !VAR_TEMP_temp171 ; 
: !VAR_TEMP_temp170 !VAR_TEMP_temp166 /  = !VAR_TEMP_temp171 ; 
: int !VAR_TEMP_temp172 ; 
: !VAR_TEMP_temp171 !VAR_USER_index +  = !VAR_TEMP_temp172 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp172 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

line = 			if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp173 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex >  = !VAR_TEMP_temp173 ; 
: bool !VAR_TEMP_temp174 ; 
: !VAR_TEMP_temp173 ! = !VAR_TEMP_temp174 ; 
: !VAR_TEMP_temp174 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

line = 			!VAR_USER_currBitIndex -= 1 ;
: int !VAR_TEMP_temp175 ; 
: !VAR_TEMP_temp175 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp175 -=  ; 

line = 			!FUNC_LIB_moveMemHeadLeft ( ) ;
: !FUNC_LIB_moveMemHeadLeft  ; 

line = 		}
: 		}

line = 		while ( true ) {
: 		while ( true ) {

line = 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp176 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp176 ; 
: bool !VAR_TEMP_temp177 ; 
: !VAR_TEMP_temp176 ! = !VAR_TEMP_temp177 ; 
: !VAR_TEMP_temp177 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

line = 			!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp178 ; 
: !VAR_TEMP_temp178 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp178 +=  ; 

line = 			!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 		}
: 		}

line = 		if ( ! !VAR_USER_handledSign ) {
: bool !VAR_TEMP_temp179 ; 
: !VAR_USER_handledSign ! = !VAR_TEMP_temp179 ; 
: !VAR_TEMP_temp179 if  { 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_V ) ) {
: bool !VAR_TEMP_temp180 ; 
: !VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp180 ; 
: !VAR_TEMP_temp180 if  { 

line = 				!FUNC_LIB_setMemBitOne ( ) ;
: !FUNC_LIB_setMemBitOne  ; 

line = 				!VAR_USER_V = - !VAR_USER_V ;
: int !VAR_TEMP_temp181 ; 
: !VAR_USER_V u-  = !VAR_TEMP_temp181 ; 
: !VAR_USER_V !VAR_TEMP_temp181 =  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				!FUNC_LIB_setMemBitZero ( ) ;
: !FUNC_LIB_setMemBitZero  ; 

line = 			}
: 			}

line = 			!VAR_USER_handledSign = true ;
: bool !VAR_TEMP_temp182 ; 
: !VAR_TEMP_temp182 true = ; 
: !VAR_USER_handledSign !VAR_TEMP_temp182 =  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			int !VAR_USER_V2 ;
: 			int !VAR_USER_V2 ;

line = 			!VAR_USER_V2 = !VAR_USER_V / 2 ;
: int !VAR_TEMP_temp183 ; 
: !VAR_TEMP_temp183 2 = ; 
: int !VAR_TEMP_temp184 ; 
: !VAR_USER_V !VAR_TEMP_temp183 /  = !VAR_TEMP_temp184 ; 
: !VAR_USER_V2 !VAR_TEMP_temp184 =  ; 

line = 			int !VAR_USER_bit ;
: 			int !VAR_USER_bit ;

line = 			!VAR_USER_bit = !VAR_USER_V - ( 2 * !VAR_USER_V2 ) ;
: int !VAR_TEMP_temp185 ; 
: !VAR_TEMP_temp185 2 = ; 
: int !VAR_TEMP_temp186 ; 
: !VAR_TEMP_temp185 !VAR_USER_V2 *  = !VAR_TEMP_temp186 ; 
: int !VAR_TEMP_temp187 ; 
: !VAR_USER_V !VAR_TEMP_temp186 -  = !VAR_TEMP_temp187 ; 
: !VAR_USER_bit !VAR_TEMP_temp187 =  ; 

line = 			if ( !VAR_USER_bit == 1 ) {
: int !VAR_TEMP_temp188 ; 
: !VAR_TEMP_temp188 1 = ; 
: bool !VAR_TEMP_temp189 ; 
: !VAR_USER_bit !VAR_TEMP_temp188 == = !VAR_TEMP_temp189 ; 
: !VAR_TEMP_temp189 if  { 

line = 				!FUNC_LIB_setMemBitOne ( ) ;
: !FUNC_LIB_setMemBitOne  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				!FUNC_LIB_setMemBitZero ( ) ;
: !FUNC_LIB_setMemBitZero  ; 

line = 			}
: 			}

line = 			!VAR_USER_V = !VAR_USER_V2 ;
: !VAR_USER_V !VAR_USER_V2 =  ; 

line = 		}
: 		}

line = 		!VAR_USER_valIndex += 1 ;
: int !VAR_TEMP_temp190 ; 
: !VAR_TEMP_temp190 1 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp190 +=  ; 

line = 	}
: 	}

line = 	int !VAR_USER_desiredBitIndex ;
: 	int !VAR_USER_desiredBitIndex ;

line = 	!VAR_USER_desiredBitIndex = ( ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex + 1 ) ) / 2 + !VAR_USER_index ;
: int !VAR_TEMP_temp191 ; 
: !VAR_TEMP_temp191 1 = ; 
: int !VAR_TEMP_temp192 ; 
: !VAR_TEMP_temp192 2 = ; 
: int !VAR_TEMP_temp193 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp193 ; 
: int !VAR_TEMP_temp194 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp194 ; 
: int !VAR_TEMP_temp195 ; 
: !VAR_TEMP_temp194 !VAR_TEMP_temp191 +  = !VAR_TEMP_temp195 ; 
: int !VAR_TEMP_temp196 ; 
: !VAR_TEMP_temp193 !VAR_TEMP_temp195 *  = !VAR_TEMP_temp196 ; 
: int !VAR_TEMP_temp197 ; 
: !VAR_TEMP_temp196 !VAR_TEMP_temp192 /  = !VAR_TEMP_temp197 ; 
: int !VAR_TEMP_temp198 ; 
: !VAR_TEMP_temp197 !VAR_USER_index +  = !VAR_TEMP_temp198 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp198 =  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp199 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp199 ; 
: bool !VAR_TEMP_temp200 ; 
: !VAR_TEMP_temp199 ! = !VAR_TEMP_temp200 ; 
: !VAR_TEMP_temp200 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp201 ; 
: !VAR_TEMP_temp201 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp201 +=  ; 

line = 		!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 	}
: 	}

line = 	!FUNC_LIB_setMemBitBlank ( ) ;
: !FUNC_LIB_setMemBitBlank  ; 

line = 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
: !VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex  ; 

line = 	return ;
: return  ; 

line = }
: }

line = int !FUNC_LIB_memget ( int !VAR_USER_index ) {
: int !FUNC_LIB_memget ( int !VAR_USER_index ) {

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp202 ; 
: !VAR_TEMP_temp202 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp202 =  ; 

line = 	int !VAR_USER_currBitIndex ;
: 	int !VAR_USER_currBitIndex ;

line = 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
: int !VAR_TEMP_temp203 ; 
: !FUNC_LIB_getMemBitIndex  = !VAR_TEMP_temp203 ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp203 =  ; 

line = 	int !VAR_USER_desiredBitIndex ;
: 	int !VAR_USER_desiredBitIndex ;

line = 	!VAR_USER_desiredBitIndex = ( !VAR_USER_index * ( !VAR_USER_index + 1 ) ) / 2 + !VAR_USER_index ;
: int !VAR_TEMP_temp204 ; 
: !VAR_TEMP_temp204 1 = ; 
: int !VAR_TEMP_temp205 ; 
: !VAR_TEMP_temp205 2 = ; 
: int !VAR_TEMP_temp206 ; 
: !VAR_USER_index !VAR_TEMP_temp204 +  = !VAR_TEMP_temp206 ; 
: int !VAR_TEMP_temp207 ; 
: !VAR_USER_index !VAR_TEMP_temp206 *  = !VAR_TEMP_temp207 ; 
: int !VAR_TEMP_temp208 ; 
: !VAR_TEMP_temp207 !VAR_TEMP_temp205 /  = !VAR_TEMP_temp208 ; 
: int !VAR_TEMP_temp209 ; 
: !VAR_TEMP_temp208 !VAR_USER_index +  = !VAR_TEMP_temp209 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp209 =  ; 

line = 	!FUNC_LIB_printInt ( !VAR_USER_desiredBitIndex ) ;
: !VAR_USER_desiredBitIndex !FUNC_LIB_printInt  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp210 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex >  = !VAR_TEMP_temp210 ; 
: bool !VAR_TEMP_temp211 ; 
: !VAR_TEMP_temp210 ! = !VAR_TEMP_temp211 ; 
: !VAR_TEMP_temp211 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		!VAR_USER_currBitIndex -= 1 ;
: int !VAR_TEMP_temp212 ; 
: !VAR_TEMP_temp212 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp212 -=  ; 

line = 		!FUNC_LIB_moveMemHeadLeft ( ) ;
: !FUNC_LIB_moveMemHeadLeft  ; 

line = 	}
: 	}

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp213 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp213 ; 
: bool !VAR_TEMP_temp214 ; 
: !VAR_TEMP_temp213 ! = !VAR_TEMP_temp214 ; 
: !VAR_TEMP_temp214 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp215 ; 
: !VAR_TEMP_temp215 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp215 +=  ; 

line = 		!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 	}
: 	}

line = 	int !VAR_USER_valIndex ;
: 	int !VAR_USER_valIndex ;

line = 	!VAR_USER_valIndex = 0 ;
: int !VAR_TEMP_temp216 ; 
: !VAR_TEMP_temp216 0 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp216 =  ; 

line = 	bool !VAR_USER_shouldBeNegative ;
: 	bool !VAR_USER_shouldBeNegative ;

line = 	!VAR_USER_shouldBeNegative = false ;
: bool !VAR_TEMP_temp217 ; 
: !VAR_TEMP_temp217 false = ; 
: !VAR_USER_shouldBeNegative !VAR_TEMP_temp217 =  ; 

line = 	int !VAR_USER_pow2 ;
: 	int !VAR_USER_pow2 ;

line = 	!VAR_USER_pow2 = 0 ;
: int !VAR_TEMP_temp218 ; 
: !VAR_TEMP_temp218 0 = ; 
: !VAR_USER_pow2 !VAR_TEMP_temp218 =  ; 

line = 	while ( true ) {
: 	while ( true ) {

line = 		if ( ! ( ! !FUNC_LIB_memBitIsBlank ( ) ) ) {
: bool !VAR_TEMP_temp219 ; 
: !FUNC_LIB_memBitIsBlank  = !VAR_TEMP_temp219 ; 
: bool !VAR_TEMP_temp220 ; 
: !VAR_TEMP_temp219 !  = !VAR_TEMP_temp220 ; 
: bool !VAR_TEMP_temp221 ; 
: !VAR_TEMP_temp220 ! = !VAR_TEMP_temp221 ; 
: !VAR_TEMP_temp221 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_valIndex ) ) {
: bool !VAR_TEMP_temp222 ; 
: !VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp222 ; 
: !VAR_TEMP_temp222 if  { 

line = 			!FUNC_LIB_printInt ( 413 ) ;
: int !VAR_TEMP_temp223 ; 
: !VAR_TEMP_temp223 413 = ; 
: !VAR_TEMP_temp223 !FUNC_LIB_printInt  ; 

line = 			!FUNC_LIB_printInt ( - 413 ) ;
: int !VAR_TEMP_temp224 ; 
: !VAR_TEMP_temp224 413 = ; 
: int !VAR_TEMP_temp225 ; 
: !VAR_TEMP_temp224 u-  = !VAR_TEMP_temp225 ; 
: !VAR_TEMP_temp225 !FUNC_LIB_printInt  ; 

line = 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
: bool !VAR_TEMP_temp226 ; 
: !FUNC_LIB_memBitIsOne = !VAR_TEMP_temp226 ; 
: !VAR_TEMP_temp226 if  { 

line = 				!FUNC_LIB_printInt ( 417 ) ;
: int !VAR_TEMP_temp227 ; 
: !VAR_TEMP_temp227 417 = ; 
: !VAR_TEMP_temp227 !FUNC_LIB_printInt  ; 

line = 				!FUNC_LIB_printInt ( - 417 ) ;
: int !VAR_TEMP_temp228 ; 
: !VAR_TEMP_temp228 417 = ; 
: int !VAR_TEMP_temp229 ; 
: !VAR_TEMP_temp228 u-  = !VAR_TEMP_temp229 ; 
: !VAR_TEMP_temp229 !FUNC_LIB_printInt  ; 

line = 				!VAR_USER_shouldBeNegative = true ;
: bool !VAR_TEMP_temp230 ; 
: !VAR_TEMP_temp230 true = ; 
: !VAR_USER_shouldBeNegative !VAR_TEMP_temp230 =  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

line = 			!FUNC_LIB_printInt ( 423 ) ;
: int !VAR_TEMP_temp231 ; 
: !VAR_TEMP_temp231 423 = ; 
: !VAR_TEMP_temp231 !FUNC_LIB_printInt  ; 

line = 			!FUNC_LIB_printInt ( - 423 ) ;
: int !VAR_TEMP_temp232 ; 
: !VAR_TEMP_temp232 423 = ; 
: int !VAR_TEMP_temp233 ; 
: !VAR_TEMP_temp232 u-  = !VAR_TEMP_temp233 ; 
: !VAR_TEMP_temp233 !FUNC_LIB_printInt  ; 

line = 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
: bool !VAR_TEMP_temp234 ; 
: !FUNC_LIB_memBitIsOne = !VAR_TEMP_temp234 ; 
: !VAR_TEMP_temp234 if  { 

line = 				!VAR_USER_ans += !VAR_USER_pow2 ;
: !VAR_USER_ans !VAR_USER_pow2 +=  ; 

line = 				!FUNC_LIB_printInt ( 37 ) ;
: int !VAR_TEMP_temp235 ; 
: !VAR_TEMP_temp235 37 = ; 
: !VAR_TEMP_temp235 !FUNC_LIB_printInt  ; 

line = 				!FUNC_LIB_printInt ( !VAR_USER_ans ) ;
: !VAR_USER_ans !FUNC_LIB_printInt  ; 

line = 				!FUNC_LIB_printInt ( - 37 ) ;
: int !VAR_TEMP_temp236 ; 
: !VAR_TEMP_temp236 37 = ; 
: int !VAR_TEMP_temp237 ; 
: !VAR_TEMP_temp236 u-  = !VAR_TEMP_temp237 ; 
: !VAR_TEMP_temp237 !FUNC_LIB_printInt  ; 

line = 			}
: 			}

line = 			else {
: 			else {

line = 				!FUNC_LIB_printInt ( 8999 ) ;
: int !VAR_TEMP_temp238 ; 
: !VAR_TEMP_temp238 8999 = ; 
: !VAR_TEMP_temp238 !FUNC_LIB_printInt  ; 

line = 				if ( !FUNC_LIB_memBitIsZero ( ) ) {
: bool !VAR_TEMP_temp239 ; 
: !FUNC_LIB_memBitIsZero = !VAR_TEMP_temp239 ; 
: !VAR_TEMP_temp239 if  { 

line = 					!FUNC_LIB_printInt ( 9000 ) ;
: int !VAR_TEMP_temp240 ; 
: !VAR_TEMP_temp240 9000 = ; 
: !VAR_TEMP_temp240 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				else {
: 				else {

line = 					!FUNC_LIB_printInt ( - 9000 ) ;
: int !VAR_TEMP_temp241 ; 
: !VAR_TEMP_temp241 9000 = ; 
: int !VAR_TEMP_temp242 ; 
: !VAR_TEMP_temp241 u-  = !VAR_TEMP_temp242 ; 
: !VAR_TEMP_temp242 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				if ( !FUNC_LIB_memBitIsOne ( ) ) {
: bool !VAR_TEMP_temp243 ; 
: !FUNC_LIB_memBitIsOne = !VAR_TEMP_temp243 ; 
: !VAR_TEMP_temp243 if  { 

line = 					!FUNC_LIB_printInt ( 9001 ) ;
: int !VAR_TEMP_temp244 ; 
: !VAR_TEMP_temp244 9001 = ; 
: !VAR_TEMP_temp244 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				else {
: 				else {

line = 					!FUNC_LIB_printInt ( - 9001 ) ;
: int !VAR_TEMP_temp245 ; 
: !VAR_TEMP_temp245 9001 = ; 
: int !VAR_TEMP_temp246 ; 
: !VAR_TEMP_temp245 u-  = !VAR_TEMP_temp246 ; 
: !VAR_TEMP_temp246 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				if ( !FUNC_LIB_memBitIsBlank ( ) ) {
: bool !VAR_TEMP_temp247 ; 
: !FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp247 ; 
: !VAR_TEMP_temp247 if  { 

line = 					!FUNC_LIB_printInt ( 9002 ) ;
: int !VAR_TEMP_temp248 ; 
: !VAR_TEMP_temp248 9002 = ; 
: !VAR_TEMP_temp248 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				else {
: 				else {

line = 					!FUNC_LIB_printInt ( - 9002 ) ;
: int !VAR_TEMP_temp249 ; 
: !VAR_TEMP_temp249 9002 = ; 
: int !VAR_TEMP_temp250 ; 
: !VAR_TEMP_temp249 u-  = !VAR_TEMP_temp250 ; 
: !VAR_TEMP_temp250 !FUNC_LIB_printInt  ; 

line = 				}
: 				}

line = 				!FUNC_LIB_printInt ( - 8999 ) ;
: int !VAR_TEMP_temp251 ; 
: !VAR_TEMP_temp251 8999 = ; 
: int !VAR_TEMP_temp252 ; 
: !VAR_TEMP_temp251 u-  = !VAR_TEMP_temp252 ; 
: !VAR_TEMP_temp252 !FUNC_LIB_printInt  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 		!VAR_USER_valIndex += 1 ;
: int !VAR_TEMP_temp253 ; 
: !VAR_TEMP_temp253 1 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp253 +=  ; 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_pow2 ) ) {
: bool !VAR_TEMP_temp254 ; 
: !VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp254 ; 
: !VAR_TEMP_temp254 if  { 

line = 			!VAR_USER_pow2 = 1 ;
: int !VAR_TEMP_temp255 ; 
: !VAR_TEMP_temp255 1 = ; 
: !VAR_USER_pow2 !VAR_TEMP_temp255 =  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			!VAR_USER_pow2 += !VAR_USER_pow2 ;
: !VAR_USER_pow2 !VAR_USER_pow2 +=  ; 

line = 		}
: 		}

line = 		!VAR_USER_desiredBitIndex = ( ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex + 1 ) ) / 2 + !VAR_USER_index ;
: int !VAR_TEMP_temp256 ; 
: !VAR_TEMP_temp256 1 = ; 
: int !VAR_TEMP_temp257 ; 
: !VAR_TEMP_temp257 2 = ; 
: int !VAR_TEMP_temp258 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp258 ; 
: int !VAR_TEMP_temp259 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp259 ; 
: int !VAR_TEMP_temp260 ; 
: !VAR_TEMP_temp259 !VAR_TEMP_temp256 +  = !VAR_TEMP_temp260 ; 
: int !VAR_TEMP_temp261 ; 
: !VAR_TEMP_temp258 !VAR_TEMP_temp260 *  = !VAR_TEMP_temp261 ; 
: int !VAR_TEMP_temp262 ; 
: !VAR_TEMP_temp261 !VAR_TEMP_temp257 /  = !VAR_TEMP_temp262 ; 
: int !VAR_TEMP_temp263 ; 
: !VAR_TEMP_temp262 !VAR_USER_index +  = !VAR_TEMP_temp263 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp263 =  ; 

line = 		!FUNC_LIB_printInt ( 100 ) ;
: int !VAR_TEMP_temp264 ; 
: !VAR_TEMP_temp264 100 = ; 
: !VAR_TEMP_temp264 !FUNC_LIB_printInt  ; 

line = 		!FUNC_LIB_printInt ( !VAR_USER_desiredBitIndex ) ;
: !VAR_USER_desiredBitIndex !FUNC_LIB_printInt  ; 

line = 		!FUNC_LIB_printInt ( - 100 ) ;
: int !VAR_TEMP_temp265 ; 
: !VAR_TEMP_temp265 100 = ; 
: int !VAR_TEMP_temp266 ; 
: !VAR_TEMP_temp265 u-  = !VAR_TEMP_temp266 ; 
: !VAR_TEMP_temp266 !FUNC_LIB_printInt  ; 

line = 		while ( true ) {
: 		while ( true ) {

line = 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp267 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp267 ; 
: bool !VAR_TEMP_temp268 ; 
: !VAR_TEMP_temp267 ! = !VAR_TEMP_temp268 ; 
: !VAR_TEMP_temp268 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

line = 			!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp269 ; 
: !VAR_TEMP_temp269 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp269 +=  ; 

line = 			!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 		}
: 		}

line = 	}
: 	}

line = 	if ( !VAR_USER_shouldBeNegative ) {
: !VAR_USER_shouldBeNegative if  { 

line = 		!VAR_USER_ans = - !VAR_USER_ans ;
: int !VAR_TEMP_temp270 ; 
: !VAR_USER_ans u-  = !VAR_TEMP_temp270 ; 
: !VAR_USER_ans !VAR_TEMP_temp270 =  ; 

line = 	}
: 	}

line = 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
: !VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex  ; 

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = void !FUNC_USER_what ( int !VAR_USER_x ) {
: void !FUNC_USER_what ( int !VAR_USER_x ) {

line = 	return ;
: return  ; 

line = }
: }

line = int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {

line = 	int !VAR_USER_temp ;
: 	int !VAR_USER_temp ;

line = 	!VAR_USER_temp = !VAR_USER_a * !VAR_USER_b / !VAR_USER_c ;
: int !VAR_TEMP_temp271 ; 
: !VAR_USER_a !VAR_USER_b *  = !VAR_TEMP_temp271 ; 
: int !VAR_TEMP_temp272 ; 
: !VAR_TEMP_temp271 !VAR_USER_c /  = !VAR_TEMP_temp272 ; 
: !VAR_USER_temp !VAR_TEMP_temp272 =  ; 

line = 	int !VAR_USER_x ;
: 	int !VAR_USER_x ;

line = 	!VAR_USER_x = !VAR_USER_a - - 1 ;
: int !VAR_TEMP_temp273 ; 
: !VAR_TEMP_temp273 1 = ; 
: int !VAR_TEMP_temp274 ; 
: !VAR_TEMP_temp273 u-  = !VAR_TEMP_temp274 ; 
: int !VAR_TEMP_temp275 ; 
: !VAR_USER_a !VAR_TEMP_temp274 -  = !VAR_TEMP_temp275 ; 
: !VAR_USER_x !VAR_TEMP_temp275 =  ; 

line = 	return ( !VAR_USER_temp ) ;
: !VAR_USER_temp return  ; 

line = }
: }

line = int !FUNC_USER_main ( ) {
: int !FUNC_USER_main ( ) {

line = 	return ( !VAR_LIB_MEM [ 3 ] ) ;
: int !VAR_TEMP_temp276 ; 
: !VAR_TEMP_temp276 3 = ; 
: bool !VAR_TEMP_temp277 ; 
: !VAR_TEMP_temp276 !VAR_LIB_MEM = !VAR_TEMP_temp277 ; 
: !VAR_TEMP_temp277 return  ; 

line = }
: }

after simplifyExpressions
   0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
   1: 	bool !VAR_TEMP_temp0 ;
   2: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
   3: 	!VAR_TEMP_temp0 if {
   4: 		!VAR_USER_y return ;
   5: 	}
   6: 	bool !VAR_TEMP_temp1 ;
   7: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ;
   8: 	!VAR_TEMP_temp1 if {
   9: 		!VAR_USER_x return ;
  10: 	}
  11: 	bool !VAR_TEMP_temp2 ;
  12: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp2 ;
  13: 	!VAR_TEMP_temp2 if {
  14: 		bool !VAR_TEMP_temp3 ;
  15: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp3 ;
  16: 		bool !VAR_TEMP_temp4 ;
  17: 		!VAR_TEMP_temp4 !VAR_TEMP_temp3 = ;
  18: 	}
  19: 	else {
  20: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 = ;
  21: 	}
  22: 	!VAR_TEMP_temp4 if {
  23: 		int !VAR_TEMP_temp5 ;
  24: 		!VAR_USER_x u- = !VAR_TEMP_temp5 ;
  25: 		bool !VAR_TEMP_temp6 ;
  26: 		!VAR_TEMP_temp5 !VAR_USER_y == = !VAR_TEMP_temp6 ;
  27: 		!VAR_TEMP_temp6 if {
  28: 			int !VAR_TEMP_temp7 ;
  29: 			!VAR_TEMP_temp7 0 = ;
  30: 			!VAR_TEMP_temp7 return ;
  31: 		}
  32: 		else {
  33: 			int !VAR_TEMP_temp8 ;
  34: 			!VAR_USER_x u- = !VAR_TEMP_temp8 ;
  35: 			bool !VAR_TEMP_temp9 ;
  36: 			!VAR_TEMP_temp8 !VAR_USER_y < = !VAR_TEMP_temp9 ;
  37: 			!VAR_TEMP_temp9 if {
  38: 				int !VAR_TEMP_temp10 ;
  39: 				!VAR_USER_x u- = !VAR_TEMP_temp10 ;
  40: 				bool !VAR_TEMP_temp11 ;
  41: 				!VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ;
  42: 				!VAR_TEMP_temp11 return ;
  43: 			}
  44: 			else {
  45: 				int !VAR_TEMP_temp12 ;
  46: 				!VAR_USER_x u- = !VAR_TEMP_temp12 ;
  47: 				int !VAR_TEMP_temp13 ;
  48: 				!VAR_TEMP_temp12 !VAR_USER_y !FUNC_LIB_basic_sub = !VAR_TEMP_temp13 ;
  49: 				bool !VAR_TEMP_temp14 ;
  50: 				!VAR_TEMP_temp13 u- = !VAR_TEMP_temp14 ;
  51: 				!VAR_TEMP_temp14 return ;
  52: 			}
  53: 		}
  54: 	}
  55: 	else {
  56: 		bool !VAR_TEMP_temp15 ;
  57: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp15 ;
  58: 		!VAR_TEMP_temp15 if {
  59: 			bool !VAR_TEMP_temp16 ;
  60: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp16 ;
  61: 			bool !VAR_TEMP_temp17 ;
  62: 			!VAR_TEMP_temp17 !VAR_TEMP_temp16 = ;
  63: 		}
  64: 		else {
  65: 			!VAR_TEMP_temp17 !VAR_TEMP_temp15 = ;
  66: 		}
  67: 		!VAR_TEMP_temp17 if {
  68: 			int !VAR_TEMP_temp18 ;
  69: 			!VAR_USER_y u- = !VAR_TEMP_temp18 ;
  70: 			bool !VAR_TEMP_temp19 ;
  71: 			!VAR_TEMP_temp18 !VAR_USER_x == = !VAR_TEMP_temp19 ;
  72: 			!VAR_TEMP_temp19 if {
  73: 				int !VAR_TEMP_temp20 ;
  74: 				!VAR_TEMP_temp20 0 = ;
  75: 				!VAR_TEMP_temp20 return ;
  76: 			}
  77: 			else {
  78: 				int !VAR_TEMP_temp21 ;
  79: 				!VAR_USER_y u- = !VAR_TEMP_temp21 ;
  80: 				bool !VAR_TEMP_temp22 ;
  81: 				!VAR_TEMP_temp21 !VAR_USER_x < = !VAR_TEMP_temp22 ;
  82: 				!VAR_TEMP_temp22 if {
  83: 					int !VAR_TEMP_temp23 ;
  84: 					!VAR_USER_y u- = !VAR_TEMP_temp23 ;
  85: 					bool !VAR_TEMP_temp24 ;
  86: 					!VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ;
  87: 					!VAR_TEMP_temp24 return ;
  88: 				}
  89: 				else {
  90: 					int !VAR_TEMP_temp25 ;
  91: 					!VAR_USER_y u- = !VAR_TEMP_temp25 ;
  92: 					int !VAR_TEMP_temp26 ;
  93: 					!VAR_TEMP_temp25 !VAR_USER_x !FUNC_LIB_basic_sub = !VAR_TEMP_temp26 ;
  94: 					bool !VAR_TEMP_temp27 ;
  95: 					!VAR_TEMP_temp26 u- = !VAR_TEMP_temp27 ;
  96: 					!VAR_TEMP_temp27 return ;
  97: 				}
  98: 			}
  99: 		}
 100: 		else {
 101: 			bool !VAR_TEMP_temp28 ;
 102: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp28 ;
 103: 			!VAR_TEMP_temp28 if {
 104: 				bool !VAR_TEMP_temp29 ;
 105: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp29 ;
 106: 				bool !VAR_TEMP_temp30 ;
 107: 				!VAR_TEMP_temp30 !VAR_TEMP_temp29 = ;
 108: 			}
 109: 			else {
 110: 				!VAR_TEMP_temp30 !VAR_TEMP_temp28 = ;
 111: 			}
 112: 			!VAR_TEMP_temp30 if {
 113: 				int !VAR_TEMP_temp31 ;
 114: 				!VAR_USER_x u- = !VAR_TEMP_temp31 ;
 115: 				int !VAR_TEMP_temp32 ;
 116: 				!VAR_USER_y u- = !VAR_TEMP_temp32 ;
 117: 				int !VAR_TEMP_temp33 ;
 118: 				!VAR_TEMP_temp31 !VAR_TEMP_temp32 !FUNC_LIB_basic_add = !VAR_TEMP_temp33 ;
 119: 				bool !VAR_TEMP_temp34 ;
 120: 				!VAR_TEMP_temp33 u- = !VAR_TEMP_temp34 ;
 121: 				!VAR_TEMP_temp34 return ;
 122: 			}
 123: 			else {
 124: 				bool !VAR_TEMP_temp35 ;
 125: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ;
 126: 				!VAR_TEMP_temp35 return ;
 127: 			}
 128: 		}
 129: 	}
 130: }
 131: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
 132: 	bool !VAR_TEMP_temp36 ;
 133: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ;
 134: 	!VAR_TEMP_temp36 if {
 135: 		bool !VAR_TEMP_temp37 ;
 136: 		!VAR_USER_y u- = !VAR_TEMP_temp37 ;
 137: 		!VAR_TEMP_temp37 return ;
 138: 	}
 139: 	bool !VAR_TEMP_temp38 ;
 140: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ;
 141: 	!VAR_TEMP_temp38 if {
 142: 		!VAR_USER_x return ;
 143: 	}
 144: 	bool !VAR_TEMP_temp39 ;
 145: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp39 ;
 146: 	!VAR_TEMP_temp39 if {
 147: 		bool !VAR_TEMP_temp40 ;
 148: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp40 ;
 149: 		bool !VAR_TEMP_temp41 ;
 150: 		!VAR_TEMP_temp41 !VAR_TEMP_temp40 = ;
 151: 	}
 152: 	else {
 153: 		!VAR_TEMP_temp41 !VAR_TEMP_temp39 = ;
 154: 	}
 155: 	!VAR_TEMP_temp41 if {
 156: 		int !VAR_TEMP_temp42 ;
 157: 		!VAR_USER_y u- = !VAR_TEMP_temp42 ;
 158: 		bool !VAR_TEMP_temp43 ;
 159: 		!VAR_USER_x !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ;
 160: 		!VAR_TEMP_temp43 return ;
 161: 	}
 162: 	else {
 163: 		bool !VAR_TEMP_temp44 ;
 164: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp44 ;
 165: 		!VAR_TEMP_temp44 if {
 166: 			bool !VAR_TEMP_temp45 ;
 167: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp45 ;
 168: 			bool !VAR_TEMP_temp46 ;
 169: 			!VAR_TEMP_temp46 !VAR_TEMP_temp45 = ;
 170: 		}
 171: 		else {
 172: 			!VAR_TEMP_temp46 !VAR_TEMP_temp44 = ;
 173: 		}
 174: 		!VAR_TEMP_temp46 if {
 175: 			int !VAR_TEMP_temp47 ;
 176: 			!VAR_USER_x u- = !VAR_TEMP_temp47 ;
 177: 			int !VAR_TEMP_temp48 ;
 178: 			!VAR_TEMP_temp47 !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp48 ;
 179: 			bool !VAR_TEMP_temp49 ;
 180: 			!VAR_TEMP_temp48 u- = !VAR_TEMP_temp49 ;
 181: 			!VAR_TEMP_temp49 return ;
 182: 		}
 183: 		else {
 184: 			bool !VAR_TEMP_temp50 ;
 185: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp50 ;
 186: 			!VAR_TEMP_temp50 if {
 187: 				bool !VAR_TEMP_temp51 ;
 188: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp51 ;
 189: 				bool !VAR_TEMP_temp52 ;
 190: 				!VAR_TEMP_temp52 !VAR_TEMP_temp51 = ;
 191: 			}
 192: 			else {
 193: 				!VAR_TEMP_temp52 !VAR_TEMP_temp50 = ;
 194: 			}
 195: 			!VAR_TEMP_temp52 if {
 196: 				int !VAR_TEMP_temp53 ;
 197: 				!VAR_USER_y u- = !VAR_TEMP_temp53 ;
 198: 				bool !VAR_TEMP_temp54 ;
 199: 				!VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ;
 200: 				!VAR_TEMP_temp54 return ;
 201: 			}
 202: 			else {
 203: 				int !VAR_TEMP_temp55 ;
 204: 				!VAR_USER_y u- = !VAR_TEMP_temp55 ;
 205: 				bool !VAR_TEMP_temp56 ;
 206: 				!VAR_USER_x !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ;
 207: 				!VAR_TEMP_temp56 return ;
 208: 			}
 209: 		}
 210: 	}
 211: }
 212: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
 213: 	bool !VAR_TEMP_temp57 ;
 214: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp57 ;
 215: 	!VAR_TEMP_temp57 if {
 216: 		!VAR_TEMP_temp59 !VAR_TEMP_temp57 = ;
 217: 	}
 218: 	else {
 219: 		bool !VAR_TEMP_temp58 ;
 220: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp58 ;
 221: 		bool !VAR_TEMP_temp59 ;
 222: 		!VAR_TEMP_temp59 !VAR_TEMP_temp58 = ;
 223: 	}
 224: 	!VAR_TEMP_temp59 if {
 225: 		int !VAR_TEMP_temp60 ;
 226: 		!VAR_TEMP_temp60 0 = ;
 227: 		!VAR_TEMP_temp60 return ;
 228: 	}
 229: 	bool !VAR_USER_ansNeg ;
 230: 	bool !VAR_TEMP_temp61 ;
 231: 	!VAR_TEMP_temp61 false = ;
 232: 	!VAR_USER_ansNeg !VAR_TEMP_temp61 = ;
 233: 	bool !VAR_TEMP_temp62 ;
 234: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ;
 235: 	!VAR_TEMP_temp62 if {
 236: 		int !VAR_TEMP_temp63 ;
 237: 		!VAR_USER_x u- = !VAR_TEMP_temp63 ;
 238: 		!VAR_USER_x !VAR_TEMP_temp63 = ;
 239: 		bool !VAR_TEMP_temp64 ;
 240: 		!VAR_TEMP_temp64 true = ;
 241: 		!VAR_USER_ansNeg !VAR_TEMP_temp64 = ;
 242: 	}
 243: 	bool !VAR_TEMP_temp65 ;
 244: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ;
 245: 	!VAR_TEMP_temp65 if {
 246: 		int !VAR_TEMP_temp66 ;
 247: 		!VAR_USER_y u- = !VAR_TEMP_temp66 ;
 248: 		!VAR_USER_y !VAR_TEMP_temp66 = ;
 249: 		bool !VAR_TEMP_temp67 ;
 250: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp67 ;
 251: 		!VAR_USER_ansNeg !VAR_TEMP_temp67 = ;
 252: 	}
 253: 	int !VAR_USER_ans ;
 254: 	int !VAR_TEMP_temp68 ;
 255: 	!VAR_TEMP_temp68 0 = ;
 256: 	!VAR_USER_ans !VAR_TEMP_temp68 = ;
 257: 	int !VAR_USER_y0 ;
 258: 	!VAR_USER_y0 !VAR_USER_y = ;
 259: 	while ( true ) {
 260: 		int !VAR_TEMP_temp69 ;
 261: 		!VAR_TEMP_temp69 0 = ;
 262: 		bool !VAR_TEMP_temp70 ;
 263: 		!VAR_USER_y0 !VAR_TEMP_temp69 > = !VAR_TEMP_temp70 ;
 264: 		bool !VAR_TEMP_temp71 ;
 265: 		!VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ;
 266: 		!VAR_TEMP_temp71 if {
 267: 			break ;
 268: 		}
 269: 		int !VAR_USER_y1 ;
 270: 		int !VAR_TEMP_temp72 ;
 271: 		!VAR_TEMP_temp72 1 = ;
 272: 		!VAR_USER_y1 !VAR_TEMP_temp72 = ;
 273: 		int !VAR_USER_y2 ;
 274: 		int !VAR_TEMP_temp73 ;
 275: 		!VAR_TEMP_temp73 2 = ;
 276: 		!VAR_USER_y2 !VAR_TEMP_temp73 = ;
 277: 		int !VAR_USER_val1 ;
 278: 		!VAR_USER_val1 !VAR_USER_x = ;
 279: 		int !VAR_USER_val2 ;
 280: 		int !VAR_TEMP_temp74 ;
 281: 		!VAR_USER_x !VAR_USER_x + = !VAR_TEMP_temp74 ;
 282: 		!VAR_USER_val2 !VAR_TEMP_temp74 = ;
 283: 		while ( true ) {
 284: 			bool !VAR_TEMP_temp75 ;
 285: 			!VAR_USER_val2 !VAR_USER_y0 <= = !VAR_TEMP_temp75 ;
 286: 			bool !VAR_TEMP_temp76 ;
 287: 			!VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ;
 288: 			!VAR_TEMP_temp76 if {
 289: 				break ;
 290: 			}
 291: 			!VAR_USER_y1 !VAR_USER_y2 = ;
 292: 			!VAR_USER_val1 !VAR_USER_val2 = ;
 293: 			!VAR_USER_y2 !VAR_USER_y2 += ;
 294: 			!VAR_USER_val2 !VAR_USER_val2 += ;
 295: 		}
 296: 		!VAR_USER_ans !VAR_USER_val1 += ;
 297: 		!VAR_USER_y0 !VAR_USER_y1 -= ;
 298: 	}
 299: 	!VAR_USER_ansNeg if {
 300: 		int !VAR_TEMP_temp77 ;
 301: 		!VAR_USER_ans u- = !VAR_TEMP_temp77 ;
 302: 		!VAR_USER_ans !VAR_TEMP_temp77 = ;
 303: 	}
 304: 	!VAR_USER_ans return ;
 305: }
 306: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
 307: 	bool !VAR_TEMP_temp78 ;
 308: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ;
 309: 	!VAR_TEMP_temp78 if {
 310: 		int !VAR_TEMP_temp79 ;
 311: 		!VAR_TEMP_temp79 0 = ;
 312: 		!VAR_TEMP_temp79 return ;
 313: 	}
 314: 	int !VAR_TEMP_temp80 ;
 315: 	!VAR_TEMP_temp80 0 = ;
 316: 	int !VAR_TEMP_temp81 ;
 317: 	!VAR_TEMP_temp81 0 = ;
 318: 	bool !VAR_TEMP_temp82 ;
 319: 	!VAR_USER_x !VAR_TEMP_temp80 < = !VAR_TEMP_temp82 ;
 320: 	!VAR_TEMP_temp82 if {
 321: 		bool !VAR_TEMP_temp83 ;
 322: 		!VAR_USER_y !VAR_TEMP_temp81 < = !VAR_TEMP_temp83 ;
 323: 		bool !VAR_TEMP_temp84 ;
 324: 		!VAR_TEMP_temp84 !VAR_TEMP_temp83 = ;
 325: 	}
 326: 	else {
 327: 		!VAR_TEMP_temp84 !VAR_TEMP_temp82 = ;
 328: 	}
 329: 	!VAR_TEMP_temp84 if {
 330: 		int !VAR_TEMP_temp85 ;
 331: 		!VAR_USER_x u- = !VAR_TEMP_temp85 ;
 332: 		int !VAR_TEMP_temp86 ;
 333: 		!VAR_USER_y u- = !VAR_TEMP_temp86 ;
 334: 		bool !VAR_TEMP_temp87 ;
 335: 		!VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ;
 336: 		!VAR_TEMP_temp87 return ;
 337: 	}
 338: 	int !VAR_TEMP_temp88 ;
 339: 	!VAR_TEMP_temp88 0 = ;
 340: 	bool !VAR_TEMP_temp89 ;
 341: 	!VAR_USER_x !VAR_TEMP_temp88 < = !VAR_TEMP_temp89 ;
 342: 	!VAR_TEMP_temp89 if {
 343: 		int !VAR_TEMP_temp90 ;
 344: 		!VAR_USER_x u- = !VAR_TEMP_temp90 ;
 345: 		int !VAR_TEMP_temp91 ;
 346: 		!VAR_TEMP_temp90 !VAR_USER_y !FUNC_LIB_div = !VAR_TEMP_temp91 ;
 347: 		bool !VAR_TEMP_temp92 ;
 348: 		!VAR_TEMP_temp91 u- = !VAR_TEMP_temp92 ;
 349: 		!VAR_TEMP_temp92 return ;
 350: 	}
 351: 	int !VAR_TEMP_temp93 ;
 352: 	!VAR_TEMP_temp93 0 = ;
 353: 	bool !VAR_TEMP_temp94 ;
 354: 	!VAR_USER_y !VAR_TEMP_temp93 < = !VAR_TEMP_temp94 ;
 355: 	!VAR_TEMP_temp94 if {
 356: 		int !VAR_TEMP_temp95 ;
 357: 		!VAR_USER_y u- = !VAR_TEMP_temp95 ;
 358: 		int !VAR_TEMP_temp96 ;
 359: 		!VAR_USER_x !VAR_TEMP_temp95 !FUNC_LIB_div = !VAR_TEMP_temp96 ;
 360: 		bool !VAR_TEMP_temp97 ;
 361: 		!VAR_TEMP_temp96 u- = !VAR_TEMP_temp97 ;
 362: 		!VAR_TEMP_temp97 return ;
 363: 	}
 364: 	int !VAR_USER_ans ;
 365: 	int !VAR_TEMP_temp98 ;
 366: 	!VAR_TEMP_temp98 0 = ;
 367: 	!VAR_USER_ans !VAR_TEMP_temp98 = ;
 368: 	int !VAR_USER_n ;
 369: 	!VAR_USER_n !VAR_USER_x = ;
 370: 	while ( true ) {
 371: 		bool !VAR_TEMP_temp99 ;
 372: 		!VAR_USER_n !VAR_USER_y >= = !VAR_TEMP_temp99 ;
 373: 		bool !VAR_TEMP_temp100 ;
 374: 		!VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ;
 375: 		!VAR_TEMP_temp100 if {
 376: 			break ;
 377: 		}
 378: 		int !VAR_USER_prevJump ;
 379: 		int !VAR_TEMP_temp101 ;
 380: 		!VAR_TEMP_temp101 0 = ;
 381: 		!VAR_USER_prevJump !VAR_TEMP_temp101 = ;
 382: 		int !VAR_USER_jump ;
 383: 		int !VAR_TEMP_temp102 ;
 384: 		!VAR_TEMP_temp102 1 = ;
 385: 		!VAR_USER_jump !VAR_TEMP_temp102 = ;
 386: 		while ( true ) {
 387: 			int !VAR_TEMP_temp103 ;
 388: 			!VAR_USER_ans !VAR_USER_jump + = !VAR_TEMP_temp103 ;
 389: 			int !VAR_TEMP_temp104 ;
 390: 			!VAR_USER_y !VAR_TEMP_temp103 * = !VAR_TEMP_temp104 ;
 391: 			bool !VAR_TEMP_temp105 ;
 392: 			!VAR_TEMP_temp104 !VAR_USER_x <= = !VAR_TEMP_temp105 ;
 393: 			bool !VAR_TEMP_temp106 ;
 394: 			!VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ;
 395: 			!VAR_TEMP_temp106 if {
 396: 				break ;
 397: 			}
 398: 			!VAR_USER_prevJump !VAR_USER_jump = ;
 399: 			!VAR_USER_jump !VAR_USER_jump += ;
 400: 		}
 401: 		!VAR_USER_ans !VAR_USER_prevJump += ;
 402: 		int !VAR_TEMP_temp107 ;
 403: 		!VAR_USER_y !VAR_USER_ans * = !VAR_TEMP_temp107 ;
 404: 		int !VAR_TEMP_temp108 ;
 405: 		!VAR_USER_x !VAR_TEMP_temp107 - = !VAR_TEMP_temp108 ;
 406: 		!VAR_USER_n !VAR_TEMP_temp108 = ;
 407: 	}
 408: 	!VAR_USER_ans return ;
 409: }
 410: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
 411: 	int !VAR_USER_d ;
 412: 	int !VAR_TEMP_temp109 ;
 413: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_div = !VAR_TEMP_temp109 ;
 414: 	!VAR_USER_d !VAR_TEMP_temp109 = ;
 415: 	int !VAR_TEMP_temp110 ;
 416: 	!VAR_USER_y !VAR_USER_d * = !VAR_TEMP_temp110 ;
 417: 	bool !VAR_TEMP_temp111 ;
 418: 	!VAR_USER_x !VAR_TEMP_temp110 - = !VAR_TEMP_temp111 ;
 419: 	!VAR_TEMP_temp111 return ;
 420: }
 421: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
 422: 	bool !VAR_TEMP_temp112 ;
 423: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ;
 424: 	!VAR_TEMP_temp112 if {
 425: 		int !VAR_TEMP_temp113 ;
 426: 		!VAR_TEMP_temp113 0 = ;
 427: 		!VAR_TEMP_temp113 return ;
 428: 	}
 429: 	bool !VAR_TEMP_temp114 ;
 430: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ;
 431: 	!VAR_TEMP_temp114 return ;
 432: }
 433: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
 434: 	bool !VAR_TEMP_temp115 ;
 435: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ;
 436: 	!VAR_TEMP_temp115 if {
 437: 		bool !VAR_TEMP_temp116 ;
 438: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ;
 439: 		!VAR_TEMP_temp116 if {
 440: 			int !VAR_TEMP_temp117 ;
 441: 			!VAR_USER_y u- = !VAR_TEMP_temp117 ;
 442: 			int !VAR_TEMP_temp118 ;
 443: 			!VAR_USER_x u- = !VAR_TEMP_temp118 ;
 444: 			bool !VAR_TEMP_temp119 ;
 445: 			!VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ;
 446: 			!VAR_TEMP_temp119 return ;
 447: 		}
 448: 		else {
 449: 			bool !VAR_TEMP_temp120 ;
 450: 			!VAR_TEMP_temp120 true = ;
 451: 			!VAR_TEMP_temp120 return ;
 452: 		}
 453: 	}
 454: 	else {
 455: 		bool !VAR_TEMP_temp121 ;
 456: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ;
 457: 		!VAR_TEMP_temp121 if {
 458: 			bool !VAR_TEMP_temp122 ;
 459: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ;
 460: 			!VAR_TEMP_temp122 if {
 461: 				bool !VAR_TEMP_temp123 ;
 462: 				!VAR_TEMP_temp123 false = ;
 463: 				!VAR_TEMP_temp123 return ;
 464: 			}
 465: 			else {
 466: 				bool !VAR_TEMP_temp124 ;
 467: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ;
 468: 				!VAR_TEMP_temp124 if {
 469: 					bool !VAR_TEMP_temp125 ;
 470: 					!VAR_TEMP_temp125 false = ;
 471: 					!VAR_TEMP_temp125 return ;
 472: 				}
 473: 				else {
 474: 					bool !VAR_TEMP_temp126 ;
 475: 					!VAR_TEMP_temp126 true = ;
 476: 					!VAR_TEMP_temp126 return ;
 477: 				}
 478: 			}
 479: 		}
 480: 		else {
 481: 			bool !VAR_TEMP_temp127 ;
 482: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp127 ;
 483: 			!VAR_TEMP_temp127 if {
 484: 				!VAR_TEMP_temp129 !VAR_TEMP_temp127 = ;
 485: 			}
 486: 			else {
 487: 				bool !VAR_TEMP_temp128 ;
 488: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp128 ;
 489: 				bool !VAR_TEMP_temp129 ;
 490: 				!VAR_TEMP_temp129 !VAR_TEMP_temp128 = ;
 491: 			}
 492: 			!VAR_TEMP_temp129 if {
 493: 				bool !VAR_TEMP_temp130 ;
 494: 				!VAR_TEMP_temp130 false = ;
 495: 				!VAR_TEMP_temp130 return ;
 496: 			}
 497: 			else {
 498: 				bool !VAR_TEMP_temp131 ;
 499: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ;
 500: 				!VAR_TEMP_temp131 return ;
 501: 			}
 502: 		}
 503: 	}
 504: }
 505: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
 506: 	bool !VAR_TEMP_temp132 ;
 507: 	!VAR_USER_x !VAR_USER_y == = !VAR_TEMP_temp132 ;
 508: 	!VAR_TEMP_temp132 if {
 509: 		!VAR_TEMP_temp134 !VAR_TEMP_temp132 = ;
 510: 	}
 511: 	else {
 512: 		bool !VAR_TEMP_temp133 ;
 513: 		!VAR_USER_x !VAR_USER_y < = !VAR_TEMP_temp133 ;
 514: 		bool !VAR_TEMP_temp134 ;
 515: 		!VAR_TEMP_temp134 !VAR_TEMP_temp133 = ;
 516: 	}
 517: 	!VAR_TEMP_temp134 return ;
 518: }
 519: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
 520: 	bool !VAR_TEMP_temp135 ;
 521: 	!VAR_USER_x !VAR_USER_y <= = !VAR_TEMP_temp135 ;
 522: 	bool !VAR_TEMP_temp136 ;
 523: 	!VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ;
 524: 	!VAR_TEMP_temp136 return ;
 525: }
 526: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
 527: 	bool !VAR_TEMP_temp137 ;
 528: 	!VAR_USER_x !VAR_USER_y < = !VAR_TEMP_temp137 ;
 529: 	bool !VAR_TEMP_temp138 ;
 530: 	!VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ;
 531: 	!VAR_TEMP_temp138 return ;
 532: }
 533: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
 534: 	bool !VAR_TEMP_temp139 ;
 535: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ;
 536: 	!VAR_TEMP_temp139 if {
 537: 		bool !VAR_TEMP_temp140 ;
 538: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ;
 539: 		!VAR_TEMP_temp140 if {
 540: 			bool !VAR_TEMP_temp141 ;
 541: 			!VAR_TEMP_temp141 true = ;
 542: 			!VAR_TEMP_temp141 return ;
 543: 		}
 544: 		bool !VAR_TEMP_temp142 ;
 545: 		!VAR_TEMP_temp142 false = ;
 546: 		!VAR_TEMP_temp142 return ;
 547: 	}
 548: 	else {
 549: 		bool !VAR_TEMP_temp143 ;
 550: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ;
 551: 		!VAR_TEMP_temp143 if {
 552: 			bool !VAR_TEMP_temp144 ;
 553: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ;
 554: 			!VAR_TEMP_temp144 if {
 555: 				int !VAR_TEMP_temp145 ;
 556: 				!VAR_USER_x u- = !VAR_TEMP_temp145 ;
 557: 				int !VAR_TEMP_temp146 ;
 558: 				!VAR_USER_y u- = !VAR_TEMP_temp146 ;
 559: 				bool !VAR_TEMP_temp147 ;
 560: 				!VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ;
 561: 				!VAR_TEMP_temp147 return ;
 562: 			}
 563: 			bool !VAR_TEMP_temp148 ;
 564: 			!VAR_TEMP_temp148 false = ;
 565: 			!VAR_TEMP_temp148 return ;
 566: 		}
 567: 		else {
 568: 			bool !VAR_TEMP_temp149 ;
 569: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ;
 570: 			!VAR_TEMP_temp149 if {
 571: 				bool !VAR_TEMP_temp150 ;
 572: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ;
 573: 				!VAR_TEMP_temp150 return ;
 574: 			}
 575: 			bool !VAR_TEMP_temp151 ;
 576: 			!VAR_TEMP_temp151 false = ;
 577: 			!VAR_TEMP_temp151 return ;
 578: 		}
 579: 	}
 580: }
 581: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
 582: 	bool !VAR_TEMP_temp152 ;
 583: 	!VAR_USER_x !VAR_USER_y == = !VAR_TEMP_temp152 ;
 584: 	bool !VAR_TEMP_temp153 ;
 585: 	!VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ;
 586: 	!VAR_TEMP_temp153 return ;
 587: }
 588: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
 589: 	bool !VAR_TEMP_temp154 ;
 590: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ;
 591: 	!VAR_TEMP_temp154 if {
 592: 		!VAR_USER_y return ;
 593: 	}
 594: 	bool !VAR_TEMP_temp155 ;
 595: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ;
 596: 	!VAR_TEMP_temp155 if {
 597: 		!VAR_USER_x return ;
 598: 	}
 599: 	bool !VAR_TEMP_temp156 ;
 600: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ;
 601: 	!VAR_TEMP_temp156 return ;
 602: }
 603: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
 604: 	int !VAR_USER_currBitIndex ;
 605: 	int !VAR_TEMP_temp157 ;
 606: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp157 ;
 607: 	!VAR_USER_currBitIndex !VAR_TEMP_temp157 = ;
 608: 	bool !VAR_USER_handledSign ;
 609: 	bool !VAR_TEMP_temp158 ;
 610: 	!VAR_TEMP_temp158 false = ;
 611: 	!VAR_USER_handledSign !VAR_TEMP_temp158 = ;
 612: 	int !VAR_USER_valIndex ;
 613: 	int !VAR_TEMP_temp159 ;
 614: 	!VAR_TEMP_temp159 0 = ;
 615: 	!VAR_USER_valIndex !VAR_TEMP_temp159 = ;
 616: 	int !VAR_USER_V ;
 617: 	!VAR_USER_V !VAR_USER_val = ;
 618: 	while ( true ) {
 619: 		bool !VAR_TEMP_temp160 ;
 620: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp160 ;
 621: 		bool !VAR_TEMP_temp161 ;
 622: 		!VAR_TEMP_temp160 ! = !VAR_TEMP_temp161 ;
 623: 		!VAR_TEMP_temp161 if {
 624: 			!VAR_TEMP_temp163 !VAR_TEMP_temp161 = ;
 625: 		}
 626: 		else {
 627: 			bool !VAR_TEMP_temp162 ;
 628: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp162 ;
 629: 			bool !VAR_TEMP_temp163 ;
 630: 			!VAR_TEMP_temp163 !VAR_TEMP_temp162 = ;
 631: 		}
 632: 		bool !VAR_TEMP_temp164 ;
 633: 		!VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ;
 634: 		!VAR_TEMP_temp164 if {
 635: 			break ;
 636: 		}
 637: 		int !VAR_USER_desiredBitIndex ;
 638: 		int !VAR_TEMP_temp165 ;
 639: 		!VAR_TEMP_temp165 1 = ;
 640: 		int !VAR_TEMP_temp166 ;
 641: 		!VAR_TEMP_temp166 2 = ;
 642: 		int !VAR_TEMP_temp167 ;
 643: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp167 ;
 644: 		int !VAR_TEMP_temp168 ;
 645: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp168 ;
 646: 		int !VAR_TEMP_temp169 ;
 647: 		!VAR_TEMP_temp168 !VAR_TEMP_temp165 + = !VAR_TEMP_temp169 ;
 648: 		int !VAR_TEMP_temp170 ;
 649: 		!VAR_TEMP_temp167 !VAR_TEMP_temp169 * = !VAR_TEMP_temp170 ;
 650: 		int !VAR_TEMP_temp171 ;
 651: 		!VAR_TEMP_temp170 !VAR_TEMP_temp166 / = !VAR_TEMP_temp171 ;
 652: 		int !VAR_TEMP_temp172 ;
 653: 		!VAR_TEMP_temp171 !VAR_USER_index + = !VAR_TEMP_temp172 ;
 654: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp172 = ;
 655: 		while ( true ) {
 656: 			bool !VAR_TEMP_temp173 ;
 657: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > = !VAR_TEMP_temp173 ;
 658: 			bool !VAR_TEMP_temp174 ;
 659: 			!VAR_TEMP_temp173 ! = !VAR_TEMP_temp174 ;
 660: 			!VAR_TEMP_temp174 if {
 661: 				break ;
 662: 			}
 663: 			int !VAR_TEMP_temp175 ;
 664: 			!VAR_TEMP_temp175 1 = ;
 665: 			!VAR_USER_currBitIndex !VAR_TEMP_temp175 -= ;
 666: 			!FUNC_LIB_moveMemHeadLeft ;
 667: 		}
 668: 		while ( true ) {
 669: 			bool !VAR_TEMP_temp176 ;
 670: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp176 ;
 671: 			bool !VAR_TEMP_temp177 ;
 672: 			!VAR_TEMP_temp176 ! = !VAR_TEMP_temp177 ;
 673: 			!VAR_TEMP_temp177 if {
 674: 				break ;
 675: 			}
 676: 			int !VAR_TEMP_temp178 ;
 677: 			!VAR_TEMP_temp178 1 = ;
 678: 			!VAR_USER_currBitIndex !VAR_TEMP_temp178 += ;
 679: 			!FUNC_LIB_moveMemHeadRight ;
 680: 		}
 681: 		bool !VAR_TEMP_temp179 ;
 682: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp179 ;
 683: 		!VAR_TEMP_temp179 if {
 684: 			bool !VAR_TEMP_temp180 ;
 685: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp180 ;
 686: 			!VAR_TEMP_temp180 if {
 687: 				!FUNC_LIB_setMemBitOne ;
 688: 				int !VAR_TEMP_temp181 ;
 689: 				!VAR_USER_V u- = !VAR_TEMP_temp181 ;
 690: 				!VAR_USER_V !VAR_TEMP_temp181 = ;
 691: 			}
 692: 			else {
 693: 				!FUNC_LIB_setMemBitZero ;
 694: 			}
 695: 			bool !VAR_TEMP_temp182 ;
 696: 			!VAR_TEMP_temp182 true = ;
 697: 			!VAR_USER_handledSign !VAR_TEMP_temp182 = ;
 698: 		}
 699: 		else {
 700: 			int !VAR_USER_V2 ;
 701: 			int !VAR_TEMP_temp183 ;
 702: 			!VAR_TEMP_temp183 2 = ;
 703: 			int !VAR_TEMP_temp184 ;
 704: 			!VAR_USER_V !VAR_TEMP_temp183 / = !VAR_TEMP_temp184 ;
 705: 			!VAR_USER_V2 !VAR_TEMP_temp184 = ;
 706: 			int !VAR_USER_bit ;
 707: 			int !VAR_TEMP_temp185 ;
 708: 			!VAR_TEMP_temp185 2 = ;
 709: 			int !VAR_TEMP_temp186 ;
 710: 			!VAR_TEMP_temp185 !VAR_USER_V2 * = !VAR_TEMP_temp186 ;
 711: 			int !VAR_TEMP_temp187 ;
 712: 			!VAR_USER_V !VAR_TEMP_temp186 - = !VAR_TEMP_temp187 ;
 713: 			!VAR_USER_bit !VAR_TEMP_temp187 = ;
 714: 			int !VAR_TEMP_temp188 ;
 715: 			!VAR_TEMP_temp188 1 = ;
 716: 			bool !VAR_TEMP_temp189 ;
 717: 			!VAR_USER_bit !VAR_TEMP_temp188 == = !VAR_TEMP_temp189 ;
 718: 			!VAR_TEMP_temp189 if {
 719: 				!FUNC_LIB_setMemBitOne ;
 720: 			}
 721: 			else {
 722: 				!FUNC_LIB_setMemBitZero ;
 723: 			}
 724: 			!VAR_USER_V !VAR_USER_V2 = ;
 725: 		}
 726: 		int !VAR_TEMP_temp190 ;
 727: 		!VAR_TEMP_temp190 1 = ;
 728: 		!VAR_USER_valIndex !VAR_TEMP_temp190 += ;
 729: 	}
 730: 	int !VAR_USER_desiredBitIndex ;
 731: 	int !VAR_TEMP_temp191 ;
 732: 	!VAR_TEMP_temp191 1 = ;
 733: 	int !VAR_TEMP_temp192 ;
 734: 	!VAR_TEMP_temp192 2 = ;
 735: 	int !VAR_TEMP_temp193 ;
 736: 	!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp193 ;
 737: 	int !VAR_TEMP_temp194 ;
 738: 	!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp194 ;
 739: 	int !VAR_TEMP_temp195 ;
 740: 	!VAR_TEMP_temp194 !VAR_TEMP_temp191 + = !VAR_TEMP_temp195 ;
 741: 	int !VAR_TEMP_temp196 ;
 742: 	!VAR_TEMP_temp193 !VAR_TEMP_temp195 * = !VAR_TEMP_temp196 ;
 743: 	int !VAR_TEMP_temp197 ;
 744: 	!VAR_TEMP_temp196 !VAR_TEMP_temp192 / = !VAR_TEMP_temp197 ;
 745: 	int !VAR_TEMP_temp198 ;
 746: 	!VAR_TEMP_temp197 !VAR_USER_index + = !VAR_TEMP_temp198 ;
 747: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp198 = ;
 748: 	while ( true ) {
 749: 		bool !VAR_TEMP_temp199 ;
 750: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp199 ;
 751: 		bool !VAR_TEMP_temp200 ;
 752: 		!VAR_TEMP_temp199 ! = !VAR_TEMP_temp200 ;
 753: 		!VAR_TEMP_temp200 if {
 754: 			break ;
 755: 		}
 756: 		int !VAR_TEMP_temp201 ;
 757: 		!VAR_TEMP_temp201 1 = ;
 758: 		!VAR_USER_currBitIndex !VAR_TEMP_temp201 += ;
 759: 		!FUNC_LIB_moveMemHeadRight ;
 760: 	}
 761: 	!FUNC_LIB_setMemBitBlank ;
 762: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
 763: 	return ;
 764: }
 765: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
 766: 	int !VAR_USER_ans ;
 767: 	int !VAR_TEMP_temp202 ;
 768: 	!VAR_TEMP_temp202 0 = ;
 769: 	!VAR_USER_ans !VAR_TEMP_temp202 = ;
 770: 	int !VAR_USER_currBitIndex ;
 771: 	int !VAR_TEMP_temp203 ;
 772: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp203 ;
 773: 	!VAR_USER_currBitIndex !VAR_TEMP_temp203 = ;
 774: 	int !VAR_USER_desiredBitIndex ;
 775: 	int !VAR_TEMP_temp204 ;
 776: 	!VAR_TEMP_temp204 1 = ;
 777: 	int !VAR_TEMP_temp205 ;
 778: 	!VAR_TEMP_temp205 2 = ;
 779: 	int !VAR_TEMP_temp206 ;
 780: 	!VAR_USER_index !VAR_TEMP_temp204 + = !VAR_TEMP_temp206 ;
 781: 	int !VAR_TEMP_temp207 ;
 782: 	!VAR_USER_index !VAR_TEMP_temp206 * = !VAR_TEMP_temp207 ;
 783: 	int !VAR_TEMP_temp208 ;
 784: 	!VAR_TEMP_temp207 !VAR_TEMP_temp205 / = !VAR_TEMP_temp208 ;
 785: 	int !VAR_TEMP_temp209 ;
 786: 	!VAR_TEMP_temp208 !VAR_USER_index + = !VAR_TEMP_temp209 ;
 787: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp209 = ;
 788: 	!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
 789: 	while ( true ) {
 790: 		bool !VAR_TEMP_temp210 ;
 791: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > = !VAR_TEMP_temp210 ;
 792: 		bool !VAR_TEMP_temp211 ;
 793: 		!VAR_TEMP_temp210 ! = !VAR_TEMP_temp211 ;
 794: 		!VAR_TEMP_temp211 if {
 795: 			break ;
 796: 		}
 797: 		int !VAR_TEMP_temp212 ;
 798: 		!VAR_TEMP_temp212 1 = ;
 799: 		!VAR_USER_currBitIndex !VAR_TEMP_temp212 -= ;
 800: 		!FUNC_LIB_moveMemHeadLeft ;
 801: 	}
 802: 	while ( true ) {
 803: 		bool !VAR_TEMP_temp213 ;
 804: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp213 ;
 805: 		bool !VAR_TEMP_temp214 ;
 806: 		!VAR_TEMP_temp213 ! = !VAR_TEMP_temp214 ;
 807: 		!VAR_TEMP_temp214 if {
 808: 			break ;
 809: 		}
 810: 		int !VAR_TEMP_temp215 ;
 811: 		!VAR_TEMP_temp215 1 = ;
 812: 		!VAR_USER_currBitIndex !VAR_TEMP_temp215 += ;
 813: 		!FUNC_LIB_moveMemHeadRight ;
 814: 	}
 815: 	int !VAR_USER_valIndex ;
 816: 	int !VAR_TEMP_temp216 ;
 817: 	!VAR_TEMP_temp216 0 = ;
 818: 	!VAR_USER_valIndex !VAR_TEMP_temp216 = ;
 819: 	bool !VAR_USER_shouldBeNegative ;
 820: 	bool !VAR_TEMP_temp217 ;
 821: 	!VAR_TEMP_temp217 false = ;
 822: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp217 = ;
 823: 	int !VAR_USER_pow2 ;
 824: 	int !VAR_TEMP_temp218 ;
 825: 	!VAR_TEMP_temp218 0 = ;
 826: 	!VAR_USER_pow2 !VAR_TEMP_temp218 = ;
 827: 	while ( true ) {
 828: 		bool !VAR_TEMP_temp219 ;
 829: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp219 ;
 830: 		bool !VAR_TEMP_temp220 ;
 831: 		!VAR_TEMP_temp219 ! = !VAR_TEMP_temp220 ;
 832: 		bool !VAR_TEMP_temp221 ;
 833: 		!VAR_TEMP_temp220 ! = !VAR_TEMP_temp221 ;
 834: 		!VAR_TEMP_temp221 if {
 835: 			break ;
 836: 		}
 837: 		bool !VAR_TEMP_temp222 ;
 838: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp222 ;
 839: 		!VAR_TEMP_temp222 if {
 840: 			int !VAR_TEMP_temp223 ;
 841: 			!VAR_TEMP_temp223 413 = ;
 842: 			!VAR_TEMP_temp223 !FUNC_LIB_printInt ;
 843: 			int !VAR_TEMP_temp224 ;
 844: 			!VAR_TEMP_temp224 413 = ;
 845: 			int !VAR_TEMP_temp225 ;
 846: 			!VAR_TEMP_temp224 u- = !VAR_TEMP_temp225 ;
 847: 			!VAR_TEMP_temp225 !FUNC_LIB_printInt ;
 848: 			bool !VAR_TEMP_temp226 ;
 849: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp226 ;
 850: 			!VAR_TEMP_temp226 if {
 851: 				int !VAR_TEMP_temp227 ;
 852: 				!VAR_TEMP_temp227 417 = ;
 853: 				!VAR_TEMP_temp227 !FUNC_LIB_printInt ;
 854: 				int !VAR_TEMP_temp228 ;
 855: 				!VAR_TEMP_temp228 417 = ;
 856: 				int !VAR_TEMP_temp229 ;
 857: 				!VAR_TEMP_temp228 u- = !VAR_TEMP_temp229 ;
 858: 				!VAR_TEMP_temp229 !FUNC_LIB_printInt ;
 859: 				bool !VAR_TEMP_temp230 ;
 860: 				!VAR_TEMP_temp230 true = ;
 861: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp230 = ;
 862: 			}
 863: 		}
 864: 		else {
 865: 			int !VAR_TEMP_temp231 ;
 866: 			!VAR_TEMP_temp231 423 = ;
 867: 			!VAR_TEMP_temp231 !FUNC_LIB_printInt ;
 868: 			int !VAR_TEMP_temp232 ;
 869: 			!VAR_TEMP_temp232 423 = ;
 870: 			int !VAR_TEMP_temp233 ;
 871: 			!VAR_TEMP_temp232 u- = !VAR_TEMP_temp233 ;
 872: 			!VAR_TEMP_temp233 !FUNC_LIB_printInt ;
 873: 			bool !VAR_TEMP_temp234 ;
 874: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp234 ;
 875: 			!VAR_TEMP_temp234 if {
 876: 				!VAR_USER_ans !VAR_USER_pow2 += ;
 877: 				int !VAR_TEMP_temp235 ;
 878: 				!VAR_TEMP_temp235 37 = ;
 879: 				!VAR_TEMP_temp235 !FUNC_LIB_printInt ;
 880: 				!VAR_USER_ans !FUNC_LIB_printInt ;
 881: 				int !VAR_TEMP_temp236 ;
 882: 				!VAR_TEMP_temp236 37 = ;
 883: 				int !VAR_TEMP_temp237 ;
 884: 				!VAR_TEMP_temp236 u- = !VAR_TEMP_temp237 ;
 885: 				!VAR_TEMP_temp237 !FUNC_LIB_printInt ;
 886: 			}
 887: 			else {
 888: 				int !VAR_TEMP_temp238 ;
 889: 				!VAR_TEMP_temp238 8999 = ;
 890: 				!VAR_TEMP_temp238 !FUNC_LIB_printInt ;
 891: 				bool !VAR_TEMP_temp239 ;
 892: 				!FUNC_LIB_memBitIsZero = !VAR_TEMP_temp239 ;
 893: 				!VAR_TEMP_temp239 if {
 894: 					int !VAR_TEMP_temp240 ;
 895: 					!VAR_TEMP_temp240 9000 = ;
 896: 					!VAR_TEMP_temp240 !FUNC_LIB_printInt ;
 897: 				}
 898: 				else {
 899: 					int !VAR_TEMP_temp241 ;
 900: 					!VAR_TEMP_temp241 9000 = ;
 901: 					int !VAR_TEMP_temp242 ;
 902: 					!VAR_TEMP_temp241 u- = !VAR_TEMP_temp242 ;
 903: 					!VAR_TEMP_temp242 !FUNC_LIB_printInt ;
 904: 				}
 905: 				bool !VAR_TEMP_temp243 ;
 906: 				!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp243 ;
 907: 				!VAR_TEMP_temp243 if {
 908: 					int !VAR_TEMP_temp244 ;
 909: 					!VAR_TEMP_temp244 9001 = ;
 910: 					!VAR_TEMP_temp244 !FUNC_LIB_printInt ;
 911: 				}
 912: 				else {
 913: 					int !VAR_TEMP_temp245 ;
 914: 					!VAR_TEMP_temp245 9001 = ;
 915: 					int !VAR_TEMP_temp246 ;
 916: 					!VAR_TEMP_temp245 u- = !VAR_TEMP_temp246 ;
 917: 					!VAR_TEMP_temp246 !FUNC_LIB_printInt ;
 918: 				}
 919: 				bool !VAR_TEMP_temp247 ;
 920: 				!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp247 ;
 921: 				!VAR_TEMP_temp247 if {
 922: 					int !VAR_TEMP_temp248 ;
 923: 					!VAR_TEMP_temp248 9002 = ;
 924: 					!VAR_TEMP_temp248 !FUNC_LIB_printInt ;
 925: 				}
 926: 				else {
 927: 					int !VAR_TEMP_temp249 ;
 928: 					!VAR_TEMP_temp249 9002 = ;
 929: 					int !VAR_TEMP_temp250 ;
 930: 					!VAR_TEMP_temp249 u- = !VAR_TEMP_temp250 ;
 931: 					!VAR_TEMP_temp250 !FUNC_LIB_printInt ;
 932: 				}
 933: 				int !VAR_TEMP_temp251 ;
 934: 				!VAR_TEMP_temp251 8999 = ;
 935: 				int !VAR_TEMP_temp252 ;
 936: 				!VAR_TEMP_temp251 u- = !VAR_TEMP_temp252 ;
 937: 				!VAR_TEMP_temp252 !FUNC_LIB_printInt ;
 938: 			}
 939: 		}
 940: 		int !VAR_TEMP_temp253 ;
 941: 		!VAR_TEMP_temp253 1 = ;
 942: 		!VAR_USER_valIndex !VAR_TEMP_temp253 += ;
 943: 		bool !VAR_TEMP_temp254 ;
 944: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp254 ;
 945: 		!VAR_TEMP_temp254 if {
 946: 			int !VAR_TEMP_temp255 ;
 947: 			!VAR_TEMP_temp255 1 = ;
 948: 			!VAR_USER_pow2 !VAR_TEMP_temp255 = ;
 949: 		}
 950: 		else {
 951: 			!VAR_USER_pow2 !VAR_USER_pow2 += ;
 952: 		}
 953: 		int !VAR_TEMP_temp256 ;
 954: 		!VAR_TEMP_temp256 1 = ;
 955: 		int !VAR_TEMP_temp257 ;
 956: 		!VAR_TEMP_temp257 2 = ;
 957: 		int !VAR_TEMP_temp258 ;
 958: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp258 ;
 959: 		int !VAR_TEMP_temp259 ;
 960: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp259 ;
 961: 		int !VAR_TEMP_temp260 ;
 962: 		!VAR_TEMP_temp259 !VAR_TEMP_temp256 + = !VAR_TEMP_temp260 ;
 963: 		int !VAR_TEMP_temp261 ;
 964: 		!VAR_TEMP_temp258 !VAR_TEMP_temp260 * = !VAR_TEMP_temp261 ;
 965: 		int !VAR_TEMP_temp262 ;
 966: 		!VAR_TEMP_temp261 !VAR_TEMP_temp257 / = !VAR_TEMP_temp262 ;
 967: 		int !VAR_TEMP_temp263 ;
 968: 		!VAR_TEMP_temp262 !VAR_USER_index + = !VAR_TEMP_temp263 ;
 969: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp263 = ;
 970: 		int !VAR_TEMP_temp264 ;
 971: 		!VAR_TEMP_temp264 100 = ;
 972: 		!VAR_TEMP_temp264 !FUNC_LIB_printInt ;
 973: 		!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
 974: 		int !VAR_TEMP_temp265 ;
 975: 		!VAR_TEMP_temp265 100 = ;
 976: 		int !VAR_TEMP_temp266 ;
 977: 		!VAR_TEMP_temp265 u- = !VAR_TEMP_temp266 ;
 978: 		!VAR_TEMP_temp266 !FUNC_LIB_printInt ;
 979: 		while ( true ) {
 980: 			bool !VAR_TEMP_temp267 ;
 981: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp267 ;
 982: 			bool !VAR_TEMP_temp268 ;
 983: 			!VAR_TEMP_temp267 ! = !VAR_TEMP_temp268 ;
 984: 			!VAR_TEMP_temp268 if {
 985: 				break ;
 986: 			}
 987: 			int !VAR_TEMP_temp269 ;
 988: 			!VAR_TEMP_temp269 1 = ;
 989: 			!VAR_USER_currBitIndex !VAR_TEMP_temp269 += ;
 990: 			!FUNC_LIB_moveMemHeadRight ;
 991: 		}
 992: 	}
 993: 	!VAR_USER_shouldBeNegative if {
 994: 		int !VAR_TEMP_temp270 ;
 995: 		!VAR_USER_ans u- = !VAR_TEMP_temp270 ;
 996: 		!VAR_USER_ans !VAR_TEMP_temp270 = ;
 997: 	}
 998: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
 999: 	!VAR_USER_ans return ;
1000: }
1001: void !FUNC_USER_what ( int !VAR_USER_x ) {
1002: 	return ;
1003: }
1004: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
1005: 	int !VAR_USER_temp ;
1006: 	int !VAR_TEMP_temp271 ;
1007: 	!VAR_USER_a !VAR_USER_b * = !VAR_TEMP_temp271 ;
1008: 	int !VAR_TEMP_temp272 ;
1009: 	!VAR_TEMP_temp271 !VAR_USER_c / = !VAR_TEMP_temp272 ;
1010: 	!VAR_USER_temp !VAR_TEMP_temp272 = ;
1011: 	int !VAR_USER_x ;
1012: 	int !VAR_TEMP_temp273 ;
1013: 	!VAR_TEMP_temp273 1 = ;
1014: 	int !VAR_TEMP_temp274 ;
1015: 	!VAR_TEMP_temp273 u- = !VAR_TEMP_temp274 ;
1016: 	int !VAR_TEMP_temp275 ;
1017: 	!VAR_USER_a !VAR_TEMP_temp274 - = !VAR_TEMP_temp275 ;
1018: 	!VAR_USER_x !VAR_TEMP_temp275 = ;
1019: 	!VAR_USER_temp return ;
1020: }
1021: int !FUNC_USER_main ( ) {
1022: 	int !VAR_TEMP_temp276 ;
1023: 	!VAR_TEMP_temp276 3 = ;
1024: 	bool !VAR_TEMP_temp277 ;
1025: 	!VAR_TEMP_temp276 !VAR_LIB_MEM = !VAR_TEMP_temp277 ;
1026: 	!VAR_TEMP_temp277 return ;
1027: }

after paramsToTemp
   0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
   1: 	bool !VAR_TEMP_temp0 ;
   2: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
   3: 	!VAR_TEMP_temp0 if {
   4: 		!VAR_USER_y return ;
   5: 	}
   6: 	bool !VAR_TEMP_temp1 ;
   7: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ;
   8: 	!VAR_TEMP_temp1 if {
   9: 		!VAR_USER_x return ;
  10: 	}
  11: 	bool !VAR_TEMP_temp2 ;
  12: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp2 ;
  13: 	!VAR_TEMP_temp2 if {
  14: 		bool !VAR_TEMP_temp3 ;
  15: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp3 ;
  16: 		bool !VAR_TEMP_temp4 ;
  17: 		!VAR_TEMP_temp4 !VAR_TEMP_temp3 = ;
  18: 	}
  19: 	else {
  20: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 = ;
  21: 	}
  22: 	!VAR_TEMP_temp4 if {
  23: 		int !VAR_TEMP_temp5 ;
  24: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp5 ;
  25: 		bool !VAR_TEMP_temp6 ;
  26: 		int !VAR_TEMP_temp294 ;
  27: 		!VAR_TEMP_temp294 !VAR_USER_y = ;
  28: 		!VAR_TEMP_temp5 !VAR_TEMP_temp294 !FUNC_LIB_eq = !VAR_TEMP_temp6 ;
  29: 		!VAR_TEMP_temp6 if {
  30: 			int !VAR_TEMP_temp7 ;
  31: 			!VAR_TEMP_temp7 0 = ;
  32: 			!VAR_TEMP_temp7 return ;
  33: 		}
  34: 		else {
  35: 			int !VAR_TEMP_temp8 ;
  36: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp8 ;
  37: 			bool !VAR_TEMP_temp9 ;
  38: 			int !VAR_TEMP_temp295 ;
  39: 			!VAR_TEMP_temp295 !VAR_USER_y = ;
  40: 			!VAR_TEMP_temp8 !VAR_TEMP_temp295 !FUNC_LIB_lt = !VAR_TEMP_temp9 ;
  41: 			!VAR_TEMP_temp9 if {
  42: 				int !VAR_TEMP_temp10 ;
  43: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp10 ;
  44: 				bool !VAR_TEMP_temp11 ;
  45: 				int !VAR_TEMP_temp296 ;
  46: 				!VAR_TEMP_temp296 !VAR_USER_y = ;
  47: 				!VAR_TEMP_temp296 !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ;
  48: 				!VAR_TEMP_temp11 return ;
  49: 			}
  50: 			else {
  51: 				int !VAR_TEMP_temp12 ;
  52: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp12 ;
  53: 				int !VAR_TEMP_temp13 ;
  54: 				int !VAR_TEMP_temp297 ;
  55: 				!VAR_TEMP_temp297 !VAR_USER_y = ;
  56: 				!VAR_TEMP_temp12 !VAR_TEMP_temp297 !FUNC_LIB_basic_sub = !VAR_TEMP_temp13 ;
  57: 				bool !VAR_TEMP_temp14 ;
  58: 				!VAR_TEMP_temp13 !FUNC_LIB_neg = !VAR_TEMP_temp14 ;
  59: 				!VAR_TEMP_temp14 return ;
  60: 			}
  61: 		}
  62: 	}
  63: 	else {
  64: 		bool !VAR_TEMP_temp15 ;
  65: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp15 ;
  66: 		!VAR_TEMP_temp15 if {
  67: 			bool !VAR_TEMP_temp16 ;
  68: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp16 ;
  69: 			bool !VAR_TEMP_temp17 ;
  70: 			!VAR_TEMP_temp17 !VAR_TEMP_temp16 = ;
  71: 		}
  72: 		else {
  73: 			!VAR_TEMP_temp17 !VAR_TEMP_temp15 = ;
  74: 		}
  75: 		!VAR_TEMP_temp17 if {
  76: 			int !VAR_TEMP_temp18 ;
  77: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp18 ;
  78: 			bool !VAR_TEMP_temp19 ;
  79: 			int !VAR_TEMP_temp298 ;
  80: 			!VAR_TEMP_temp298 !VAR_USER_x = ;
  81: 			!VAR_TEMP_temp18 !VAR_TEMP_temp298 !FUNC_LIB_eq = !VAR_TEMP_temp19 ;
  82: 			!VAR_TEMP_temp19 if {
  83: 				int !VAR_TEMP_temp20 ;
  84: 				!VAR_TEMP_temp20 0 = ;
  85: 				!VAR_TEMP_temp20 return ;
  86: 			}
  87: 			else {
  88: 				int !VAR_TEMP_temp21 ;
  89: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp21 ;
  90: 				bool !VAR_TEMP_temp22 ;
  91: 				int !VAR_TEMP_temp299 ;
  92: 				!VAR_TEMP_temp299 !VAR_USER_x = ;
  93: 				!VAR_TEMP_temp21 !VAR_TEMP_temp299 !FUNC_LIB_lt = !VAR_TEMP_temp22 ;
  94: 				!VAR_TEMP_temp22 if {
  95: 					int !VAR_TEMP_temp23 ;
  96: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp23 ;
  97: 					bool !VAR_TEMP_temp24 ;
  98: 					int !VAR_TEMP_temp300 ;
  99: 					!VAR_TEMP_temp300 !VAR_USER_x = ;
 100: 					!VAR_TEMP_temp300 !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ;
 101: 					!VAR_TEMP_temp24 return ;
 102: 				}
 103: 				else {
 104: 					int !VAR_TEMP_temp25 ;
 105: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp25 ;
 106: 					int !VAR_TEMP_temp26 ;
 107: 					int !VAR_TEMP_temp301 ;
 108: 					!VAR_TEMP_temp301 !VAR_USER_x = ;
 109: 					!VAR_TEMP_temp25 !VAR_TEMP_temp301 !FUNC_LIB_basic_sub = !VAR_TEMP_temp26 ;
 110: 					bool !VAR_TEMP_temp27 ;
 111: 					!VAR_TEMP_temp26 !FUNC_LIB_neg = !VAR_TEMP_temp27 ;
 112: 					!VAR_TEMP_temp27 return ;
 113: 				}
 114: 			}
 115: 		}
 116: 		else {
 117: 			bool !VAR_TEMP_temp28 ;
 118: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp28 ;
 119: 			!VAR_TEMP_temp28 if {
 120: 				bool !VAR_TEMP_temp29 ;
 121: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp29 ;
 122: 				bool !VAR_TEMP_temp30 ;
 123: 				!VAR_TEMP_temp30 !VAR_TEMP_temp29 = ;
 124: 			}
 125: 			else {
 126: 				!VAR_TEMP_temp30 !VAR_TEMP_temp28 = ;
 127: 			}
 128: 			!VAR_TEMP_temp30 if {
 129: 				int !VAR_TEMP_temp31 ;
 130: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp31 ;
 131: 				int !VAR_TEMP_temp32 ;
 132: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp32 ;
 133: 				int !VAR_TEMP_temp33 ;
 134: 				!VAR_TEMP_temp31 !VAR_TEMP_temp32 !FUNC_LIB_basic_add = !VAR_TEMP_temp33 ;
 135: 				bool !VAR_TEMP_temp34 ;
 136: 				!VAR_TEMP_temp33 !FUNC_LIB_neg = !VAR_TEMP_temp34 ;
 137: 				!VAR_TEMP_temp34 return ;
 138: 			}
 139: 			else {
 140: 				bool !VAR_TEMP_temp35 ;
 141: 				int !VAR_TEMP_temp302 ;
 142: 				!VAR_TEMP_temp302 !VAR_USER_x = ;
 143: 				int !VAR_TEMP_temp303 ;
 144: 				!VAR_TEMP_temp303 !VAR_USER_y = ;
 145: 				!VAR_TEMP_temp302 !VAR_TEMP_temp303 !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ;
 146: 				!VAR_TEMP_temp35 return ;
 147: 			}
 148: 		}
 149: 	}
 150: }
 151: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
 152: 	bool !VAR_TEMP_temp36 ;
 153: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ;
 154: 	!VAR_TEMP_temp36 if {
 155: 		bool !VAR_TEMP_temp37 ;
 156: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp37 ;
 157: 		!VAR_TEMP_temp37 return ;
 158: 	}
 159: 	bool !VAR_TEMP_temp38 ;
 160: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ;
 161: 	!VAR_TEMP_temp38 if {
 162: 		!VAR_USER_x return ;
 163: 	}
 164: 	bool !VAR_TEMP_temp39 ;
 165: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp39 ;
 166: 	!VAR_TEMP_temp39 if {
 167: 		bool !VAR_TEMP_temp40 ;
 168: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp40 ;
 169: 		bool !VAR_TEMP_temp41 ;
 170: 		!VAR_TEMP_temp41 !VAR_TEMP_temp40 = ;
 171: 	}
 172: 	else {
 173: 		!VAR_TEMP_temp41 !VAR_TEMP_temp39 = ;
 174: 	}
 175: 	!VAR_TEMP_temp41 if {
 176: 		int !VAR_TEMP_temp42 ;
 177: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp42 ;
 178: 		bool !VAR_TEMP_temp43 ;
 179: 		int !VAR_TEMP_temp304 ;
 180: 		!VAR_TEMP_temp304 !VAR_USER_x = ;
 181: 		!VAR_TEMP_temp304 !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ;
 182: 		!VAR_TEMP_temp43 return ;
 183: 	}
 184: 	else {
 185: 		bool !VAR_TEMP_temp44 ;
 186: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp44 ;
 187: 		!VAR_TEMP_temp44 if {
 188: 			bool !VAR_TEMP_temp45 ;
 189: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp45 ;
 190: 			bool !VAR_TEMP_temp46 ;
 191: 			!VAR_TEMP_temp46 !VAR_TEMP_temp45 = ;
 192: 		}
 193: 		else {
 194: 			!VAR_TEMP_temp46 !VAR_TEMP_temp44 = ;
 195: 		}
 196: 		!VAR_TEMP_temp46 if {
 197: 			int !VAR_TEMP_temp47 ;
 198: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp47 ;
 199: 			int !VAR_TEMP_temp48 ;
 200: 			int !VAR_TEMP_temp305 ;
 201: 			!VAR_TEMP_temp305 !VAR_USER_y = ;
 202: 			!VAR_TEMP_temp47 !VAR_TEMP_temp305 !FUNC_LIB_basic_add = !VAR_TEMP_temp48 ;
 203: 			bool !VAR_TEMP_temp49 ;
 204: 			!VAR_TEMP_temp48 !FUNC_LIB_neg = !VAR_TEMP_temp49 ;
 205: 			!VAR_TEMP_temp49 return ;
 206: 		}
 207: 		else {
 208: 			bool !VAR_TEMP_temp50 ;
 209: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp50 ;
 210: 			!VAR_TEMP_temp50 if {
 211: 				bool !VAR_TEMP_temp51 ;
 212: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp51 ;
 213: 				bool !VAR_TEMP_temp52 ;
 214: 				!VAR_TEMP_temp52 !VAR_TEMP_temp51 = ;
 215: 			}
 216: 			else {
 217: 				!VAR_TEMP_temp52 !VAR_TEMP_temp50 = ;
 218: 			}
 219: 			!VAR_TEMP_temp52 if {
 220: 				int !VAR_TEMP_temp53 ;
 221: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp53 ;
 222: 				bool !VAR_TEMP_temp54 ;
 223: 				int !VAR_TEMP_temp306 ;
 224: 				!VAR_TEMP_temp306 !VAR_USER_x = ;
 225: 				!VAR_TEMP_temp306 !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ;
 226: 				!VAR_TEMP_temp54 return ;
 227: 			}
 228: 			else {
 229: 				int !VAR_TEMP_temp55 ;
 230: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp55 ;
 231: 				bool !VAR_TEMP_temp56 ;
 232: 				int !VAR_TEMP_temp307 ;
 233: 				!VAR_TEMP_temp307 !VAR_USER_x = ;
 234: 				!VAR_TEMP_temp307 !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ;
 235: 				!VAR_TEMP_temp56 return ;
 236: 			}
 237: 		}
 238: 	}
 239: }
 240: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
 241: 	bool !VAR_TEMP_temp57 ;
 242: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp57 ;
 243: 	!VAR_TEMP_temp57 if {
 244: 		!VAR_TEMP_temp59 !VAR_TEMP_temp57 = ;
 245: 	}
 246: 	else {
 247: 		bool !VAR_TEMP_temp58 ;
 248: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp58 ;
 249: 		bool !VAR_TEMP_temp59 ;
 250: 		!VAR_TEMP_temp59 !VAR_TEMP_temp58 = ;
 251: 	}
 252: 	!VAR_TEMP_temp59 if {
 253: 		int !VAR_TEMP_temp60 ;
 254: 		!VAR_TEMP_temp60 0 = ;
 255: 		!VAR_TEMP_temp60 return ;
 256: 	}
 257: 	bool !VAR_USER_ansNeg ;
 258: 	bool !VAR_TEMP_temp61 ;
 259: 	!VAR_TEMP_temp61 false = ;
 260: 	!VAR_USER_ansNeg !VAR_TEMP_temp61 = ;
 261: 	bool !VAR_TEMP_temp62 ;
 262: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ;
 263: 	!VAR_TEMP_temp62 if {
 264: 		int !VAR_TEMP_temp63 ;
 265: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp63 ;
 266: 		!VAR_USER_x !VAR_TEMP_temp63 = ;
 267: 		bool !VAR_TEMP_temp64 ;
 268: 		!VAR_TEMP_temp64 true = ;
 269: 		!VAR_USER_ansNeg !VAR_TEMP_temp64 = ;
 270: 	}
 271: 	bool !VAR_TEMP_temp65 ;
 272: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ;
 273: 	!VAR_TEMP_temp65 if {
 274: 		int !VAR_TEMP_temp66 ;
 275: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp66 ;
 276: 		!VAR_USER_y !VAR_TEMP_temp66 = ;
 277: 		bool !VAR_TEMP_temp67 ;
 278: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp67 ;
 279: 		!VAR_USER_ansNeg !VAR_TEMP_temp67 = ;
 280: 	}
 281: 	int !VAR_USER_ans ;
 282: 	int !VAR_TEMP_temp68 ;
 283: 	!VAR_TEMP_temp68 0 = ;
 284: 	!VAR_USER_ans !VAR_TEMP_temp68 = ;
 285: 	int !VAR_USER_y0 ;
 286: 	!VAR_USER_y0 !VAR_USER_y = ;
 287: 	while ( true ) {
 288: 		int !VAR_TEMP_temp69 ;
 289: 		!VAR_TEMP_temp69 0 = ;
 290: 		bool !VAR_TEMP_temp70 ;
 291: 		int !VAR_TEMP_temp308 ;
 292: 		!VAR_TEMP_temp308 !VAR_USER_y0 = ;
 293: 		!VAR_TEMP_temp308 !VAR_TEMP_temp69 !FUNC_LIB_gt = !VAR_TEMP_temp70 ;
 294: 		bool !VAR_TEMP_temp71 ;
 295: 		!VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ;
 296: 		!VAR_TEMP_temp71 if {
 297: 			break ;
 298: 		}
 299: 		int !VAR_USER_y1 ;
 300: 		int !VAR_TEMP_temp72 ;
 301: 		!VAR_TEMP_temp72 1 = ;
 302: 		!VAR_USER_y1 !VAR_TEMP_temp72 = ;
 303: 		int !VAR_USER_y2 ;
 304: 		int !VAR_TEMP_temp73 ;
 305: 		!VAR_TEMP_temp73 2 = ;
 306: 		!VAR_USER_y2 !VAR_TEMP_temp73 = ;
 307: 		int !VAR_USER_val1 ;
 308: 		!VAR_USER_val1 !VAR_USER_x = ;
 309: 		int !VAR_USER_val2 ;
 310: 		int !VAR_TEMP_temp74 ;
 311: 		int !VAR_TEMP_temp309 ;
 312: 		!VAR_TEMP_temp309 !VAR_USER_x = ;
 313: 		int !VAR_TEMP_temp310 ;
 314: 		!VAR_TEMP_temp310 !VAR_USER_x = ;
 315: 		!VAR_TEMP_temp309 !VAR_TEMP_temp310 !FUNC_LIB_add = !VAR_TEMP_temp74 ;
 316: 		!VAR_USER_val2 !VAR_TEMP_temp74 = ;
 317: 		while ( true ) {
 318: 			bool !VAR_TEMP_temp75 ;
 319: 			int !VAR_TEMP_temp311 ;
 320: 			!VAR_TEMP_temp311 !VAR_USER_val2 = ;
 321: 			int !VAR_TEMP_temp312 ;
 322: 			!VAR_TEMP_temp312 !VAR_USER_y0 = ;
 323: 			!VAR_TEMP_temp311 !VAR_TEMP_temp312 !FUNC_LIB_leq = !VAR_TEMP_temp75 ;
 324: 			bool !VAR_TEMP_temp76 ;
 325: 			!VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ;
 326: 			!VAR_TEMP_temp76 if {
 327: 				break ;
 328: 			}
 329: 			!VAR_USER_y1 !VAR_USER_y2 = ;
 330: 			!VAR_USER_val1 !VAR_USER_val2 = ;
 331: 			int !VAR_TEMP_temp293 ;
 332: 			int !VAR_TEMP_temp313 ;
 333: 			!VAR_TEMP_temp313 !VAR_USER_y2 = ;
 334: 			int !VAR_TEMP_temp314 ;
 335: 			!VAR_TEMP_temp314 !VAR_USER_y2 = ;
 336: 			!VAR_TEMP_temp313 !VAR_TEMP_temp314 !FUNC_LIB_add = !VAR_TEMP_temp293 ;
 337: 			!VAR_USER_y2 !VAR_TEMP_temp293 = ;
 338: 			int !VAR_TEMP_temp292 ;
 339: 			int !VAR_TEMP_temp315 ;
 340: 			!VAR_TEMP_temp315 !VAR_USER_val2 = ;
 341: 			int !VAR_TEMP_temp316 ;
 342: 			!VAR_TEMP_temp316 !VAR_USER_val2 = ;
 343: 			!VAR_TEMP_temp315 !VAR_TEMP_temp316 !FUNC_LIB_add = !VAR_TEMP_temp292 ;
 344: 			!VAR_USER_val2 !VAR_TEMP_temp292 = ;
 345: 		}
 346: 		int !VAR_TEMP_temp291 ;
 347: 		int !VAR_TEMP_temp317 ;
 348: 		!VAR_TEMP_temp317 !VAR_USER_ans = ;
 349: 		int !VAR_TEMP_temp318 ;
 350: 		!VAR_TEMP_temp318 !VAR_USER_val1 = ;
 351: 		!VAR_TEMP_temp317 !VAR_TEMP_temp318 !FUNC_LIB_add = !VAR_TEMP_temp291 ;
 352: 		!VAR_USER_ans !VAR_TEMP_temp291 = ;
 353: 		int !VAR_TEMP_temp290 ;
 354: 		int !VAR_TEMP_temp319 ;
 355: 		!VAR_TEMP_temp319 !VAR_USER_y0 = ;
 356: 		int !VAR_TEMP_temp320 ;
 357: 		!VAR_TEMP_temp320 !VAR_USER_y1 = ;
 358: 		!VAR_TEMP_temp319 !VAR_TEMP_temp320 !FUNC_LIB_sub = !VAR_TEMP_temp290 ;
 359: 		!VAR_USER_y0 !VAR_TEMP_temp290 = ;
 360: 	}
 361: 	!VAR_USER_ansNeg if {
 362: 		int !VAR_TEMP_temp77 ;
 363: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp77 ;
 364: 		!VAR_USER_ans !VAR_TEMP_temp77 = ;
 365: 	}
 366: 	!VAR_USER_ans return ;
 367: }
 368: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
 369: 	bool !VAR_TEMP_temp78 ;
 370: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ;
 371: 	!VAR_TEMP_temp78 if {
 372: 		int !VAR_TEMP_temp79 ;
 373: 		!VAR_TEMP_temp79 0 = ;
 374: 		!VAR_TEMP_temp79 return ;
 375: 	}
 376: 	int !VAR_TEMP_temp80 ;
 377: 	!VAR_TEMP_temp80 0 = ;
 378: 	int !VAR_TEMP_temp81 ;
 379: 	!VAR_TEMP_temp81 0 = ;
 380: 	bool !VAR_TEMP_temp82 ;
 381: 	int !VAR_TEMP_temp321 ;
 382: 	!VAR_TEMP_temp321 !VAR_USER_x = ;
 383: 	!VAR_TEMP_temp321 !VAR_TEMP_temp80 !FUNC_LIB_lt = !VAR_TEMP_temp82 ;
 384: 	!VAR_TEMP_temp82 if {
 385: 		bool !VAR_TEMP_temp83 ;
 386: 		int !VAR_TEMP_temp322 ;
 387: 		!VAR_TEMP_temp322 !VAR_USER_y = ;
 388: 		!VAR_TEMP_temp322 !VAR_TEMP_temp81 !FUNC_LIB_lt = !VAR_TEMP_temp83 ;
 389: 		bool !VAR_TEMP_temp84 ;
 390: 		!VAR_TEMP_temp84 !VAR_TEMP_temp83 = ;
 391: 	}
 392: 	else {
 393: 		!VAR_TEMP_temp84 !VAR_TEMP_temp82 = ;
 394: 	}
 395: 	!VAR_TEMP_temp84 if {
 396: 		int !VAR_TEMP_temp85 ;
 397: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp85 ;
 398: 		int !VAR_TEMP_temp86 ;
 399: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp86 ;
 400: 		bool !VAR_TEMP_temp87 ;
 401: 		!VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ;
 402: 		!VAR_TEMP_temp87 return ;
 403: 	}
 404: 	int !VAR_TEMP_temp88 ;
 405: 	!VAR_TEMP_temp88 0 = ;
 406: 	bool !VAR_TEMP_temp89 ;
 407: 	int !VAR_TEMP_temp323 ;
 408: 	!VAR_TEMP_temp323 !VAR_USER_x = ;
 409: 	!VAR_TEMP_temp323 !VAR_TEMP_temp88 !FUNC_LIB_lt = !VAR_TEMP_temp89 ;
 410: 	!VAR_TEMP_temp89 if {
 411: 		int !VAR_TEMP_temp90 ;
 412: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp90 ;
 413: 		int !VAR_TEMP_temp91 ;
 414: 		int !VAR_TEMP_temp324 ;
 415: 		!VAR_TEMP_temp324 !VAR_USER_y = ;
 416: 		!VAR_TEMP_temp90 !VAR_TEMP_temp324 !FUNC_LIB_div = !VAR_TEMP_temp91 ;
 417: 		bool !VAR_TEMP_temp92 ;
 418: 		!VAR_TEMP_temp91 !FUNC_LIB_neg = !VAR_TEMP_temp92 ;
 419: 		!VAR_TEMP_temp92 return ;
 420: 	}
 421: 	int !VAR_TEMP_temp93 ;
 422: 	!VAR_TEMP_temp93 0 = ;
 423: 	bool !VAR_TEMP_temp94 ;
 424: 	int !VAR_TEMP_temp325 ;
 425: 	!VAR_TEMP_temp325 !VAR_USER_y = ;
 426: 	!VAR_TEMP_temp325 !VAR_TEMP_temp93 !FUNC_LIB_lt = !VAR_TEMP_temp94 ;
 427: 	!VAR_TEMP_temp94 if {
 428: 		int !VAR_TEMP_temp95 ;
 429: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp95 ;
 430: 		int !VAR_TEMP_temp96 ;
 431: 		int !VAR_TEMP_temp326 ;
 432: 		!VAR_TEMP_temp326 !VAR_USER_x = ;
 433: 		!VAR_TEMP_temp326 !VAR_TEMP_temp95 !FUNC_LIB_div = !VAR_TEMP_temp96 ;
 434: 		bool !VAR_TEMP_temp97 ;
 435: 		!VAR_TEMP_temp96 !FUNC_LIB_neg = !VAR_TEMP_temp97 ;
 436: 		!VAR_TEMP_temp97 return ;
 437: 	}
 438: 	int !VAR_USER_ans ;
 439: 	int !VAR_TEMP_temp98 ;
 440: 	!VAR_TEMP_temp98 0 = ;
 441: 	!VAR_USER_ans !VAR_TEMP_temp98 = ;
 442: 	int !VAR_USER_n ;
 443: 	!VAR_USER_n !VAR_USER_x = ;
 444: 	while ( true ) {
 445: 		bool !VAR_TEMP_temp99 ;
 446: 		int !VAR_TEMP_temp327 ;
 447: 		!VAR_TEMP_temp327 !VAR_USER_n = ;
 448: 		int !VAR_TEMP_temp328 ;
 449: 		!VAR_TEMP_temp328 !VAR_USER_y = ;
 450: 		!VAR_TEMP_temp327 !VAR_TEMP_temp328 !FUNC_LIB_geq = !VAR_TEMP_temp99 ;
 451: 		bool !VAR_TEMP_temp100 ;
 452: 		!VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ;
 453: 		!VAR_TEMP_temp100 if {
 454: 			break ;
 455: 		}
 456: 		int !VAR_USER_prevJump ;
 457: 		int !VAR_TEMP_temp101 ;
 458: 		!VAR_TEMP_temp101 0 = ;
 459: 		!VAR_USER_prevJump !VAR_TEMP_temp101 = ;
 460: 		int !VAR_USER_jump ;
 461: 		int !VAR_TEMP_temp102 ;
 462: 		!VAR_TEMP_temp102 1 = ;
 463: 		!VAR_USER_jump !VAR_TEMP_temp102 = ;
 464: 		while ( true ) {
 465: 			int !VAR_TEMP_temp103 ;
 466: 			int !VAR_TEMP_temp329 ;
 467: 			!VAR_TEMP_temp329 !VAR_USER_ans = ;
 468: 			int !VAR_TEMP_temp330 ;
 469: 			!VAR_TEMP_temp330 !VAR_USER_jump = ;
 470: 			!VAR_TEMP_temp329 !VAR_TEMP_temp330 !FUNC_LIB_add = !VAR_TEMP_temp103 ;
 471: 			int !VAR_TEMP_temp104 ;
 472: 			int !VAR_TEMP_temp331 ;
 473: 			!VAR_TEMP_temp331 !VAR_USER_y = ;
 474: 			!VAR_TEMP_temp331 !VAR_TEMP_temp103 !FUNC_LIB_mul = !VAR_TEMP_temp104 ;
 475: 			bool !VAR_TEMP_temp105 ;
 476: 			int !VAR_TEMP_temp332 ;
 477: 			!VAR_TEMP_temp332 !VAR_USER_x = ;
 478: 			!VAR_TEMP_temp104 !VAR_TEMP_temp332 !FUNC_LIB_leq = !VAR_TEMP_temp105 ;
 479: 			bool !VAR_TEMP_temp106 ;
 480: 			!VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ;
 481: 			!VAR_TEMP_temp106 if {
 482: 				break ;
 483: 			}
 484: 			!VAR_USER_prevJump !VAR_USER_jump = ;
 485: 			int !VAR_TEMP_temp289 ;
 486: 			int !VAR_TEMP_temp333 ;
 487: 			!VAR_TEMP_temp333 !VAR_USER_jump = ;
 488: 			int !VAR_TEMP_temp334 ;
 489: 			!VAR_TEMP_temp334 !VAR_USER_jump = ;
 490: 			!VAR_TEMP_temp333 !VAR_TEMP_temp334 !FUNC_LIB_add = !VAR_TEMP_temp289 ;
 491: 			!VAR_USER_jump !VAR_TEMP_temp289 = ;
 492: 		}
 493: 		int !VAR_TEMP_temp288 ;
 494: 		int !VAR_TEMP_temp335 ;
 495: 		!VAR_TEMP_temp335 !VAR_USER_ans = ;
 496: 		int !VAR_TEMP_temp336 ;
 497: 		!VAR_TEMP_temp336 !VAR_USER_prevJump = ;
 498: 		!VAR_TEMP_temp335 !VAR_TEMP_temp336 !FUNC_LIB_add = !VAR_TEMP_temp288 ;
 499: 		!VAR_USER_ans !VAR_TEMP_temp288 = ;
 500: 		int !VAR_TEMP_temp107 ;
 501: 		int !VAR_TEMP_temp337 ;
 502: 		!VAR_TEMP_temp337 !VAR_USER_y = ;
 503: 		int !VAR_TEMP_temp338 ;
 504: 		!VAR_TEMP_temp338 !VAR_USER_ans = ;
 505: 		!VAR_TEMP_temp337 !VAR_TEMP_temp338 !FUNC_LIB_mul = !VAR_TEMP_temp107 ;
 506: 		int !VAR_TEMP_temp108 ;
 507: 		int !VAR_TEMP_temp339 ;
 508: 		!VAR_TEMP_temp339 !VAR_USER_x = ;
 509: 		!VAR_TEMP_temp339 !VAR_TEMP_temp107 !FUNC_LIB_sub = !VAR_TEMP_temp108 ;
 510: 		!VAR_USER_n !VAR_TEMP_temp108 = ;
 511: 	}
 512: 	!VAR_USER_ans return ;
 513: }
 514: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
 515: 	int !VAR_USER_d ;
 516: 	int !VAR_TEMP_temp109 ;
 517: 	int !VAR_TEMP_temp340 ;
 518: 	!VAR_TEMP_temp340 !VAR_USER_x = ;
 519: 	int !VAR_TEMP_temp341 ;
 520: 	!VAR_TEMP_temp341 !VAR_USER_y = ;
 521: 	!VAR_TEMP_temp340 !VAR_TEMP_temp341 !FUNC_LIB_div = !VAR_TEMP_temp109 ;
 522: 	!VAR_USER_d !VAR_TEMP_temp109 = ;
 523: 	int !VAR_TEMP_temp110 ;
 524: 	int !VAR_TEMP_temp342 ;
 525: 	!VAR_TEMP_temp342 !VAR_USER_y = ;
 526: 	int !VAR_TEMP_temp343 ;
 527: 	!VAR_TEMP_temp343 !VAR_USER_d = ;
 528: 	!VAR_TEMP_temp342 !VAR_TEMP_temp343 !FUNC_LIB_mul = !VAR_TEMP_temp110 ;
 529: 	bool !VAR_TEMP_temp111 ;
 530: 	int !VAR_TEMP_temp344 ;
 531: 	!VAR_TEMP_temp344 !VAR_USER_x = ;
 532: 	!VAR_TEMP_temp344 !VAR_TEMP_temp110 !FUNC_LIB_sub = !VAR_TEMP_temp111 ;
 533: 	!VAR_TEMP_temp111 return ;
 534: }
 535: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
 536: 	bool !VAR_TEMP_temp112 ;
 537: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ;
 538: 	!VAR_TEMP_temp112 if {
 539: 		int !VAR_TEMP_temp113 ;
 540: 		!VAR_TEMP_temp113 0 = ;
 541: 		!VAR_TEMP_temp113 return ;
 542: 	}
 543: 	bool !VAR_TEMP_temp114 ;
 544: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ;
 545: 	!VAR_TEMP_temp114 return ;
 546: }
 547: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
 548: 	bool !VAR_TEMP_temp115 ;
 549: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ;
 550: 	!VAR_TEMP_temp115 if {
 551: 		bool !VAR_TEMP_temp116 ;
 552: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ;
 553: 		!VAR_TEMP_temp116 if {
 554: 			int !VAR_TEMP_temp117 ;
 555: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp117 ;
 556: 			int !VAR_TEMP_temp118 ;
 557: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp118 ;
 558: 			bool !VAR_TEMP_temp119 ;
 559: 			!VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ;
 560: 			!VAR_TEMP_temp119 return ;
 561: 		}
 562: 		else {
 563: 			bool !VAR_TEMP_temp120 ;
 564: 			!VAR_TEMP_temp120 true = ;
 565: 			!VAR_TEMP_temp120 return ;
 566: 		}
 567: 	}
 568: 	else {
 569: 		bool !VAR_TEMP_temp121 ;
 570: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ;
 571: 		!VAR_TEMP_temp121 if {
 572: 			bool !VAR_TEMP_temp122 ;
 573: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ;
 574: 			!VAR_TEMP_temp122 if {
 575: 				bool !VAR_TEMP_temp123 ;
 576: 				!VAR_TEMP_temp123 false = ;
 577: 				!VAR_TEMP_temp123 return ;
 578: 			}
 579: 			else {
 580: 				bool !VAR_TEMP_temp124 ;
 581: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ;
 582: 				!VAR_TEMP_temp124 if {
 583: 					bool !VAR_TEMP_temp125 ;
 584: 					!VAR_TEMP_temp125 false = ;
 585: 					!VAR_TEMP_temp125 return ;
 586: 				}
 587: 				else {
 588: 					bool !VAR_TEMP_temp126 ;
 589: 					!VAR_TEMP_temp126 true = ;
 590: 					!VAR_TEMP_temp126 return ;
 591: 				}
 592: 			}
 593: 		}
 594: 		else {
 595: 			bool !VAR_TEMP_temp127 ;
 596: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp127 ;
 597: 			!VAR_TEMP_temp127 if {
 598: 				!VAR_TEMP_temp129 !VAR_TEMP_temp127 = ;
 599: 			}
 600: 			else {
 601: 				bool !VAR_TEMP_temp128 ;
 602: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp128 ;
 603: 				bool !VAR_TEMP_temp129 ;
 604: 				!VAR_TEMP_temp129 !VAR_TEMP_temp128 = ;
 605: 			}
 606: 			!VAR_TEMP_temp129 if {
 607: 				bool !VAR_TEMP_temp130 ;
 608: 				!VAR_TEMP_temp130 false = ;
 609: 				!VAR_TEMP_temp130 return ;
 610: 			}
 611: 			else {
 612: 				bool !VAR_TEMP_temp131 ;
 613: 				int !VAR_TEMP_temp345 ;
 614: 				!VAR_TEMP_temp345 !VAR_USER_x = ;
 615: 				int !VAR_TEMP_temp346 ;
 616: 				!VAR_TEMP_temp346 !VAR_USER_y = ;
 617: 				!VAR_TEMP_temp345 !VAR_TEMP_temp346 !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ;
 618: 				!VAR_TEMP_temp131 return ;
 619: 			}
 620: 		}
 621: 	}
 622: }
 623: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
 624: 	bool !VAR_TEMP_temp132 ;
 625: 	int !VAR_TEMP_temp347 ;
 626: 	!VAR_TEMP_temp347 !VAR_USER_x = ;
 627: 	int !VAR_TEMP_temp348 ;
 628: 	!VAR_TEMP_temp348 !VAR_USER_y = ;
 629: 	!VAR_TEMP_temp347 !VAR_TEMP_temp348 !FUNC_LIB_eq = !VAR_TEMP_temp132 ;
 630: 	!VAR_TEMP_temp132 if {
 631: 		!VAR_TEMP_temp134 !VAR_TEMP_temp132 = ;
 632: 	}
 633: 	else {
 634: 		bool !VAR_TEMP_temp133 ;
 635: 		int !VAR_TEMP_temp349 ;
 636: 		!VAR_TEMP_temp349 !VAR_USER_x = ;
 637: 		int !VAR_TEMP_temp350 ;
 638: 		!VAR_TEMP_temp350 !VAR_USER_y = ;
 639: 		!VAR_TEMP_temp349 !VAR_TEMP_temp350 !FUNC_LIB_lt = !VAR_TEMP_temp133 ;
 640: 		bool !VAR_TEMP_temp134 ;
 641: 		!VAR_TEMP_temp134 !VAR_TEMP_temp133 = ;
 642: 	}
 643: 	!VAR_TEMP_temp134 return ;
 644: }
 645: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
 646: 	bool !VAR_TEMP_temp135 ;
 647: 	int !VAR_TEMP_temp351 ;
 648: 	!VAR_TEMP_temp351 !VAR_USER_x = ;
 649: 	int !VAR_TEMP_temp352 ;
 650: 	!VAR_TEMP_temp352 !VAR_USER_y = ;
 651: 	!VAR_TEMP_temp351 !VAR_TEMP_temp352 !FUNC_LIB_leq = !VAR_TEMP_temp135 ;
 652: 	bool !VAR_TEMP_temp136 ;
 653: 	!VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ;
 654: 	!VAR_TEMP_temp136 return ;
 655: }
 656: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
 657: 	bool !VAR_TEMP_temp137 ;
 658: 	int !VAR_TEMP_temp353 ;
 659: 	!VAR_TEMP_temp353 !VAR_USER_x = ;
 660: 	int !VAR_TEMP_temp354 ;
 661: 	!VAR_TEMP_temp354 !VAR_USER_y = ;
 662: 	!VAR_TEMP_temp353 !VAR_TEMP_temp354 !FUNC_LIB_lt = !VAR_TEMP_temp137 ;
 663: 	bool !VAR_TEMP_temp138 ;
 664: 	!VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ;
 665: 	!VAR_TEMP_temp138 return ;
 666: }
 667: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
 668: 	bool !VAR_TEMP_temp139 ;
 669: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ;
 670: 	!VAR_TEMP_temp139 if {
 671: 		bool !VAR_TEMP_temp140 ;
 672: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ;
 673: 		!VAR_TEMP_temp140 if {
 674: 			bool !VAR_TEMP_temp141 ;
 675: 			!VAR_TEMP_temp141 true = ;
 676: 			!VAR_TEMP_temp141 return ;
 677: 		}
 678: 		bool !VAR_TEMP_temp142 ;
 679: 		!VAR_TEMP_temp142 false = ;
 680: 		!VAR_TEMP_temp142 return ;
 681: 	}
 682: 	else {
 683: 		bool !VAR_TEMP_temp143 ;
 684: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ;
 685: 		!VAR_TEMP_temp143 if {
 686: 			bool !VAR_TEMP_temp144 ;
 687: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ;
 688: 			!VAR_TEMP_temp144 if {
 689: 				int !VAR_TEMP_temp145 ;
 690: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp145 ;
 691: 				int !VAR_TEMP_temp146 ;
 692: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp146 ;
 693: 				bool !VAR_TEMP_temp147 ;
 694: 				!VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ;
 695: 				!VAR_TEMP_temp147 return ;
 696: 			}
 697: 			bool !VAR_TEMP_temp148 ;
 698: 			!VAR_TEMP_temp148 false = ;
 699: 			!VAR_TEMP_temp148 return ;
 700: 		}
 701: 		else {
 702: 			bool !VAR_TEMP_temp149 ;
 703: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ;
 704: 			!VAR_TEMP_temp149 if {
 705: 				bool !VAR_TEMP_temp150 ;
 706: 				int !VAR_TEMP_temp355 ;
 707: 				!VAR_TEMP_temp355 !VAR_USER_x = ;
 708: 				int !VAR_TEMP_temp356 ;
 709: 				!VAR_TEMP_temp356 !VAR_USER_y = ;
 710: 				!VAR_TEMP_temp355 !VAR_TEMP_temp356 !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ;
 711: 				!VAR_TEMP_temp150 return ;
 712: 			}
 713: 			bool !VAR_TEMP_temp151 ;
 714: 			!VAR_TEMP_temp151 false = ;
 715: 			!VAR_TEMP_temp151 return ;
 716: 		}
 717: 	}
 718: }
 719: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
 720: 	bool !VAR_TEMP_temp152 ;
 721: 	int !VAR_TEMP_temp357 ;
 722: 	!VAR_TEMP_temp357 !VAR_USER_x = ;
 723: 	int !VAR_TEMP_temp358 ;
 724: 	!VAR_TEMP_temp358 !VAR_USER_y = ;
 725: 	!VAR_TEMP_temp357 !VAR_TEMP_temp358 !FUNC_LIB_eq = !VAR_TEMP_temp152 ;
 726: 	bool !VAR_TEMP_temp153 ;
 727: 	!VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ;
 728: 	!VAR_TEMP_temp153 return ;
 729: }
 730: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
 731: 	bool !VAR_TEMP_temp154 ;
 732: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ;
 733: 	!VAR_TEMP_temp154 if {
 734: 		!VAR_USER_y return ;
 735: 	}
 736: 	bool !VAR_TEMP_temp155 ;
 737: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ;
 738: 	!VAR_TEMP_temp155 if {
 739: 		!VAR_USER_x return ;
 740: 	}
 741: 	bool !VAR_TEMP_temp156 ;
 742: 	int !VAR_TEMP_temp359 ;
 743: 	!VAR_TEMP_temp359 !VAR_USER_x = ;
 744: 	int !VAR_TEMP_temp360 ;
 745: 	!VAR_TEMP_temp360 !VAR_USER_y = ;
 746: 	!VAR_TEMP_temp359 !VAR_TEMP_temp360 !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ;
 747: 	!VAR_TEMP_temp156 return ;
 748: }
 749: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
 750: 	int !VAR_USER_currBitIndex ;
 751: 	int !VAR_TEMP_temp157 ;
 752: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp157 ;
 753: 	!VAR_USER_currBitIndex !VAR_TEMP_temp157 = ;
 754: 	bool !VAR_USER_handledSign ;
 755: 	bool !VAR_TEMP_temp158 ;
 756: 	!VAR_TEMP_temp158 false = ;
 757: 	!VAR_USER_handledSign !VAR_TEMP_temp158 = ;
 758: 	int !VAR_USER_valIndex ;
 759: 	int !VAR_TEMP_temp159 ;
 760: 	!VAR_TEMP_temp159 0 = ;
 761: 	!VAR_USER_valIndex !VAR_TEMP_temp159 = ;
 762: 	int !VAR_USER_V ;
 763: 	!VAR_USER_V !VAR_USER_val = ;
 764: 	while ( true ) {
 765: 		bool !VAR_TEMP_temp160 ;
 766: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp160 ;
 767: 		bool !VAR_TEMP_temp161 ;
 768: 		!VAR_TEMP_temp160 ! = !VAR_TEMP_temp161 ;
 769: 		!VAR_TEMP_temp161 if {
 770: 			!VAR_TEMP_temp163 !VAR_TEMP_temp161 = ;
 771: 		}
 772: 		else {
 773: 			bool !VAR_TEMP_temp162 ;
 774: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp162 ;
 775: 			bool !VAR_TEMP_temp163 ;
 776: 			!VAR_TEMP_temp163 !VAR_TEMP_temp162 = ;
 777: 		}
 778: 		bool !VAR_TEMP_temp164 ;
 779: 		!VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ;
 780: 		!VAR_TEMP_temp164 if {
 781: 			break ;
 782: 		}
 783: 		int !VAR_USER_desiredBitIndex ;
 784: 		int !VAR_TEMP_temp165 ;
 785: 		!VAR_TEMP_temp165 1 = ;
 786: 		int !VAR_TEMP_temp166 ;
 787: 		!VAR_TEMP_temp166 2 = ;
 788: 		int !VAR_TEMP_temp167 ;
 789: 		int !VAR_TEMP_temp361 ;
 790: 		!VAR_TEMP_temp361 !VAR_USER_index = ;
 791: 		int !VAR_TEMP_temp362 ;
 792: 		!VAR_TEMP_temp362 !VAR_USER_valIndex = ;
 793: 		!VAR_TEMP_temp361 !VAR_TEMP_temp362 !FUNC_LIB_add = !VAR_TEMP_temp167 ;
 794: 		int !VAR_TEMP_temp168 ;
 795: 		int !VAR_TEMP_temp363 ;
 796: 		!VAR_TEMP_temp363 !VAR_USER_index = ;
 797: 		int !VAR_TEMP_temp364 ;
 798: 		!VAR_TEMP_temp364 !VAR_USER_valIndex = ;
 799: 		!VAR_TEMP_temp363 !VAR_TEMP_temp364 !FUNC_LIB_add = !VAR_TEMP_temp168 ;
 800: 		int !VAR_TEMP_temp169 ;
 801: 		!VAR_TEMP_temp168 !VAR_TEMP_temp165 !FUNC_LIB_add = !VAR_TEMP_temp169 ;
 802: 		int !VAR_TEMP_temp170 ;
 803: 		!VAR_TEMP_temp167 !VAR_TEMP_temp169 !FUNC_LIB_mul = !VAR_TEMP_temp170 ;
 804: 		int !VAR_TEMP_temp171 ;
 805: 		!VAR_TEMP_temp170 !VAR_TEMP_temp166 !FUNC_LIB_div = !VAR_TEMP_temp171 ;
 806: 		int !VAR_TEMP_temp172 ;
 807: 		int !VAR_TEMP_temp365 ;
 808: 		!VAR_TEMP_temp365 !VAR_USER_index = ;
 809: 		!VAR_TEMP_temp171 !VAR_TEMP_temp365 !FUNC_LIB_add = !VAR_TEMP_temp172 ;
 810: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp172 = ;
 811: 		while ( true ) {
 812: 			bool !VAR_TEMP_temp173 ;
 813: 			int !VAR_TEMP_temp366 ;
 814: 			!VAR_TEMP_temp366 !VAR_USER_currBitIndex = ;
 815: 			int !VAR_TEMP_temp367 ;
 816: 			!VAR_TEMP_temp367 !VAR_USER_desiredBitIndex = ;
 817: 			!VAR_TEMP_temp366 !VAR_TEMP_temp367 !FUNC_LIB_gt = !VAR_TEMP_temp173 ;
 818: 			bool !VAR_TEMP_temp174 ;
 819: 			!VAR_TEMP_temp173 ! = !VAR_TEMP_temp174 ;
 820: 			!VAR_TEMP_temp174 if {
 821: 				break ;
 822: 			}
 823: 			int !VAR_TEMP_temp175 ;
 824: 			!VAR_TEMP_temp175 1 = ;
 825: 			int !VAR_TEMP_temp287 ;
 826: 			int !VAR_TEMP_temp368 ;
 827: 			!VAR_TEMP_temp368 !VAR_USER_currBitIndex = ;
 828: 			!VAR_TEMP_temp368 !VAR_TEMP_temp175 !FUNC_LIB_sub = !VAR_TEMP_temp287 ;
 829: 			!VAR_USER_currBitIndex !VAR_TEMP_temp287 = ;
 830: 			!FUNC_LIB_moveMemHeadLeft ;
 831: 		}
 832: 		while ( true ) {
 833: 			bool !VAR_TEMP_temp176 ;
 834: 			int !VAR_TEMP_temp369 ;
 835: 			!VAR_TEMP_temp369 !VAR_USER_currBitIndex = ;
 836: 			int !VAR_TEMP_temp370 ;
 837: 			!VAR_TEMP_temp370 !VAR_USER_desiredBitIndex = ;
 838: 			!VAR_TEMP_temp369 !VAR_TEMP_temp370 !FUNC_LIB_lt = !VAR_TEMP_temp176 ;
 839: 			bool !VAR_TEMP_temp177 ;
 840: 			!VAR_TEMP_temp176 ! = !VAR_TEMP_temp177 ;
 841: 			!VAR_TEMP_temp177 if {
 842: 				break ;
 843: 			}
 844: 			int !VAR_TEMP_temp178 ;
 845: 			!VAR_TEMP_temp178 1 = ;
 846: 			int !VAR_TEMP_temp286 ;
 847: 			int !VAR_TEMP_temp371 ;
 848: 			!VAR_TEMP_temp371 !VAR_USER_currBitIndex = ;
 849: 			!VAR_TEMP_temp371 !VAR_TEMP_temp178 !FUNC_LIB_add = !VAR_TEMP_temp286 ;
 850: 			!VAR_USER_currBitIndex !VAR_TEMP_temp286 = ;
 851: 			!FUNC_LIB_moveMemHeadRight ;
 852: 		}
 853: 		bool !VAR_TEMP_temp179 ;
 854: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp179 ;
 855: 		!VAR_TEMP_temp179 if {
 856: 			bool !VAR_TEMP_temp180 ;
 857: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp180 ;
 858: 			!VAR_TEMP_temp180 if {
 859: 				!FUNC_LIB_setMemBitOne ;
 860: 				int !VAR_TEMP_temp181 ;
 861: 				!VAR_USER_V !FUNC_LIB_neg = !VAR_TEMP_temp181 ;
 862: 				!VAR_USER_V !VAR_TEMP_temp181 = ;
 863: 			}
 864: 			else {
 865: 				!FUNC_LIB_setMemBitZero ;
 866: 			}
 867: 			bool !VAR_TEMP_temp182 ;
 868: 			!VAR_TEMP_temp182 true = ;
 869: 			!VAR_USER_handledSign !VAR_TEMP_temp182 = ;
 870: 		}
 871: 		else {
 872: 			int !VAR_USER_V2 ;
 873: 			int !VAR_TEMP_temp183 ;
 874: 			!VAR_TEMP_temp183 2 = ;
 875: 			int !VAR_TEMP_temp184 ;
 876: 			int !VAR_TEMP_temp372 ;
 877: 			!VAR_TEMP_temp372 !VAR_USER_V = ;
 878: 			!VAR_TEMP_temp372 !VAR_TEMP_temp183 !FUNC_LIB_div = !VAR_TEMP_temp184 ;
 879: 			!VAR_USER_V2 !VAR_TEMP_temp184 = ;
 880: 			int !VAR_USER_bit ;
 881: 			int !VAR_TEMP_temp185 ;
 882: 			!VAR_TEMP_temp185 2 = ;
 883: 			int !VAR_TEMP_temp186 ;
 884: 			int !VAR_TEMP_temp373 ;
 885: 			!VAR_TEMP_temp373 !VAR_USER_V2 = ;
 886: 			!VAR_TEMP_temp185 !VAR_TEMP_temp373 !FUNC_LIB_mul = !VAR_TEMP_temp186 ;
 887: 			int !VAR_TEMP_temp187 ;
 888: 			int !VAR_TEMP_temp374 ;
 889: 			!VAR_TEMP_temp374 !VAR_USER_V = ;
 890: 			!VAR_TEMP_temp374 !VAR_TEMP_temp186 !FUNC_LIB_sub = !VAR_TEMP_temp187 ;
 891: 			!VAR_USER_bit !VAR_TEMP_temp187 = ;
 892: 			int !VAR_TEMP_temp188 ;
 893: 			!VAR_TEMP_temp188 1 = ;
 894: 			bool !VAR_TEMP_temp189 ;
 895: 			int !VAR_TEMP_temp375 ;
 896: 			!VAR_TEMP_temp375 !VAR_USER_bit = ;
 897: 			!VAR_TEMP_temp375 !VAR_TEMP_temp188 !FUNC_LIB_eq = !VAR_TEMP_temp189 ;
 898: 			!VAR_TEMP_temp189 if {
 899: 				!FUNC_LIB_setMemBitOne ;
 900: 			}
 901: 			else {
 902: 				!FUNC_LIB_setMemBitZero ;
 903: 			}
 904: 			!VAR_USER_V !VAR_USER_V2 = ;
 905: 		}
 906: 		int !VAR_TEMP_temp190 ;
 907: 		!VAR_TEMP_temp190 1 = ;
 908: 		int !VAR_TEMP_temp285 ;
 909: 		int !VAR_TEMP_temp376 ;
 910: 		!VAR_TEMP_temp376 !VAR_USER_valIndex = ;
 911: 		!VAR_TEMP_temp376 !VAR_TEMP_temp190 !FUNC_LIB_add = !VAR_TEMP_temp285 ;
 912: 		!VAR_USER_valIndex !VAR_TEMP_temp285 = ;
 913: 	}
 914: 	int !VAR_USER_desiredBitIndex ;
 915: 	int !VAR_TEMP_temp191 ;
 916: 	!VAR_TEMP_temp191 1 = ;
 917: 	int !VAR_TEMP_temp192 ;
 918: 	!VAR_TEMP_temp192 2 = ;
 919: 	int !VAR_TEMP_temp193 ;
 920: 	int !VAR_TEMP_temp377 ;
 921: 	!VAR_TEMP_temp377 !VAR_USER_index = ;
 922: 	int !VAR_TEMP_temp378 ;
 923: 	!VAR_TEMP_temp378 !VAR_USER_valIndex = ;
 924: 	!VAR_TEMP_temp377 !VAR_TEMP_temp378 !FUNC_LIB_add = !VAR_TEMP_temp193 ;
 925: 	int !VAR_TEMP_temp194 ;
 926: 	int !VAR_TEMP_temp379 ;
 927: 	!VAR_TEMP_temp379 !VAR_USER_index = ;
 928: 	int !VAR_TEMP_temp380 ;
 929: 	!VAR_TEMP_temp380 !VAR_USER_valIndex = ;
 930: 	!VAR_TEMP_temp379 !VAR_TEMP_temp380 !FUNC_LIB_add = !VAR_TEMP_temp194 ;
 931: 	int !VAR_TEMP_temp195 ;
 932: 	!VAR_TEMP_temp194 !VAR_TEMP_temp191 !FUNC_LIB_add = !VAR_TEMP_temp195 ;
 933: 	int !VAR_TEMP_temp196 ;
 934: 	!VAR_TEMP_temp193 !VAR_TEMP_temp195 !FUNC_LIB_mul = !VAR_TEMP_temp196 ;
 935: 	int !VAR_TEMP_temp197 ;
 936: 	!VAR_TEMP_temp196 !VAR_TEMP_temp192 !FUNC_LIB_div = !VAR_TEMP_temp197 ;
 937: 	int !VAR_TEMP_temp198 ;
 938: 	int !VAR_TEMP_temp381 ;
 939: 	!VAR_TEMP_temp381 !VAR_USER_index = ;
 940: 	!VAR_TEMP_temp197 !VAR_TEMP_temp381 !FUNC_LIB_add = !VAR_TEMP_temp198 ;
 941: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp198 = ;
 942: 	while ( true ) {
 943: 		bool !VAR_TEMP_temp199 ;
 944: 		int !VAR_TEMP_temp382 ;
 945: 		!VAR_TEMP_temp382 !VAR_USER_currBitIndex = ;
 946: 		int !VAR_TEMP_temp383 ;
 947: 		!VAR_TEMP_temp383 !VAR_USER_desiredBitIndex = ;
 948: 		!VAR_TEMP_temp382 !VAR_TEMP_temp383 !FUNC_LIB_lt = !VAR_TEMP_temp199 ;
 949: 		bool !VAR_TEMP_temp200 ;
 950: 		!VAR_TEMP_temp199 ! = !VAR_TEMP_temp200 ;
 951: 		!VAR_TEMP_temp200 if {
 952: 			break ;
 953: 		}
 954: 		int !VAR_TEMP_temp201 ;
 955: 		!VAR_TEMP_temp201 1 = ;
 956: 		int !VAR_TEMP_temp284 ;
 957: 		int !VAR_TEMP_temp384 ;
 958: 		!VAR_TEMP_temp384 !VAR_USER_currBitIndex = ;
 959: 		!VAR_TEMP_temp384 !VAR_TEMP_temp201 !FUNC_LIB_add = !VAR_TEMP_temp284 ;
 960: 		!VAR_USER_currBitIndex !VAR_TEMP_temp284 = ;
 961: 		!FUNC_LIB_moveMemHeadRight ;
 962: 	}
 963: 	!FUNC_LIB_setMemBitBlank ;
 964: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
 965: 	return ;
 966: }
 967: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
 968: 	int !VAR_USER_ans ;
 969: 	int !VAR_TEMP_temp202 ;
 970: 	!VAR_TEMP_temp202 0 = ;
 971: 	!VAR_USER_ans !VAR_TEMP_temp202 = ;
 972: 	int !VAR_USER_currBitIndex ;
 973: 	int !VAR_TEMP_temp203 ;
 974: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp203 ;
 975: 	!VAR_USER_currBitIndex !VAR_TEMP_temp203 = ;
 976: 	int !VAR_USER_desiredBitIndex ;
 977: 	int !VAR_TEMP_temp204 ;
 978: 	!VAR_TEMP_temp204 1 = ;
 979: 	int !VAR_TEMP_temp205 ;
 980: 	!VAR_TEMP_temp205 2 = ;
 981: 	int !VAR_TEMP_temp206 ;
 982: 	int !VAR_TEMP_temp385 ;
 983: 	!VAR_TEMP_temp385 !VAR_USER_index = ;
 984: 	!VAR_TEMP_temp385 !VAR_TEMP_temp204 !FUNC_LIB_add = !VAR_TEMP_temp206 ;
 985: 	int !VAR_TEMP_temp207 ;
 986: 	int !VAR_TEMP_temp386 ;
 987: 	!VAR_TEMP_temp386 !VAR_USER_index = ;
 988: 	!VAR_TEMP_temp386 !VAR_TEMP_temp206 !FUNC_LIB_mul = !VAR_TEMP_temp207 ;
 989: 	int !VAR_TEMP_temp208 ;
 990: 	!VAR_TEMP_temp207 !VAR_TEMP_temp205 !FUNC_LIB_div = !VAR_TEMP_temp208 ;
 991: 	int !VAR_TEMP_temp209 ;
 992: 	int !VAR_TEMP_temp387 ;
 993: 	!VAR_TEMP_temp387 !VAR_USER_index = ;
 994: 	!VAR_TEMP_temp208 !VAR_TEMP_temp387 !FUNC_LIB_add = !VAR_TEMP_temp209 ;
 995: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp209 = ;
 996: 	!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
 997: 	while ( true ) {
 998: 		bool !VAR_TEMP_temp210 ;
 999: 		int !VAR_TEMP_temp388 ;
1000: 		!VAR_TEMP_temp388 !VAR_USER_currBitIndex = ;
1001: 		int !VAR_TEMP_temp389 ;
1002: 		!VAR_TEMP_temp389 !VAR_USER_desiredBitIndex = ;
1003: 		!VAR_TEMP_temp388 !VAR_TEMP_temp389 !FUNC_LIB_gt = !VAR_TEMP_temp210 ;
1004: 		bool !VAR_TEMP_temp211 ;
1005: 		!VAR_TEMP_temp210 ! = !VAR_TEMP_temp211 ;
1006: 		!VAR_TEMP_temp211 if {
1007: 			break ;
1008: 		}
1009: 		int !VAR_TEMP_temp212 ;
1010: 		!VAR_TEMP_temp212 1 = ;
1011: 		int !VAR_TEMP_temp283 ;
1012: 		int !VAR_TEMP_temp390 ;
1013: 		!VAR_TEMP_temp390 !VAR_USER_currBitIndex = ;
1014: 		!VAR_TEMP_temp390 !VAR_TEMP_temp212 !FUNC_LIB_sub = !VAR_TEMP_temp283 ;
1015: 		!VAR_USER_currBitIndex !VAR_TEMP_temp283 = ;
1016: 		!FUNC_LIB_moveMemHeadLeft ;
1017: 	}
1018: 	while ( true ) {
1019: 		bool !VAR_TEMP_temp213 ;
1020: 		int !VAR_TEMP_temp391 ;
1021: 		!VAR_TEMP_temp391 !VAR_USER_currBitIndex = ;
1022: 		int !VAR_TEMP_temp392 ;
1023: 		!VAR_TEMP_temp392 !VAR_USER_desiredBitIndex = ;
1024: 		!VAR_TEMP_temp391 !VAR_TEMP_temp392 !FUNC_LIB_lt = !VAR_TEMP_temp213 ;
1025: 		bool !VAR_TEMP_temp214 ;
1026: 		!VAR_TEMP_temp213 ! = !VAR_TEMP_temp214 ;
1027: 		!VAR_TEMP_temp214 if {
1028: 			break ;
1029: 		}
1030: 		int !VAR_TEMP_temp215 ;
1031: 		!VAR_TEMP_temp215 1 = ;
1032: 		int !VAR_TEMP_temp282 ;
1033: 		int !VAR_TEMP_temp393 ;
1034: 		!VAR_TEMP_temp393 !VAR_USER_currBitIndex = ;
1035: 		!VAR_TEMP_temp393 !VAR_TEMP_temp215 !FUNC_LIB_add = !VAR_TEMP_temp282 ;
1036: 		!VAR_USER_currBitIndex !VAR_TEMP_temp282 = ;
1037: 		!FUNC_LIB_moveMemHeadRight ;
1038: 	}
1039: 	int !VAR_USER_valIndex ;
1040: 	int !VAR_TEMP_temp216 ;
1041: 	!VAR_TEMP_temp216 0 = ;
1042: 	!VAR_USER_valIndex !VAR_TEMP_temp216 = ;
1043: 	bool !VAR_USER_shouldBeNegative ;
1044: 	bool !VAR_TEMP_temp217 ;
1045: 	!VAR_TEMP_temp217 false = ;
1046: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp217 = ;
1047: 	int !VAR_USER_pow2 ;
1048: 	int !VAR_TEMP_temp218 ;
1049: 	!VAR_TEMP_temp218 0 = ;
1050: 	!VAR_USER_pow2 !VAR_TEMP_temp218 = ;
1051: 	while ( true ) {
1052: 		bool !VAR_TEMP_temp219 ;
1053: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp219 ;
1054: 		bool !VAR_TEMP_temp220 ;
1055: 		!VAR_TEMP_temp219 ! = !VAR_TEMP_temp220 ;
1056: 		bool !VAR_TEMP_temp221 ;
1057: 		!VAR_TEMP_temp220 ! = !VAR_TEMP_temp221 ;
1058: 		!VAR_TEMP_temp221 if {
1059: 			break ;
1060: 		}
1061: 		bool !VAR_TEMP_temp222 ;
1062: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp222 ;
1063: 		!VAR_TEMP_temp222 if {
1064: 			int !VAR_TEMP_temp223 ;
1065: 			!VAR_TEMP_temp223 413 = ;
1066: 			!VAR_TEMP_temp223 !FUNC_LIB_printInt ;
1067: 			int !VAR_TEMP_temp224 ;
1068: 			!VAR_TEMP_temp224 413 = ;
1069: 			int !VAR_TEMP_temp225 ;
1070: 			!VAR_TEMP_temp224 !FUNC_LIB_neg = !VAR_TEMP_temp225 ;
1071: 			!VAR_TEMP_temp225 !FUNC_LIB_printInt ;
1072: 			bool !VAR_TEMP_temp226 ;
1073: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp226 ;
1074: 			!VAR_TEMP_temp226 if {
1075: 				int !VAR_TEMP_temp227 ;
1076: 				!VAR_TEMP_temp227 417 = ;
1077: 				!VAR_TEMP_temp227 !FUNC_LIB_printInt ;
1078: 				int !VAR_TEMP_temp228 ;
1079: 				!VAR_TEMP_temp228 417 = ;
1080: 				int !VAR_TEMP_temp229 ;
1081: 				!VAR_TEMP_temp228 !FUNC_LIB_neg = !VAR_TEMP_temp229 ;
1082: 				!VAR_TEMP_temp229 !FUNC_LIB_printInt ;
1083: 				bool !VAR_TEMP_temp230 ;
1084: 				!VAR_TEMP_temp230 true = ;
1085: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp230 = ;
1086: 			}
1087: 		}
1088: 		else {
1089: 			int !VAR_TEMP_temp231 ;
1090: 			!VAR_TEMP_temp231 423 = ;
1091: 			!VAR_TEMP_temp231 !FUNC_LIB_printInt ;
1092: 			int !VAR_TEMP_temp232 ;
1093: 			!VAR_TEMP_temp232 423 = ;
1094: 			int !VAR_TEMP_temp233 ;
1095: 			!VAR_TEMP_temp232 !FUNC_LIB_neg = !VAR_TEMP_temp233 ;
1096: 			!VAR_TEMP_temp233 !FUNC_LIB_printInt ;
1097: 			bool !VAR_TEMP_temp234 ;
1098: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp234 ;
1099: 			!VAR_TEMP_temp234 if {
1100: 				int !VAR_TEMP_temp281 ;
1101: 				int !VAR_TEMP_temp394 ;
1102: 				!VAR_TEMP_temp394 !VAR_USER_ans = ;
1103: 				int !VAR_TEMP_temp395 ;
1104: 				!VAR_TEMP_temp395 !VAR_USER_pow2 = ;
1105: 				!VAR_TEMP_temp394 !VAR_TEMP_temp395 !FUNC_LIB_add = !VAR_TEMP_temp281 ;
1106: 				!VAR_USER_ans !VAR_TEMP_temp281 = ;
1107: 				int !VAR_TEMP_temp235 ;
1108: 				!VAR_TEMP_temp235 37 = ;
1109: 				!VAR_TEMP_temp235 !FUNC_LIB_printInt ;
1110: 				!VAR_USER_ans !FUNC_LIB_printInt ;
1111: 				int !VAR_TEMP_temp236 ;
1112: 				!VAR_TEMP_temp236 37 = ;
1113: 				int !VAR_TEMP_temp237 ;
1114: 				!VAR_TEMP_temp236 !FUNC_LIB_neg = !VAR_TEMP_temp237 ;
1115: 				!VAR_TEMP_temp237 !FUNC_LIB_printInt ;
1116: 			}
1117: 			else {
1118: 				int !VAR_TEMP_temp238 ;
1119: 				!VAR_TEMP_temp238 8999 = ;
1120: 				!VAR_TEMP_temp238 !FUNC_LIB_printInt ;
1121: 				bool !VAR_TEMP_temp239 ;
1122: 				!FUNC_LIB_memBitIsZero = !VAR_TEMP_temp239 ;
1123: 				!VAR_TEMP_temp239 if {
1124: 					int !VAR_TEMP_temp240 ;
1125: 					!VAR_TEMP_temp240 9000 = ;
1126: 					!VAR_TEMP_temp240 !FUNC_LIB_printInt ;
1127: 				}
1128: 				else {
1129: 					int !VAR_TEMP_temp241 ;
1130: 					!VAR_TEMP_temp241 9000 = ;
1131: 					int !VAR_TEMP_temp242 ;
1132: 					!VAR_TEMP_temp241 !FUNC_LIB_neg = !VAR_TEMP_temp242 ;
1133: 					!VAR_TEMP_temp242 !FUNC_LIB_printInt ;
1134: 				}
1135: 				bool !VAR_TEMP_temp243 ;
1136: 				!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp243 ;
1137: 				!VAR_TEMP_temp243 if {
1138: 					int !VAR_TEMP_temp244 ;
1139: 					!VAR_TEMP_temp244 9001 = ;
1140: 					!VAR_TEMP_temp244 !FUNC_LIB_printInt ;
1141: 				}
1142: 				else {
1143: 					int !VAR_TEMP_temp245 ;
1144: 					!VAR_TEMP_temp245 9001 = ;
1145: 					int !VAR_TEMP_temp246 ;
1146: 					!VAR_TEMP_temp245 !FUNC_LIB_neg = !VAR_TEMP_temp246 ;
1147: 					!VAR_TEMP_temp246 !FUNC_LIB_printInt ;
1148: 				}
1149: 				bool !VAR_TEMP_temp247 ;
1150: 				!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp247 ;
1151: 				!VAR_TEMP_temp247 if {
1152: 					int !VAR_TEMP_temp248 ;
1153: 					!VAR_TEMP_temp248 9002 = ;
1154: 					!VAR_TEMP_temp248 !FUNC_LIB_printInt ;
1155: 				}
1156: 				else {
1157: 					int !VAR_TEMP_temp249 ;
1158: 					!VAR_TEMP_temp249 9002 = ;
1159: 					int !VAR_TEMP_temp250 ;
1160: 					!VAR_TEMP_temp249 !FUNC_LIB_neg = !VAR_TEMP_temp250 ;
1161: 					!VAR_TEMP_temp250 !FUNC_LIB_printInt ;
1162: 				}
1163: 				int !VAR_TEMP_temp251 ;
1164: 				!VAR_TEMP_temp251 8999 = ;
1165: 				int !VAR_TEMP_temp252 ;
1166: 				!VAR_TEMP_temp251 !FUNC_LIB_neg = !VAR_TEMP_temp252 ;
1167: 				!VAR_TEMP_temp252 !FUNC_LIB_printInt ;
1168: 			}
1169: 		}
1170: 		int !VAR_TEMP_temp253 ;
1171: 		!VAR_TEMP_temp253 1 = ;
1172: 		int !VAR_TEMP_temp280 ;
1173: 		int !VAR_TEMP_temp396 ;
1174: 		!VAR_TEMP_temp396 !VAR_USER_valIndex = ;
1175: 		!VAR_TEMP_temp396 !VAR_TEMP_temp253 !FUNC_LIB_add = !VAR_TEMP_temp280 ;
1176: 		!VAR_USER_valIndex !VAR_TEMP_temp280 = ;
1177: 		bool !VAR_TEMP_temp254 ;
1178: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp254 ;
1179: 		!VAR_TEMP_temp254 if {
1180: 			int !VAR_TEMP_temp255 ;
1181: 			!VAR_TEMP_temp255 1 = ;
1182: 			!VAR_USER_pow2 !VAR_TEMP_temp255 = ;
1183: 		}
1184: 		else {
1185: 			int !VAR_TEMP_temp279 ;
1186: 			int !VAR_TEMP_temp397 ;
1187: 			!VAR_TEMP_temp397 !VAR_USER_pow2 = ;
1188: 			int !VAR_TEMP_temp398 ;
1189: 			!VAR_TEMP_temp398 !VAR_USER_pow2 = ;
1190: 			!VAR_TEMP_temp397 !VAR_TEMP_temp398 !FUNC_LIB_add = !VAR_TEMP_temp279 ;
1191: 			!VAR_USER_pow2 !VAR_TEMP_temp279 = ;
1192: 		}
1193: 		int !VAR_TEMP_temp256 ;
1194: 		!VAR_TEMP_temp256 1 = ;
1195: 		int !VAR_TEMP_temp257 ;
1196: 		!VAR_TEMP_temp257 2 = ;
1197: 		int !VAR_TEMP_temp258 ;
1198: 		int !VAR_TEMP_temp399 ;
1199: 		!VAR_TEMP_temp399 !VAR_USER_index = ;
1200: 		int !VAR_TEMP_temp400 ;
1201: 		!VAR_TEMP_temp400 !VAR_USER_valIndex = ;
1202: 		!VAR_TEMP_temp399 !VAR_TEMP_temp400 !FUNC_LIB_add = !VAR_TEMP_temp258 ;
1203: 		int !VAR_TEMP_temp259 ;
1204: 		int !VAR_TEMP_temp401 ;
1205: 		!VAR_TEMP_temp401 !VAR_USER_index = ;
1206: 		int !VAR_TEMP_temp402 ;
1207: 		!VAR_TEMP_temp402 !VAR_USER_valIndex = ;
1208: 		!VAR_TEMP_temp401 !VAR_TEMP_temp402 !FUNC_LIB_add = !VAR_TEMP_temp259 ;
1209: 		int !VAR_TEMP_temp260 ;
1210: 		!VAR_TEMP_temp259 !VAR_TEMP_temp256 !FUNC_LIB_add = !VAR_TEMP_temp260 ;
1211: 		int !VAR_TEMP_temp261 ;
1212: 		!VAR_TEMP_temp258 !VAR_TEMP_temp260 !FUNC_LIB_mul = !VAR_TEMP_temp261 ;
1213: 		int !VAR_TEMP_temp262 ;
1214: 		!VAR_TEMP_temp261 !VAR_TEMP_temp257 !FUNC_LIB_div = !VAR_TEMP_temp262 ;
1215: 		int !VAR_TEMP_temp263 ;
1216: 		int !VAR_TEMP_temp403 ;
1217: 		!VAR_TEMP_temp403 !VAR_USER_index = ;
1218: 		!VAR_TEMP_temp262 !VAR_TEMP_temp403 !FUNC_LIB_add = !VAR_TEMP_temp263 ;
1219: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp263 = ;
1220: 		int !VAR_TEMP_temp264 ;
1221: 		!VAR_TEMP_temp264 100 = ;
1222: 		!VAR_TEMP_temp264 !FUNC_LIB_printInt ;
1223: 		!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
1224: 		int !VAR_TEMP_temp265 ;
1225: 		!VAR_TEMP_temp265 100 = ;
1226: 		int !VAR_TEMP_temp266 ;
1227: 		!VAR_TEMP_temp265 !FUNC_LIB_neg = !VAR_TEMP_temp266 ;
1228: 		!VAR_TEMP_temp266 !FUNC_LIB_printInt ;
1229: 		while ( true ) {
1230: 			bool !VAR_TEMP_temp267 ;
1231: 			int !VAR_TEMP_temp404 ;
1232: 			!VAR_TEMP_temp404 !VAR_USER_currBitIndex = ;
1233: 			int !VAR_TEMP_temp405 ;
1234: 			!VAR_TEMP_temp405 !VAR_USER_desiredBitIndex = ;
1235: 			!VAR_TEMP_temp404 !VAR_TEMP_temp405 !FUNC_LIB_lt = !VAR_TEMP_temp267 ;
1236: 			bool !VAR_TEMP_temp268 ;
1237: 			!VAR_TEMP_temp267 ! = !VAR_TEMP_temp268 ;
1238: 			!VAR_TEMP_temp268 if {
1239: 				break ;
1240: 			}
1241: 			int !VAR_TEMP_temp269 ;
1242: 			!VAR_TEMP_temp269 1 = ;
1243: 			int !VAR_TEMP_temp278 ;
1244: 			int !VAR_TEMP_temp406 ;
1245: 			!VAR_TEMP_temp406 !VAR_USER_currBitIndex = ;
1246: 			!VAR_TEMP_temp406 !VAR_TEMP_temp269 !FUNC_LIB_add = !VAR_TEMP_temp278 ;
1247: 			!VAR_USER_currBitIndex !VAR_TEMP_temp278 = ;
1248: 			!FUNC_LIB_moveMemHeadRight ;
1249: 		}
1250: 	}
1251: 	!VAR_USER_shouldBeNegative if {
1252: 		int !VAR_TEMP_temp270 ;
1253: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp270 ;
1254: 		!VAR_USER_ans !VAR_TEMP_temp270 = ;
1255: 	}
1256: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
1257: 	!VAR_USER_ans return ;
1258: }
1259: void !FUNC_USER_what ( int !VAR_USER_x ) {
1260: 	return ;
1261: }
1262: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
1263: 	int !VAR_USER_temp ;
1264: 	int !VAR_TEMP_temp271 ;
1265: 	int !VAR_TEMP_temp407 ;
1266: 	!VAR_TEMP_temp407 !VAR_USER_a = ;
1267: 	int !VAR_TEMP_temp408 ;
1268: 	!VAR_TEMP_temp408 !VAR_USER_b = ;
1269: 	!VAR_TEMP_temp407 !VAR_TEMP_temp408 !FUNC_LIB_mul = !VAR_TEMP_temp271 ;
1270: 	int !VAR_TEMP_temp272 ;
1271: 	int !VAR_TEMP_temp409 ;
1272: 	!VAR_TEMP_temp409 !VAR_USER_c = ;
1273: 	!VAR_TEMP_temp271 !VAR_TEMP_temp409 !FUNC_LIB_div = !VAR_TEMP_temp272 ;
1274: 	!VAR_USER_temp !VAR_TEMP_temp272 = ;
1275: 	int !VAR_USER_x ;
1276: 	int !VAR_TEMP_temp273 ;
1277: 	!VAR_TEMP_temp273 1 = ;
1278: 	int !VAR_TEMP_temp274 ;
1279: 	!VAR_TEMP_temp273 !FUNC_LIB_neg = !VAR_TEMP_temp274 ;
1280: 	int !VAR_TEMP_temp275 ;
1281: 	int !VAR_TEMP_temp410 ;
1282: 	!VAR_TEMP_temp410 !VAR_USER_a = ;
1283: 	!VAR_TEMP_temp410 !VAR_TEMP_temp274 !FUNC_LIB_sub = !VAR_TEMP_temp275 ;
1284: 	!VAR_USER_x !VAR_TEMP_temp275 = ;
1285: 	!VAR_USER_temp return ;
1286: }
1287: int !FUNC_USER_main ( ) {
1288: 	int !VAR_TEMP_temp276 ;
1289: 	!VAR_TEMP_temp276 3 = ;
1290: 	bool !VAR_TEMP_temp277 ;
1291: 	!VAR_TEMP_temp276 !VAR_LIB_MEM = !VAR_TEMP_temp277 ;
1292: 	!VAR_TEMP_temp277 return ;
1293: }

after convertMemoryAccess
   0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
   1: 	bool !VAR_TEMP_temp0 ;
   2: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
   3: 	!VAR_TEMP_temp0 if {
   4: 		!VAR_USER_y return ;
   5: 	}
   6: 	bool !VAR_TEMP_temp1 ;
   7: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ;
   8: 	!VAR_TEMP_temp1 if {
   9: 		!VAR_USER_x return ;
  10: 	}
  11: 	bool !VAR_TEMP_temp2 ;
  12: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp2 ;
  13: 	!VAR_TEMP_temp2 if {
  14: 		bool !VAR_TEMP_temp3 ;
  15: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp3 ;
  16: 		bool !VAR_TEMP_temp4 ;
  17: 		!VAR_TEMP_temp4 !VAR_TEMP_temp3 = ;
  18: 	}
  19: 	else {
  20: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 = ;
  21: 	}
  22: 	!VAR_TEMP_temp4 if {
  23: 		int !VAR_TEMP_temp5 ;
  24: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp5 ;
  25: 		bool !VAR_TEMP_temp6 ;
  26: 		int !VAR_TEMP_temp294 ;
  27: 		!VAR_TEMP_temp294 !VAR_USER_y = ;
  28: 		!VAR_TEMP_temp5 !VAR_TEMP_temp294 !FUNC_LIB_eq = !VAR_TEMP_temp6 ;
  29: 		!VAR_TEMP_temp6 if {
  30: 			int !VAR_TEMP_temp7 ;
  31: 			!VAR_TEMP_temp7 0 = ;
  32: 			!VAR_TEMP_temp7 return ;
  33: 		}
  34: 		else {
  35: 			int !VAR_TEMP_temp8 ;
  36: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp8 ;
  37: 			bool !VAR_TEMP_temp9 ;
  38: 			int !VAR_TEMP_temp295 ;
  39: 			!VAR_TEMP_temp295 !VAR_USER_y = ;
  40: 			!VAR_TEMP_temp8 !VAR_TEMP_temp295 !FUNC_LIB_lt = !VAR_TEMP_temp9 ;
  41: 			!VAR_TEMP_temp9 if {
  42: 				int !VAR_TEMP_temp10 ;
  43: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp10 ;
  44: 				bool !VAR_TEMP_temp11 ;
  45: 				int !VAR_TEMP_temp296 ;
  46: 				!VAR_TEMP_temp296 !VAR_USER_y = ;
  47: 				!VAR_TEMP_temp296 !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ;
  48: 				!VAR_TEMP_temp11 return ;
  49: 			}
  50: 			else {
  51: 				int !VAR_TEMP_temp12 ;
  52: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp12 ;
  53: 				int !VAR_TEMP_temp13 ;
  54: 				int !VAR_TEMP_temp297 ;
  55: 				!VAR_TEMP_temp297 !VAR_USER_y = ;
  56: 				!VAR_TEMP_temp12 !VAR_TEMP_temp297 !FUNC_LIB_basic_sub = !VAR_TEMP_temp13 ;
  57: 				bool !VAR_TEMP_temp14 ;
  58: 				!VAR_TEMP_temp13 !FUNC_LIB_neg = !VAR_TEMP_temp14 ;
  59: 				!VAR_TEMP_temp14 return ;
  60: 			}
  61: 		}
  62: 	}
  63: 	else {
  64: 		bool !VAR_TEMP_temp15 ;
  65: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp15 ;
  66: 		!VAR_TEMP_temp15 if {
  67: 			bool !VAR_TEMP_temp16 ;
  68: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp16 ;
  69: 			bool !VAR_TEMP_temp17 ;
  70: 			!VAR_TEMP_temp17 !VAR_TEMP_temp16 = ;
  71: 		}
  72: 		else {
  73: 			!VAR_TEMP_temp17 !VAR_TEMP_temp15 = ;
  74: 		}
  75: 		!VAR_TEMP_temp17 if {
  76: 			int !VAR_TEMP_temp18 ;
  77: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp18 ;
  78: 			bool !VAR_TEMP_temp19 ;
  79: 			int !VAR_TEMP_temp298 ;
  80: 			!VAR_TEMP_temp298 !VAR_USER_x = ;
  81: 			!VAR_TEMP_temp18 !VAR_TEMP_temp298 !FUNC_LIB_eq = !VAR_TEMP_temp19 ;
  82: 			!VAR_TEMP_temp19 if {
  83: 				int !VAR_TEMP_temp20 ;
  84: 				!VAR_TEMP_temp20 0 = ;
  85: 				!VAR_TEMP_temp20 return ;
  86: 			}
  87: 			else {
  88: 				int !VAR_TEMP_temp21 ;
  89: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp21 ;
  90: 				bool !VAR_TEMP_temp22 ;
  91: 				int !VAR_TEMP_temp299 ;
  92: 				!VAR_TEMP_temp299 !VAR_USER_x = ;
  93: 				!VAR_TEMP_temp21 !VAR_TEMP_temp299 !FUNC_LIB_lt = !VAR_TEMP_temp22 ;
  94: 				!VAR_TEMP_temp22 if {
  95: 					int !VAR_TEMP_temp23 ;
  96: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp23 ;
  97: 					bool !VAR_TEMP_temp24 ;
  98: 					int !VAR_TEMP_temp300 ;
  99: 					!VAR_TEMP_temp300 !VAR_USER_x = ;
 100: 					!VAR_TEMP_temp300 !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ;
 101: 					!VAR_TEMP_temp24 return ;
 102: 				}
 103: 				else {
 104: 					int !VAR_TEMP_temp25 ;
 105: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp25 ;
 106: 					int !VAR_TEMP_temp26 ;
 107: 					int !VAR_TEMP_temp301 ;
 108: 					!VAR_TEMP_temp301 !VAR_USER_x = ;
 109: 					!VAR_TEMP_temp25 !VAR_TEMP_temp301 !FUNC_LIB_basic_sub = !VAR_TEMP_temp26 ;
 110: 					bool !VAR_TEMP_temp27 ;
 111: 					!VAR_TEMP_temp26 !FUNC_LIB_neg = !VAR_TEMP_temp27 ;
 112: 					!VAR_TEMP_temp27 return ;
 113: 				}
 114: 			}
 115: 		}
 116: 		else {
 117: 			bool !VAR_TEMP_temp28 ;
 118: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp28 ;
 119: 			!VAR_TEMP_temp28 if {
 120: 				bool !VAR_TEMP_temp29 ;
 121: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp29 ;
 122: 				bool !VAR_TEMP_temp30 ;
 123: 				!VAR_TEMP_temp30 !VAR_TEMP_temp29 = ;
 124: 			}
 125: 			else {
 126: 				!VAR_TEMP_temp30 !VAR_TEMP_temp28 = ;
 127: 			}
 128: 			!VAR_TEMP_temp30 if {
 129: 				int !VAR_TEMP_temp31 ;
 130: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp31 ;
 131: 				int !VAR_TEMP_temp32 ;
 132: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp32 ;
 133: 				int !VAR_TEMP_temp33 ;
 134: 				!VAR_TEMP_temp31 !VAR_TEMP_temp32 !FUNC_LIB_basic_add = !VAR_TEMP_temp33 ;
 135: 				bool !VAR_TEMP_temp34 ;
 136: 				!VAR_TEMP_temp33 !FUNC_LIB_neg = !VAR_TEMP_temp34 ;
 137: 				!VAR_TEMP_temp34 return ;
 138: 			}
 139: 			else {
 140: 				bool !VAR_TEMP_temp35 ;
 141: 				int !VAR_TEMP_temp302 ;
 142: 				!VAR_TEMP_temp302 !VAR_USER_x = ;
 143: 				int !VAR_TEMP_temp303 ;
 144: 				!VAR_TEMP_temp303 !VAR_USER_y = ;
 145: 				!VAR_TEMP_temp302 !VAR_TEMP_temp303 !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ;
 146: 				!VAR_TEMP_temp35 return ;
 147: 			}
 148: 		}
 149: 	}
 150: }
 151: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
 152: 	bool !VAR_TEMP_temp36 ;
 153: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ;
 154: 	!VAR_TEMP_temp36 if {
 155: 		bool !VAR_TEMP_temp37 ;
 156: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp37 ;
 157: 		!VAR_TEMP_temp37 return ;
 158: 	}
 159: 	bool !VAR_TEMP_temp38 ;
 160: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ;
 161: 	!VAR_TEMP_temp38 if {
 162: 		!VAR_USER_x return ;
 163: 	}
 164: 	bool !VAR_TEMP_temp39 ;
 165: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp39 ;
 166: 	!VAR_TEMP_temp39 if {
 167: 		bool !VAR_TEMP_temp40 ;
 168: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp40 ;
 169: 		bool !VAR_TEMP_temp41 ;
 170: 		!VAR_TEMP_temp41 !VAR_TEMP_temp40 = ;
 171: 	}
 172: 	else {
 173: 		!VAR_TEMP_temp41 !VAR_TEMP_temp39 = ;
 174: 	}
 175: 	!VAR_TEMP_temp41 if {
 176: 		int !VAR_TEMP_temp42 ;
 177: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp42 ;
 178: 		bool !VAR_TEMP_temp43 ;
 179: 		int !VAR_TEMP_temp304 ;
 180: 		!VAR_TEMP_temp304 !VAR_USER_x = ;
 181: 		!VAR_TEMP_temp304 !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ;
 182: 		!VAR_TEMP_temp43 return ;
 183: 	}
 184: 	else {
 185: 		bool !VAR_TEMP_temp44 ;
 186: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp44 ;
 187: 		!VAR_TEMP_temp44 if {
 188: 			bool !VAR_TEMP_temp45 ;
 189: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp45 ;
 190: 			bool !VAR_TEMP_temp46 ;
 191: 			!VAR_TEMP_temp46 !VAR_TEMP_temp45 = ;
 192: 		}
 193: 		else {
 194: 			!VAR_TEMP_temp46 !VAR_TEMP_temp44 = ;
 195: 		}
 196: 		!VAR_TEMP_temp46 if {
 197: 			int !VAR_TEMP_temp47 ;
 198: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp47 ;
 199: 			int !VAR_TEMP_temp48 ;
 200: 			int !VAR_TEMP_temp305 ;
 201: 			!VAR_TEMP_temp305 !VAR_USER_y = ;
 202: 			!VAR_TEMP_temp47 !VAR_TEMP_temp305 !FUNC_LIB_basic_add = !VAR_TEMP_temp48 ;
 203: 			bool !VAR_TEMP_temp49 ;
 204: 			!VAR_TEMP_temp48 !FUNC_LIB_neg = !VAR_TEMP_temp49 ;
 205: 			!VAR_TEMP_temp49 return ;
 206: 		}
 207: 		else {
 208: 			bool !VAR_TEMP_temp50 ;
 209: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp50 ;
 210: 			!VAR_TEMP_temp50 if {
 211: 				bool !VAR_TEMP_temp51 ;
 212: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp51 ;
 213: 				bool !VAR_TEMP_temp52 ;
 214: 				!VAR_TEMP_temp52 !VAR_TEMP_temp51 = ;
 215: 			}
 216: 			else {
 217: 				!VAR_TEMP_temp52 !VAR_TEMP_temp50 = ;
 218: 			}
 219: 			!VAR_TEMP_temp52 if {
 220: 				int !VAR_TEMP_temp53 ;
 221: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp53 ;
 222: 				bool !VAR_TEMP_temp54 ;
 223: 				int !VAR_TEMP_temp306 ;
 224: 				!VAR_TEMP_temp306 !VAR_USER_x = ;
 225: 				!VAR_TEMP_temp306 !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ;
 226: 				!VAR_TEMP_temp54 return ;
 227: 			}
 228: 			else {
 229: 				int !VAR_TEMP_temp55 ;
 230: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp55 ;
 231: 				bool !VAR_TEMP_temp56 ;
 232: 				int !VAR_TEMP_temp307 ;
 233: 				!VAR_TEMP_temp307 !VAR_USER_x = ;
 234: 				!VAR_TEMP_temp307 !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ;
 235: 				!VAR_TEMP_temp56 return ;
 236: 			}
 237: 		}
 238: 	}
 239: }
 240: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
 241: 	bool !VAR_TEMP_temp57 ;
 242: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp57 ;
 243: 	!VAR_TEMP_temp57 if {
 244: 		!VAR_TEMP_temp59 !VAR_TEMP_temp57 = ;
 245: 	}
 246: 	else {
 247: 		bool !VAR_TEMP_temp58 ;
 248: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp58 ;
 249: 		bool !VAR_TEMP_temp59 ;
 250: 		!VAR_TEMP_temp59 !VAR_TEMP_temp58 = ;
 251: 	}
 252: 	!VAR_TEMP_temp59 if {
 253: 		int !VAR_TEMP_temp60 ;
 254: 		!VAR_TEMP_temp60 0 = ;
 255: 		!VAR_TEMP_temp60 return ;
 256: 	}
 257: 	bool !VAR_USER_ansNeg ;
 258: 	bool !VAR_TEMP_temp61 ;
 259: 	!VAR_TEMP_temp61 false = ;
 260: 	!VAR_USER_ansNeg !VAR_TEMP_temp61 = ;
 261: 	bool !VAR_TEMP_temp62 ;
 262: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ;
 263: 	!VAR_TEMP_temp62 if {
 264: 		int !VAR_TEMP_temp63 ;
 265: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp63 ;
 266: 		!VAR_USER_x !VAR_TEMP_temp63 = ;
 267: 		bool !VAR_TEMP_temp64 ;
 268: 		!VAR_TEMP_temp64 true = ;
 269: 		!VAR_USER_ansNeg !VAR_TEMP_temp64 = ;
 270: 	}
 271: 	bool !VAR_TEMP_temp65 ;
 272: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ;
 273: 	!VAR_TEMP_temp65 if {
 274: 		int !VAR_TEMP_temp66 ;
 275: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp66 ;
 276: 		!VAR_USER_y !VAR_TEMP_temp66 = ;
 277: 		bool !VAR_TEMP_temp67 ;
 278: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp67 ;
 279: 		!VAR_USER_ansNeg !VAR_TEMP_temp67 = ;
 280: 	}
 281: 	int !VAR_USER_ans ;
 282: 	int !VAR_TEMP_temp68 ;
 283: 	!VAR_TEMP_temp68 0 = ;
 284: 	!VAR_USER_ans !VAR_TEMP_temp68 = ;
 285: 	int !VAR_USER_y0 ;
 286: 	!VAR_USER_y0 !VAR_USER_y = ;
 287: 	while ( true ) {
 288: 		int !VAR_TEMP_temp69 ;
 289: 		!VAR_TEMP_temp69 0 = ;
 290: 		bool !VAR_TEMP_temp70 ;
 291: 		int !VAR_TEMP_temp308 ;
 292: 		!VAR_TEMP_temp308 !VAR_USER_y0 = ;
 293: 		!VAR_TEMP_temp308 !VAR_TEMP_temp69 !FUNC_LIB_gt = !VAR_TEMP_temp70 ;
 294: 		bool !VAR_TEMP_temp71 ;
 295: 		!VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ;
 296: 		!VAR_TEMP_temp71 if {
 297: 			break ;
 298: 		}
 299: 		int !VAR_USER_y1 ;
 300: 		int !VAR_TEMP_temp72 ;
 301: 		!VAR_TEMP_temp72 1 = ;
 302: 		!VAR_USER_y1 !VAR_TEMP_temp72 = ;
 303: 		int !VAR_USER_y2 ;
 304: 		int !VAR_TEMP_temp73 ;
 305: 		!VAR_TEMP_temp73 2 = ;
 306: 		!VAR_USER_y2 !VAR_TEMP_temp73 = ;
 307: 		int !VAR_USER_val1 ;
 308: 		!VAR_USER_val1 !VAR_USER_x = ;
 309: 		int !VAR_USER_val2 ;
 310: 		int !VAR_TEMP_temp74 ;
 311: 		int !VAR_TEMP_temp309 ;
 312: 		!VAR_TEMP_temp309 !VAR_USER_x = ;
 313: 		int !VAR_TEMP_temp310 ;
 314: 		!VAR_TEMP_temp310 !VAR_USER_x = ;
 315: 		!VAR_TEMP_temp309 !VAR_TEMP_temp310 !FUNC_LIB_add = !VAR_TEMP_temp74 ;
 316: 		!VAR_USER_val2 !VAR_TEMP_temp74 = ;
 317: 		while ( true ) {
 318: 			bool !VAR_TEMP_temp75 ;
 319: 			int !VAR_TEMP_temp311 ;
 320: 			!VAR_TEMP_temp311 !VAR_USER_val2 = ;
 321: 			int !VAR_TEMP_temp312 ;
 322: 			!VAR_TEMP_temp312 !VAR_USER_y0 = ;
 323: 			!VAR_TEMP_temp311 !VAR_TEMP_temp312 !FUNC_LIB_leq = !VAR_TEMP_temp75 ;
 324: 			bool !VAR_TEMP_temp76 ;
 325: 			!VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ;
 326: 			!VAR_TEMP_temp76 if {
 327: 				break ;
 328: 			}
 329: 			!VAR_USER_y1 !VAR_USER_y2 = ;
 330: 			!VAR_USER_val1 !VAR_USER_val2 = ;
 331: 			int !VAR_TEMP_temp293 ;
 332: 			int !VAR_TEMP_temp313 ;
 333: 			!VAR_TEMP_temp313 !VAR_USER_y2 = ;
 334: 			int !VAR_TEMP_temp314 ;
 335: 			!VAR_TEMP_temp314 !VAR_USER_y2 = ;
 336: 			!VAR_TEMP_temp313 !VAR_TEMP_temp314 !FUNC_LIB_add = !VAR_TEMP_temp293 ;
 337: 			!VAR_USER_y2 !VAR_TEMP_temp293 = ;
 338: 			int !VAR_TEMP_temp292 ;
 339: 			int !VAR_TEMP_temp315 ;
 340: 			!VAR_TEMP_temp315 !VAR_USER_val2 = ;
 341: 			int !VAR_TEMP_temp316 ;
 342: 			!VAR_TEMP_temp316 !VAR_USER_val2 = ;
 343: 			!VAR_TEMP_temp315 !VAR_TEMP_temp316 !FUNC_LIB_add = !VAR_TEMP_temp292 ;
 344: 			!VAR_USER_val2 !VAR_TEMP_temp292 = ;
 345: 		}
 346: 		int !VAR_TEMP_temp291 ;
 347: 		int !VAR_TEMP_temp317 ;
 348: 		!VAR_TEMP_temp317 !VAR_USER_ans = ;
 349: 		int !VAR_TEMP_temp318 ;
 350: 		!VAR_TEMP_temp318 !VAR_USER_val1 = ;
 351: 		!VAR_TEMP_temp317 !VAR_TEMP_temp318 !FUNC_LIB_add = !VAR_TEMP_temp291 ;
 352: 		!VAR_USER_ans !VAR_TEMP_temp291 = ;
 353: 		int !VAR_TEMP_temp290 ;
 354: 		int !VAR_TEMP_temp319 ;
 355: 		!VAR_TEMP_temp319 !VAR_USER_y0 = ;
 356: 		int !VAR_TEMP_temp320 ;
 357: 		!VAR_TEMP_temp320 !VAR_USER_y1 = ;
 358: 		!VAR_TEMP_temp319 !VAR_TEMP_temp320 !FUNC_LIB_sub = !VAR_TEMP_temp290 ;
 359: 		!VAR_USER_y0 !VAR_TEMP_temp290 = ;
 360: 	}
 361: 	!VAR_USER_ansNeg if {
 362: 		int !VAR_TEMP_temp77 ;
 363: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp77 ;
 364: 		!VAR_USER_ans !VAR_TEMP_temp77 = ;
 365: 	}
 366: 	!VAR_USER_ans return ;
 367: }
 368: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
 369: 	bool !VAR_TEMP_temp78 ;
 370: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ;
 371: 	!VAR_TEMP_temp78 if {
 372: 		int !VAR_TEMP_temp79 ;
 373: 		!VAR_TEMP_temp79 0 = ;
 374: 		!VAR_TEMP_temp79 return ;
 375: 	}
 376: 	int !VAR_TEMP_temp80 ;
 377: 	!VAR_TEMP_temp80 0 = ;
 378: 	int !VAR_TEMP_temp81 ;
 379: 	!VAR_TEMP_temp81 0 = ;
 380: 	bool !VAR_TEMP_temp82 ;
 381: 	int !VAR_TEMP_temp321 ;
 382: 	!VAR_TEMP_temp321 !VAR_USER_x = ;
 383: 	!VAR_TEMP_temp321 !VAR_TEMP_temp80 !FUNC_LIB_lt = !VAR_TEMP_temp82 ;
 384: 	!VAR_TEMP_temp82 if {
 385: 		bool !VAR_TEMP_temp83 ;
 386: 		int !VAR_TEMP_temp322 ;
 387: 		!VAR_TEMP_temp322 !VAR_USER_y = ;
 388: 		!VAR_TEMP_temp322 !VAR_TEMP_temp81 !FUNC_LIB_lt = !VAR_TEMP_temp83 ;
 389: 		bool !VAR_TEMP_temp84 ;
 390: 		!VAR_TEMP_temp84 !VAR_TEMP_temp83 = ;
 391: 	}
 392: 	else {
 393: 		!VAR_TEMP_temp84 !VAR_TEMP_temp82 = ;
 394: 	}
 395: 	!VAR_TEMP_temp84 if {
 396: 		int !VAR_TEMP_temp85 ;
 397: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp85 ;
 398: 		int !VAR_TEMP_temp86 ;
 399: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp86 ;
 400: 		bool !VAR_TEMP_temp87 ;
 401: 		!VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ;
 402: 		!VAR_TEMP_temp87 return ;
 403: 	}
 404: 	int !VAR_TEMP_temp88 ;
 405: 	!VAR_TEMP_temp88 0 = ;
 406: 	bool !VAR_TEMP_temp89 ;
 407: 	int !VAR_TEMP_temp323 ;
 408: 	!VAR_TEMP_temp323 !VAR_USER_x = ;
 409: 	!VAR_TEMP_temp323 !VAR_TEMP_temp88 !FUNC_LIB_lt = !VAR_TEMP_temp89 ;
 410: 	!VAR_TEMP_temp89 if {
 411: 		int !VAR_TEMP_temp90 ;
 412: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp90 ;
 413: 		int !VAR_TEMP_temp91 ;
 414: 		int !VAR_TEMP_temp324 ;
 415: 		!VAR_TEMP_temp324 !VAR_USER_y = ;
 416: 		!VAR_TEMP_temp90 !VAR_TEMP_temp324 !FUNC_LIB_div = !VAR_TEMP_temp91 ;
 417: 		bool !VAR_TEMP_temp92 ;
 418: 		!VAR_TEMP_temp91 !FUNC_LIB_neg = !VAR_TEMP_temp92 ;
 419: 		!VAR_TEMP_temp92 return ;
 420: 	}
 421: 	int !VAR_TEMP_temp93 ;
 422: 	!VAR_TEMP_temp93 0 = ;
 423: 	bool !VAR_TEMP_temp94 ;
 424: 	int !VAR_TEMP_temp325 ;
 425: 	!VAR_TEMP_temp325 !VAR_USER_y = ;
 426: 	!VAR_TEMP_temp325 !VAR_TEMP_temp93 !FUNC_LIB_lt = !VAR_TEMP_temp94 ;
 427: 	!VAR_TEMP_temp94 if {
 428: 		int !VAR_TEMP_temp95 ;
 429: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp95 ;
 430: 		int !VAR_TEMP_temp96 ;
 431: 		int !VAR_TEMP_temp326 ;
 432: 		!VAR_TEMP_temp326 !VAR_USER_x = ;
 433: 		!VAR_TEMP_temp326 !VAR_TEMP_temp95 !FUNC_LIB_div = !VAR_TEMP_temp96 ;
 434: 		bool !VAR_TEMP_temp97 ;
 435: 		!VAR_TEMP_temp96 !FUNC_LIB_neg = !VAR_TEMP_temp97 ;
 436: 		!VAR_TEMP_temp97 return ;
 437: 	}
 438: 	int !VAR_USER_ans ;
 439: 	int !VAR_TEMP_temp98 ;
 440: 	!VAR_TEMP_temp98 0 = ;
 441: 	!VAR_USER_ans !VAR_TEMP_temp98 = ;
 442: 	int !VAR_USER_n ;
 443: 	!VAR_USER_n !VAR_USER_x = ;
 444: 	while ( true ) {
 445: 		bool !VAR_TEMP_temp99 ;
 446: 		int !VAR_TEMP_temp327 ;
 447: 		!VAR_TEMP_temp327 !VAR_USER_n = ;
 448: 		int !VAR_TEMP_temp328 ;
 449: 		!VAR_TEMP_temp328 !VAR_USER_y = ;
 450: 		!VAR_TEMP_temp327 !VAR_TEMP_temp328 !FUNC_LIB_geq = !VAR_TEMP_temp99 ;
 451: 		bool !VAR_TEMP_temp100 ;
 452: 		!VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ;
 453: 		!VAR_TEMP_temp100 if {
 454: 			break ;
 455: 		}
 456: 		int !VAR_USER_prevJump ;
 457: 		int !VAR_TEMP_temp101 ;
 458: 		!VAR_TEMP_temp101 0 = ;
 459: 		!VAR_USER_prevJump !VAR_TEMP_temp101 = ;
 460: 		int !VAR_USER_jump ;
 461: 		int !VAR_TEMP_temp102 ;
 462: 		!VAR_TEMP_temp102 1 = ;
 463: 		!VAR_USER_jump !VAR_TEMP_temp102 = ;
 464: 		while ( true ) {
 465: 			int !VAR_TEMP_temp103 ;
 466: 			int !VAR_TEMP_temp329 ;
 467: 			!VAR_TEMP_temp329 !VAR_USER_ans = ;
 468: 			int !VAR_TEMP_temp330 ;
 469: 			!VAR_TEMP_temp330 !VAR_USER_jump = ;
 470: 			!VAR_TEMP_temp329 !VAR_TEMP_temp330 !FUNC_LIB_add = !VAR_TEMP_temp103 ;
 471: 			int !VAR_TEMP_temp104 ;
 472: 			int !VAR_TEMP_temp331 ;
 473: 			!VAR_TEMP_temp331 !VAR_USER_y = ;
 474: 			!VAR_TEMP_temp331 !VAR_TEMP_temp103 !FUNC_LIB_mul = !VAR_TEMP_temp104 ;
 475: 			bool !VAR_TEMP_temp105 ;
 476: 			int !VAR_TEMP_temp332 ;
 477: 			!VAR_TEMP_temp332 !VAR_USER_x = ;
 478: 			!VAR_TEMP_temp104 !VAR_TEMP_temp332 !FUNC_LIB_leq = !VAR_TEMP_temp105 ;
 479: 			bool !VAR_TEMP_temp106 ;
 480: 			!VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ;
 481: 			!VAR_TEMP_temp106 if {
 482: 				break ;
 483: 			}
 484: 			!VAR_USER_prevJump !VAR_USER_jump = ;
 485: 			int !VAR_TEMP_temp289 ;
 486: 			int !VAR_TEMP_temp333 ;
 487: 			!VAR_TEMP_temp333 !VAR_USER_jump = ;
 488: 			int !VAR_TEMP_temp334 ;
 489: 			!VAR_TEMP_temp334 !VAR_USER_jump = ;
 490: 			!VAR_TEMP_temp333 !VAR_TEMP_temp334 !FUNC_LIB_add = !VAR_TEMP_temp289 ;
 491: 			!VAR_USER_jump !VAR_TEMP_temp289 = ;
 492: 		}
 493: 		int !VAR_TEMP_temp288 ;
 494: 		int !VAR_TEMP_temp335 ;
 495: 		!VAR_TEMP_temp335 !VAR_USER_ans = ;
 496: 		int !VAR_TEMP_temp336 ;
 497: 		!VAR_TEMP_temp336 !VAR_USER_prevJump = ;
 498: 		!VAR_TEMP_temp335 !VAR_TEMP_temp336 !FUNC_LIB_add = !VAR_TEMP_temp288 ;
 499: 		!VAR_USER_ans !VAR_TEMP_temp288 = ;
 500: 		int !VAR_TEMP_temp107 ;
 501: 		int !VAR_TEMP_temp337 ;
 502: 		!VAR_TEMP_temp337 !VAR_USER_y = ;
 503: 		int !VAR_TEMP_temp338 ;
 504: 		!VAR_TEMP_temp338 !VAR_USER_ans = ;
 505: 		!VAR_TEMP_temp337 !VAR_TEMP_temp338 !FUNC_LIB_mul = !VAR_TEMP_temp107 ;
 506: 		int !VAR_TEMP_temp108 ;
 507: 		int !VAR_TEMP_temp339 ;
 508: 		!VAR_TEMP_temp339 !VAR_USER_x = ;
 509: 		!VAR_TEMP_temp339 !VAR_TEMP_temp107 !FUNC_LIB_sub = !VAR_TEMP_temp108 ;
 510: 		!VAR_USER_n !VAR_TEMP_temp108 = ;
 511: 	}
 512: 	!VAR_USER_ans return ;
 513: }
 514: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
 515: 	int !VAR_USER_d ;
 516: 	int !VAR_TEMP_temp109 ;
 517: 	int !VAR_TEMP_temp340 ;
 518: 	!VAR_TEMP_temp340 !VAR_USER_x = ;
 519: 	int !VAR_TEMP_temp341 ;
 520: 	!VAR_TEMP_temp341 !VAR_USER_y = ;
 521: 	!VAR_TEMP_temp340 !VAR_TEMP_temp341 !FUNC_LIB_div = !VAR_TEMP_temp109 ;
 522: 	!VAR_USER_d !VAR_TEMP_temp109 = ;
 523: 	int !VAR_TEMP_temp110 ;
 524: 	int !VAR_TEMP_temp342 ;
 525: 	!VAR_TEMP_temp342 !VAR_USER_y = ;
 526: 	int !VAR_TEMP_temp343 ;
 527: 	!VAR_TEMP_temp343 !VAR_USER_d = ;
 528: 	!VAR_TEMP_temp342 !VAR_TEMP_temp343 !FUNC_LIB_mul = !VAR_TEMP_temp110 ;
 529: 	bool !VAR_TEMP_temp111 ;
 530: 	int !VAR_TEMP_temp344 ;
 531: 	!VAR_TEMP_temp344 !VAR_USER_x = ;
 532: 	!VAR_TEMP_temp344 !VAR_TEMP_temp110 !FUNC_LIB_sub = !VAR_TEMP_temp111 ;
 533: 	!VAR_TEMP_temp111 return ;
 534: }
 535: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
 536: 	bool !VAR_TEMP_temp112 ;
 537: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ;
 538: 	!VAR_TEMP_temp112 if {
 539: 		int !VAR_TEMP_temp113 ;
 540: 		!VAR_TEMP_temp113 0 = ;
 541: 		!VAR_TEMP_temp113 return ;
 542: 	}
 543: 	bool !VAR_TEMP_temp114 ;
 544: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ;
 545: 	!VAR_TEMP_temp114 return ;
 546: }
 547: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
 548: 	bool !VAR_TEMP_temp115 ;
 549: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ;
 550: 	!VAR_TEMP_temp115 if {
 551: 		bool !VAR_TEMP_temp116 ;
 552: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ;
 553: 		!VAR_TEMP_temp116 if {
 554: 			int !VAR_TEMP_temp117 ;
 555: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp117 ;
 556: 			int !VAR_TEMP_temp118 ;
 557: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp118 ;
 558: 			bool !VAR_TEMP_temp119 ;
 559: 			!VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ;
 560: 			!VAR_TEMP_temp119 return ;
 561: 		}
 562: 		else {
 563: 			bool !VAR_TEMP_temp120 ;
 564: 			!VAR_TEMP_temp120 true = ;
 565: 			!VAR_TEMP_temp120 return ;
 566: 		}
 567: 	}
 568: 	else {
 569: 		bool !VAR_TEMP_temp121 ;
 570: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ;
 571: 		!VAR_TEMP_temp121 if {
 572: 			bool !VAR_TEMP_temp122 ;
 573: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ;
 574: 			!VAR_TEMP_temp122 if {
 575: 				bool !VAR_TEMP_temp123 ;
 576: 				!VAR_TEMP_temp123 false = ;
 577: 				!VAR_TEMP_temp123 return ;
 578: 			}
 579: 			else {
 580: 				bool !VAR_TEMP_temp124 ;
 581: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ;
 582: 				!VAR_TEMP_temp124 if {
 583: 					bool !VAR_TEMP_temp125 ;
 584: 					!VAR_TEMP_temp125 false = ;
 585: 					!VAR_TEMP_temp125 return ;
 586: 				}
 587: 				else {
 588: 					bool !VAR_TEMP_temp126 ;
 589: 					!VAR_TEMP_temp126 true = ;
 590: 					!VAR_TEMP_temp126 return ;
 591: 				}
 592: 			}
 593: 		}
 594: 		else {
 595: 			bool !VAR_TEMP_temp127 ;
 596: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp127 ;
 597: 			!VAR_TEMP_temp127 if {
 598: 				!VAR_TEMP_temp129 !VAR_TEMP_temp127 = ;
 599: 			}
 600: 			else {
 601: 				bool !VAR_TEMP_temp128 ;
 602: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp128 ;
 603: 				bool !VAR_TEMP_temp129 ;
 604: 				!VAR_TEMP_temp129 !VAR_TEMP_temp128 = ;
 605: 			}
 606: 			!VAR_TEMP_temp129 if {
 607: 				bool !VAR_TEMP_temp130 ;
 608: 				!VAR_TEMP_temp130 false = ;
 609: 				!VAR_TEMP_temp130 return ;
 610: 			}
 611: 			else {
 612: 				bool !VAR_TEMP_temp131 ;
 613: 				int !VAR_TEMP_temp345 ;
 614: 				!VAR_TEMP_temp345 !VAR_USER_x = ;
 615: 				int !VAR_TEMP_temp346 ;
 616: 				!VAR_TEMP_temp346 !VAR_USER_y = ;
 617: 				!VAR_TEMP_temp345 !VAR_TEMP_temp346 !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ;
 618: 				!VAR_TEMP_temp131 return ;
 619: 			}
 620: 		}
 621: 	}
 622: }
 623: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
 624: 	bool !VAR_TEMP_temp132 ;
 625: 	int !VAR_TEMP_temp347 ;
 626: 	!VAR_TEMP_temp347 !VAR_USER_x = ;
 627: 	int !VAR_TEMP_temp348 ;
 628: 	!VAR_TEMP_temp348 !VAR_USER_y = ;
 629: 	!VAR_TEMP_temp347 !VAR_TEMP_temp348 !FUNC_LIB_eq = !VAR_TEMP_temp132 ;
 630: 	!VAR_TEMP_temp132 if {
 631: 		!VAR_TEMP_temp134 !VAR_TEMP_temp132 = ;
 632: 	}
 633: 	else {
 634: 		bool !VAR_TEMP_temp133 ;
 635: 		int !VAR_TEMP_temp349 ;
 636: 		!VAR_TEMP_temp349 !VAR_USER_x = ;
 637: 		int !VAR_TEMP_temp350 ;
 638: 		!VAR_TEMP_temp350 !VAR_USER_y = ;
 639: 		!VAR_TEMP_temp349 !VAR_TEMP_temp350 !FUNC_LIB_lt = !VAR_TEMP_temp133 ;
 640: 		bool !VAR_TEMP_temp134 ;
 641: 		!VAR_TEMP_temp134 !VAR_TEMP_temp133 = ;
 642: 	}
 643: 	!VAR_TEMP_temp134 return ;
 644: }
 645: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
 646: 	bool !VAR_TEMP_temp135 ;
 647: 	int !VAR_TEMP_temp351 ;
 648: 	!VAR_TEMP_temp351 !VAR_USER_x = ;
 649: 	int !VAR_TEMP_temp352 ;
 650: 	!VAR_TEMP_temp352 !VAR_USER_y = ;
 651: 	!VAR_TEMP_temp351 !VAR_TEMP_temp352 !FUNC_LIB_leq = !VAR_TEMP_temp135 ;
 652: 	bool !VAR_TEMP_temp136 ;
 653: 	!VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ;
 654: 	!VAR_TEMP_temp136 return ;
 655: }
 656: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
 657: 	bool !VAR_TEMP_temp137 ;
 658: 	int !VAR_TEMP_temp353 ;
 659: 	!VAR_TEMP_temp353 !VAR_USER_x = ;
 660: 	int !VAR_TEMP_temp354 ;
 661: 	!VAR_TEMP_temp354 !VAR_USER_y = ;
 662: 	!VAR_TEMP_temp353 !VAR_TEMP_temp354 !FUNC_LIB_lt = !VAR_TEMP_temp137 ;
 663: 	bool !VAR_TEMP_temp138 ;
 664: 	!VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ;
 665: 	!VAR_TEMP_temp138 return ;
 666: }
 667: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
 668: 	bool !VAR_TEMP_temp139 ;
 669: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ;
 670: 	!VAR_TEMP_temp139 if {
 671: 		bool !VAR_TEMP_temp140 ;
 672: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ;
 673: 		!VAR_TEMP_temp140 if {
 674: 			bool !VAR_TEMP_temp141 ;
 675: 			!VAR_TEMP_temp141 true = ;
 676: 			!VAR_TEMP_temp141 return ;
 677: 		}
 678: 		bool !VAR_TEMP_temp142 ;
 679: 		!VAR_TEMP_temp142 false = ;
 680: 		!VAR_TEMP_temp142 return ;
 681: 	}
 682: 	else {
 683: 		bool !VAR_TEMP_temp143 ;
 684: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ;
 685: 		!VAR_TEMP_temp143 if {
 686: 			bool !VAR_TEMP_temp144 ;
 687: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ;
 688: 			!VAR_TEMP_temp144 if {
 689: 				int !VAR_TEMP_temp145 ;
 690: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp145 ;
 691: 				int !VAR_TEMP_temp146 ;
 692: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp146 ;
 693: 				bool !VAR_TEMP_temp147 ;
 694: 				!VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ;
 695: 				!VAR_TEMP_temp147 return ;
 696: 			}
 697: 			bool !VAR_TEMP_temp148 ;
 698: 			!VAR_TEMP_temp148 false = ;
 699: 			!VAR_TEMP_temp148 return ;
 700: 		}
 701: 		else {
 702: 			bool !VAR_TEMP_temp149 ;
 703: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ;
 704: 			!VAR_TEMP_temp149 if {
 705: 				bool !VAR_TEMP_temp150 ;
 706: 				int !VAR_TEMP_temp355 ;
 707: 				!VAR_TEMP_temp355 !VAR_USER_x = ;
 708: 				int !VAR_TEMP_temp356 ;
 709: 				!VAR_TEMP_temp356 !VAR_USER_y = ;
 710: 				!VAR_TEMP_temp355 !VAR_TEMP_temp356 !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ;
 711: 				!VAR_TEMP_temp150 return ;
 712: 			}
 713: 			bool !VAR_TEMP_temp151 ;
 714: 			!VAR_TEMP_temp151 false = ;
 715: 			!VAR_TEMP_temp151 return ;
 716: 		}
 717: 	}
 718: }
 719: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
 720: 	bool !VAR_TEMP_temp152 ;
 721: 	int !VAR_TEMP_temp357 ;
 722: 	!VAR_TEMP_temp357 !VAR_USER_x = ;
 723: 	int !VAR_TEMP_temp358 ;
 724: 	!VAR_TEMP_temp358 !VAR_USER_y = ;
 725: 	!VAR_TEMP_temp357 !VAR_TEMP_temp358 !FUNC_LIB_eq = !VAR_TEMP_temp152 ;
 726: 	bool !VAR_TEMP_temp153 ;
 727: 	!VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ;
 728: 	!VAR_TEMP_temp153 return ;
 729: }
 730: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
 731: 	bool !VAR_TEMP_temp154 ;
 732: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ;
 733: 	!VAR_TEMP_temp154 if {
 734: 		!VAR_USER_y return ;
 735: 	}
 736: 	bool !VAR_TEMP_temp155 ;
 737: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ;
 738: 	!VAR_TEMP_temp155 if {
 739: 		!VAR_USER_x return ;
 740: 	}
 741: 	bool !VAR_TEMP_temp156 ;
 742: 	int !VAR_TEMP_temp359 ;
 743: 	!VAR_TEMP_temp359 !VAR_USER_x = ;
 744: 	int !VAR_TEMP_temp360 ;
 745: 	!VAR_TEMP_temp360 !VAR_USER_y = ;
 746: 	!VAR_TEMP_temp359 !VAR_TEMP_temp360 !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ;
 747: 	!VAR_TEMP_temp156 return ;
 748: }
 749: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
 750: 	int !VAR_USER_currBitIndex ;
 751: 	int !VAR_TEMP_temp157 ;
 752: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp157 ;
 753: 	!VAR_USER_currBitIndex !VAR_TEMP_temp157 = ;
 754: 	bool !VAR_USER_handledSign ;
 755: 	bool !VAR_TEMP_temp158 ;
 756: 	!VAR_TEMP_temp158 false = ;
 757: 	!VAR_USER_handledSign !VAR_TEMP_temp158 = ;
 758: 	int !VAR_USER_valIndex ;
 759: 	int !VAR_TEMP_temp159 ;
 760: 	!VAR_TEMP_temp159 0 = ;
 761: 	!VAR_USER_valIndex !VAR_TEMP_temp159 = ;
 762: 	int !VAR_USER_V ;
 763: 	!VAR_USER_V !VAR_USER_val = ;
 764: 	while ( true ) {
 765: 		bool !VAR_TEMP_temp160 ;
 766: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp160 ;
 767: 		bool !VAR_TEMP_temp161 ;
 768: 		!VAR_TEMP_temp160 ! = !VAR_TEMP_temp161 ;
 769: 		!VAR_TEMP_temp161 if {
 770: 			!VAR_TEMP_temp163 !VAR_TEMP_temp161 = ;
 771: 		}
 772: 		else {
 773: 			bool !VAR_TEMP_temp162 ;
 774: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp162 ;
 775: 			bool !VAR_TEMP_temp163 ;
 776: 			!VAR_TEMP_temp163 !VAR_TEMP_temp162 = ;
 777: 		}
 778: 		bool !VAR_TEMP_temp164 ;
 779: 		!VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ;
 780: 		!VAR_TEMP_temp164 if {
 781: 			break ;
 782: 		}
 783: 		int !VAR_USER_desiredBitIndex ;
 784: 		int !VAR_TEMP_temp165 ;
 785: 		!VAR_TEMP_temp165 1 = ;
 786: 		int !VAR_TEMP_temp166 ;
 787: 		!VAR_TEMP_temp166 2 = ;
 788: 		int !VAR_TEMP_temp167 ;
 789: 		int !VAR_TEMP_temp361 ;
 790: 		!VAR_TEMP_temp361 !VAR_USER_index = ;
 791: 		int !VAR_TEMP_temp362 ;
 792: 		!VAR_TEMP_temp362 !VAR_USER_valIndex = ;
 793: 		!VAR_TEMP_temp361 !VAR_TEMP_temp362 !FUNC_LIB_add = !VAR_TEMP_temp167 ;
 794: 		int !VAR_TEMP_temp168 ;
 795: 		int !VAR_TEMP_temp363 ;
 796: 		!VAR_TEMP_temp363 !VAR_USER_index = ;
 797: 		int !VAR_TEMP_temp364 ;
 798: 		!VAR_TEMP_temp364 !VAR_USER_valIndex = ;
 799: 		!VAR_TEMP_temp363 !VAR_TEMP_temp364 !FUNC_LIB_add = !VAR_TEMP_temp168 ;
 800: 		int !VAR_TEMP_temp169 ;
 801: 		!VAR_TEMP_temp168 !VAR_TEMP_temp165 !FUNC_LIB_add = !VAR_TEMP_temp169 ;
 802: 		int !VAR_TEMP_temp170 ;
 803: 		!VAR_TEMP_temp167 !VAR_TEMP_temp169 !FUNC_LIB_mul = !VAR_TEMP_temp170 ;
 804: 		int !VAR_TEMP_temp171 ;
 805: 		!VAR_TEMP_temp170 !VAR_TEMP_temp166 !FUNC_LIB_div = !VAR_TEMP_temp171 ;
 806: 		int !VAR_TEMP_temp172 ;
 807: 		int !VAR_TEMP_temp365 ;
 808: 		!VAR_TEMP_temp365 !VAR_USER_index = ;
 809: 		!VAR_TEMP_temp171 !VAR_TEMP_temp365 !FUNC_LIB_add = !VAR_TEMP_temp172 ;
 810: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp172 = ;
 811: 		while ( true ) {
 812: 			bool !VAR_TEMP_temp173 ;
 813: 			int !VAR_TEMP_temp366 ;
 814: 			!VAR_TEMP_temp366 !VAR_USER_currBitIndex = ;
 815: 			int !VAR_TEMP_temp367 ;
 816: 			!VAR_TEMP_temp367 !VAR_USER_desiredBitIndex = ;
 817: 			!VAR_TEMP_temp366 !VAR_TEMP_temp367 !FUNC_LIB_gt = !VAR_TEMP_temp173 ;
 818: 			bool !VAR_TEMP_temp174 ;
 819: 			!VAR_TEMP_temp173 ! = !VAR_TEMP_temp174 ;
 820: 			!VAR_TEMP_temp174 if {
 821: 				break ;
 822: 			}
 823: 			int !VAR_TEMP_temp175 ;
 824: 			!VAR_TEMP_temp175 1 = ;
 825: 			int !VAR_TEMP_temp287 ;
 826: 			int !VAR_TEMP_temp368 ;
 827: 			!VAR_TEMP_temp368 !VAR_USER_currBitIndex = ;
 828: 			!VAR_TEMP_temp368 !VAR_TEMP_temp175 !FUNC_LIB_sub = !VAR_TEMP_temp287 ;
 829: 			!VAR_USER_currBitIndex !VAR_TEMP_temp287 = ;
 830: 			!FUNC_LIB_moveMemHeadLeft ;
 831: 		}
 832: 		while ( true ) {
 833: 			bool !VAR_TEMP_temp176 ;
 834: 			int !VAR_TEMP_temp369 ;
 835: 			!VAR_TEMP_temp369 !VAR_USER_currBitIndex = ;
 836: 			int !VAR_TEMP_temp370 ;
 837: 			!VAR_TEMP_temp370 !VAR_USER_desiredBitIndex = ;
 838: 			!VAR_TEMP_temp369 !VAR_TEMP_temp370 !FUNC_LIB_lt = !VAR_TEMP_temp176 ;
 839: 			bool !VAR_TEMP_temp177 ;
 840: 			!VAR_TEMP_temp176 ! = !VAR_TEMP_temp177 ;
 841: 			!VAR_TEMP_temp177 if {
 842: 				break ;
 843: 			}
 844: 			int !VAR_TEMP_temp178 ;
 845: 			!VAR_TEMP_temp178 1 = ;
 846: 			int !VAR_TEMP_temp286 ;
 847: 			int !VAR_TEMP_temp371 ;
 848: 			!VAR_TEMP_temp371 !VAR_USER_currBitIndex = ;
 849: 			!VAR_TEMP_temp371 !VAR_TEMP_temp178 !FUNC_LIB_add = !VAR_TEMP_temp286 ;
 850: 			!VAR_USER_currBitIndex !VAR_TEMP_temp286 = ;
 851: 			!FUNC_LIB_moveMemHeadRight ;
 852: 		}
 853: 		bool !VAR_TEMP_temp179 ;
 854: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp179 ;
 855: 		!VAR_TEMP_temp179 if {
 856: 			bool !VAR_TEMP_temp180 ;
 857: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp180 ;
 858: 			!VAR_TEMP_temp180 if {
 859: 				!FUNC_LIB_setMemBitOne ;
 860: 				int !VAR_TEMP_temp181 ;
 861: 				!VAR_USER_V !FUNC_LIB_neg = !VAR_TEMP_temp181 ;
 862: 				!VAR_USER_V !VAR_TEMP_temp181 = ;
 863: 			}
 864: 			else {
 865: 				!FUNC_LIB_setMemBitZero ;
 866: 			}
 867: 			bool !VAR_TEMP_temp182 ;
 868: 			!VAR_TEMP_temp182 true = ;
 869: 			!VAR_USER_handledSign !VAR_TEMP_temp182 = ;
 870: 		}
 871: 		else {
 872: 			int !VAR_USER_V2 ;
 873: 			int !VAR_TEMP_temp183 ;
 874: 			!VAR_TEMP_temp183 2 = ;
 875: 			int !VAR_TEMP_temp184 ;
 876: 			int !VAR_TEMP_temp372 ;
 877: 			!VAR_TEMP_temp372 !VAR_USER_V = ;
 878: 			!VAR_TEMP_temp372 !VAR_TEMP_temp183 !FUNC_LIB_div = !VAR_TEMP_temp184 ;
 879: 			!VAR_USER_V2 !VAR_TEMP_temp184 = ;
 880: 			int !VAR_USER_bit ;
 881: 			int !VAR_TEMP_temp185 ;
 882: 			!VAR_TEMP_temp185 2 = ;
 883: 			int !VAR_TEMP_temp186 ;
 884: 			int !VAR_TEMP_temp373 ;
 885: 			!VAR_TEMP_temp373 !VAR_USER_V2 = ;
 886: 			!VAR_TEMP_temp185 !VAR_TEMP_temp373 !FUNC_LIB_mul = !VAR_TEMP_temp186 ;
 887: 			int !VAR_TEMP_temp187 ;
 888: 			int !VAR_TEMP_temp374 ;
 889: 			!VAR_TEMP_temp374 !VAR_USER_V = ;
 890: 			!VAR_TEMP_temp374 !VAR_TEMP_temp186 !FUNC_LIB_sub = !VAR_TEMP_temp187 ;
 891: 			!VAR_USER_bit !VAR_TEMP_temp187 = ;
 892: 			int !VAR_TEMP_temp188 ;
 893: 			!VAR_TEMP_temp188 1 = ;
 894: 			bool !VAR_TEMP_temp189 ;
 895: 			int !VAR_TEMP_temp375 ;
 896: 			!VAR_TEMP_temp375 !VAR_USER_bit = ;
 897: 			!VAR_TEMP_temp375 !VAR_TEMP_temp188 !FUNC_LIB_eq = !VAR_TEMP_temp189 ;
 898: 			!VAR_TEMP_temp189 if {
 899: 				!FUNC_LIB_setMemBitOne ;
 900: 			}
 901: 			else {
 902: 				!FUNC_LIB_setMemBitZero ;
 903: 			}
 904: 			!VAR_USER_V !VAR_USER_V2 = ;
 905: 		}
 906: 		int !VAR_TEMP_temp190 ;
 907: 		!VAR_TEMP_temp190 1 = ;
 908: 		int !VAR_TEMP_temp285 ;
 909: 		int !VAR_TEMP_temp376 ;
 910: 		!VAR_TEMP_temp376 !VAR_USER_valIndex = ;
 911: 		!VAR_TEMP_temp376 !VAR_TEMP_temp190 !FUNC_LIB_add = !VAR_TEMP_temp285 ;
 912: 		!VAR_USER_valIndex !VAR_TEMP_temp285 = ;
 913: 	}
 914: 	int !VAR_USER_desiredBitIndex ;
 915: 	int !VAR_TEMP_temp191 ;
 916: 	!VAR_TEMP_temp191 1 = ;
 917: 	int !VAR_TEMP_temp192 ;
 918: 	!VAR_TEMP_temp192 2 = ;
 919: 	int !VAR_TEMP_temp193 ;
 920: 	int !VAR_TEMP_temp377 ;
 921: 	!VAR_TEMP_temp377 !VAR_USER_index = ;
 922: 	int !VAR_TEMP_temp378 ;
 923: 	!VAR_TEMP_temp378 !VAR_USER_valIndex = ;
 924: 	!VAR_TEMP_temp377 !VAR_TEMP_temp378 !FUNC_LIB_add = !VAR_TEMP_temp193 ;
 925: 	int !VAR_TEMP_temp194 ;
 926: 	int !VAR_TEMP_temp379 ;
 927: 	!VAR_TEMP_temp379 !VAR_USER_index = ;
 928: 	int !VAR_TEMP_temp380 ;
 929: 	!VAR_TEMP_temp380 !VAR_USER_valIndex = ;
 930: 	!VAR_TEMP_temp379 !VAR_TEMP_temp380 !FUNC_LIB_add = !VAR_TEMP_temp194 ;
 931: 	int !VAR_TEMP_temp195 ;
 932: 	!VAR_TEMP_temp194 !VAR_TEMP_temp191 !FUNC_LIB_add = !VAR_TEMP_temp195 ;
 933: 	int !VAR_TEMP_temp196 ;
 934: 	!VAR_TEMP_temp193 !VAR_TEMP_temp195 !FUNC_LIB_mul = !VAR_TEMP_temp196 ;
 935: 	int !VAR_TEMP_temp197 ;
 936: 	!VAR_TEMP_temp196 !VAR_TEMP_temp192 !FUNC_LIB_div = !VAR_TEMP_temp197 ;
 937: 	int !VAR_TEMP_temp198 ;
 938: 	int !VAR_TEMP_temp381 ;
 939: 	!VAR_TEMP_temp381 !VAR_USER_index = ;
 940: 	!VAR_TEMP_temp197 !VAR_TEMP_temp381 !FUNC_LIB_add = !VAR_TEMP_temp198 ;
 941: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp198 = ;
 942: 	while ( true ) {
 943: 		bool !VAR_TEMP_temp199 ;
 944: 		int !VAR_TEMP_temp382 ;
 945: 		!VAR_TEMP_temp382 !VAR_USER_currBitIndex = ;
 946: 		int !VAR_TEMP_temp383 ;
 947: 		!VAR_TEMP_temp383 !VAR_USER_desiredBitIndex = ;
 948: 		!VAR_TEMP_temp382 !VAR_TEMP_temp383 !FUNC_LIB_lt = !VAR_TEMP_temp199 ;
 949: 		bool !VAR_TEMP_temp200 ;
 950: 		!VAR_TEMP_temp199 ! = !VAR_TEMP_temp200 ;
 951: 		!VAR_TEMP_temp200 if {
 952: 			break ;
 953: 		}
 954: 		int !VAR_TEMP_temp201 ;
 955: 		!VAR_TEMP_temp201 1 = ;
 956: 		int !VAR_TEMP_temp284 ;
 957: 		int !VAR_TEMP_temp384 ;
 958: 		!VAR_TEMP_temp384 !VAR_USER_currBitIndex = ;
 959: 		!VAR_TEMP_temp384 !VAR_TEMP_temp201 !FUNC_LIB_add = !VAR_TEMP_temp284 ;
 960: 		!VAR_USER_currBitIndex !VAR_TEMP_temp284 = ;
 961: 		!FUNC_LIB_moveMemHeadRight ;
 962: 	}
 963: 	!FUNC_LIB_setMemBitBlank ;
 964: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
 965: 	return ;
 966: }
 967: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
 968: 	int !VAR_USER_ans ;
 969: 	int !VAR_TEMP_temp202 ;
 970: 	!VAR_TEMP_temp202 0 = ;
 971: 	!VAR_USER_ans !VAR_TEMP_temp202 = ;
 972: 	int !VAR_USER_currBitIndex ;
 973: 	int !VAR_TEMP_temp203 ;
 974: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp203 ;
 975: 	!VAR_USER_currBitIndex !VAR_TEMP_temp203 = ;
 976: 	int !VAR_USER_desiredBitIndex ;
 977: 	int !VAR_TEMP_temp204 ;
 978: 	!VAR_TEMP_temp204 1 = ;
 979: 	int !VAR_TEMP_temp205 ;
 980: 	!VAR_TEMP_temp205 2 = ;
 981: 	int !VAR_TEMP_temp206 ;
 982: 	int !VAR_TEMP_temp385 ;
 983: 	!VAR_TEMP_temp385 !VAR_USER_index = ;
 984: 	!VAR_TEMP_temp385 !VAR_TEMP_temp204 !FUNC_LIB_add = !VAR_TEMP_temp206 ;
 985: 	int !VAR_TEMP_temp207 ;
 986: 	int !VAR_TEMP_temp386 ;
 987: 	!VAR_TEMP_temp386 !VAR_USER_index = ;
 988: 	!VAR_TEMP_temp386 !VAR_TEMP_temp206 !FUNC_LIB_mul = !VAR_TEMP_temp207 ;
 989: 	int !VAR_TEMP_temp208 ;
 990: 	!VAR_TEMP_temp207 !VAR_TEMP_temp205 !FUNC_LIB_div = !VAR_TEMP_temp208 ;
 991: 	int !VAR_TEMP_temp209 ;
 992: 	int !VAR_TEMP_temp387 ;
 993: 	!VAR_TEMP_temp387 !VAR_USER_index = ;
 994: 	!VAR_TEMP_temp208 !VAR_TEMP_temp387 !FUNC_LIB_add = !VAR_TEMP_temp209 ;
 995: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp209 = ;
 996: 	!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
 997: 	while ( true ) {
 998: 		bool !VAR_TEMP_temp210 ;
 999: 		int !VAR_TEMP_temp388 ;
1000: 		!VAR_TEMP_temp388 !VAR_USER_currBitIndex = ;
1001: 		int !VAR_TEMP_temp389 ;
1002: 		!VAR_TEMP_temp389 !VAR_USER_desiredBitIndex = ;
1003: 		!VAR_TEMP_temp388 !VAR_TEMP_temp389 !FUNC_LIB_gt = !VAR_TEMP_temp210 ;
1004: 		bool !VAR_TEMP_temp211 ;
1005: 		!VAR_TEMP_temp210 ! = !VAR_TEMP_temp211 ;
1006: 		!VAR_TEMP_temp211 if {
1007: 			break ;
1008: 		}
1009: 		int !VAR_TEMP_temp212 ;
1010: 		!VAR_TEMP_temp212 1 = ;
1011: 		int !VAR_TEMP_temp283 ;
1012: 		int !VAR_TEMP_temp390 ;
1013: 		!VAR_TEMP_temp390 !VAR_USER_currBitIndex = ;
1014: 		!VAR_TEMP_temp390 !VAR_TEMP_temp212 !FUNC_LIB_sub = !VAR_TEMP_temp283 ;
1015: 		!VAR_USER_currBitIndex !VAR_TEMP_temp283 = ;
1016: 		!FUNC_LIB_moveMemHeadLeft ;
1017: 	}
1018: 	while ( true ) {
1019: 		bool !VAR_TEMP_temp213 ;
1020: 		int !VAR_TEMP_temp391 ;
1021: 		!VAR_TEMP_temp391 !VAR_USER_currBitIndex = ;
1022: 		int !VAR_TEMP_temp392 ;
1023: 		!VAR_TEMP_temp392 !VAR_USER_desiredBitIndex = ;
1024: 		!VAR_TEMP_temp391 !VAR_TEMP_temp392 !FUNC_LIB_lt = !VAR_TEMP_temp213 ;
1025: 		bool !VAR_TEMP_temp214 ;
1026: 		!VAR_TEMP_temp213 ! = !VAR_TEMP_temp214 ;
1027: 		!VAR_TEMP_temp214 if {
1028: 			break ;
1029: 		}
1030: 		int !VAR_TEMP_temp215 ;
1031: 		!VAR_TEMP_temp215 1 = ;
1032: 		int !VAR_TEMP_temp282 ;
1033: 		int !VAR_TEMP_temp393 ;
1034: 		!VAR_TEMP_temp393 !VAR_USER_currBitIndex = ;
1035: 		!VAR_TEMP_temp393 !VAR_TEMP_temp215 !FUNC_LIB_add = !VAR_TEMP_temp282 ;
1036: 		!VAR_USER_currBitIndex !VAR_TEMP_temp282 = ;
1037: 		!FUNC_LIB_moveMemHeadRight ;
1038: 	}
1039: 	int !VAR_USER_valIndex ;
1040: 	int !VAR_TEMP_temp216 ;
1041: 	!VAR_TEMP_temp216 0 = ;
1042: 	!VAR_USER_valIndex !VAR_TEMP_temp216 = ;
1043: 	bool !VAR_USER_shouldBeNegative ;
1044: 	bool !VAR_TEMP_temp217 ;
1045: 	!VAR_TEMP_temp217 false = ;
1046: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp217 = ;
1047: 	int !VAR_USER_pow2 ;
1048: 	int !VAR_TEMP_temp218 ;
1049: 	!VAR_TEMP_temp218 0 = ;
1050: 	!VAR_USER_pow2 !VAR_TEMP_temp218 = ;
1051: 	while ( true ) {
1052: 		bool !VAR_TEMP_temp219 ;
1053: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp219 ;
1054: 		bool !VAR_TEMP_temp220 ;
1055: 		!VAR_TEMP_temp219 ! = !VAR_TEMP_temp220 ;
1056: 		bool !VAR_TEMP_temp221 ;
1057: 		!VAR_TEMP_temp220 ! = !VAR_TEMP_temp221 ;
1058: 		!VAR_TEMP_temp221 if {
1059: 			break ;
1060: 		}
1061: 		bool !VAR_TEMP_temp222 ;
1062: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp222 ;
1063: 		!VAR_TEMP_temp222 if {
1064: 			int !VAR_TEMP_temp223 ;
1065: 			!VAR_TEMP_temp223 413 = ;
1066: 			!VAR_TEMP_temp223 !FUNC_LIB_printInt ;
1067: 			int !VAR_TEMP_temp224 ;
1068: 			!VAR_TEMP_temp224 413 = ;
1069: 			int !VAR_TEMP_temp225 ;
1070: 			!VAR_TEMP_temp224 !FUNC_LIB_neg = !VAR_TEMP_temp225 ;
1071: 			!VAR_TEMP_temp225 !FUNC_LIB_printInt ;
1072: 			bool !VAR_TEMP_temp226 ;
1073: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp226 ;
1074: 			!VAR_TEMP_temp226 if {
1075: 				int !VAR_TEMP_temp227 ;
1076: 				!VAR_TEMP_temp227 417 = ;
1077: 				!VAR_TEMP_temp227 !FUNC_LIB_printInt ;
1078: 				int !VAR_TEMP_temp228 ;
1079: 				!VAR_TEMP_temp228 417 = ;
1080: 				int !VAR_TEMP_temp229 ;
1081: 				!VAR_TEMP_temp228 !FUNC_LIB_neg = !VAR_TEMP_temp229 ;
1082: 				!VAR_TEMP_temp229 !FUNC_LIB_printInt ;
1083: 				bool !VAR_TEMP_temp230 ;
1084: 				!VAR_TEMP_temp230 true = ;
1085: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp230 = ;
1086: 			}
1087: 		}
1088: 		else {
1089: 			int !VAR_TEMP_temp231 ;
1090: 			!VAR_TEMP_temp231 423 = ;
1091: 			!VAR_TEMP_temp231 !FUNC_LIB_printInt ;
1092: 			int !VAR_TEMP_temp232 ;
1093: 			!VAR_TEMP_temp232 423 = ;
1094: 			int !VAR_TEMP_temp233 ;
1095: 			!VAR_TEMP_temp232 !FUNC_LIB_neg = !VAR_TEMP_temp233 ;
1096: 			!VAR_TEMP_temp233 !FUNC_LIB_printInt ;
1097: 			bool !VAR_TEMP_temp234 ;
1098: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp234 ;
1099: 			!VAR_TEMP_temp234 if {
1100: 				int !VAR_TEMP_temp281 ;
1101: 				int !VAR_TEMP_temp394 ;
1102: 				!VAR_TEMP_temp394 !VAR_USER_ans = ;
1103: 				int !VAR_TEMP_temp395 ;
1104: 				!VAR_TEMP_temp395 !VAR_USER_pow2 = ;
1105: 				!VAR_TEMP_temp394 !VAR_TEMP_temp395 !FUNC_LIB_add = !VAR_TEMP_temp281 ;
1106: 				!VAR_USER_ans !VAR_TEMP_temp281 = ;
1107: 				int !VAR_TEMP_temp235 ;
1108: 				!VAR_TEMP_temp235 37 = ;
1109: 				!VAR_TEMP_temp235 !FUNC_LIB_printInt ;
1110: 				!VAR_USER_ans !FUNC_LIB_printInt ;
1111: 				int !VAR_TEMP_temp236 ;
1112: 				!VAR_TEMP_temp236 37 = ;
1113: 				int !VAR_TEMP_temp237 ;
1114: 				!VAR_TEMP_temp236 !FUNC_LIB_neg = !VAR_TEMP_temp237 ;
1115: 				!VAR_TEMP_temp237 !FUNC_LIB_printInt ;
1116: 			}
1117: 			else {
1118: 				int !VAR_TEMP_temp238 ;
1119: 				!VAR_TEMP_temp238 8999 = ;
1120: 				!VAR_TEMP_temp238 !FUNC_LIB_printInt ;
1121: 				bool !VAR_TEMP_temp239 ;
1122: 				!FUNC_LIB_memBitIsZero = !VAR_TEMP_temp239 ;
1123: 				!VAR_TEMP_temp239 if {
1124: 					int !VAR_TEMP_temp240 ;
1125: 					!VAR_TEMP_temp240 9000 = ;
1126: 					!VAR_TEMP_temp240 !FUNC_LIB_printInt ;
1127: 				}
1128: 				else {
1129: 					int !VAR_TEMP_temp241 ;
1130: 					!VAR_TEMP_temp241 9000 = ;
1131: 					int !VAR_TEMP_temp242 ;
1132: 					!VAR_TEMP_temp241 !FUNC_LIB_neg = !VAR_TEMP_temp242 ;
1133: 					!VAR_TEMP_temp242 !FUNC_LIB_printInt ;
1134: 				}
1135: 				bool !VAR_TEMP_temp243 ;
1136: 				!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp243 ;
1137: 				!VAR_TEMP_temp243 if {
1138: 					int !VAR_TEMP_temp244 ;
1139: 					!VAR_TEMP_temp244 9001 = ;
1140: 					!VAR_TEMP_temp244 !FUNC_LIB_printInt ;
1141: 				}
1142: 				else {
1143: 					int !VAR_TEMP_temp245 ;
1144: 					!VAR_TEMP_temp245 9001 = ;
1145: 					int !VAR_TEMP_temp246 ;
1146: 					!VAR_TEMP_temp245 !FUNC_LIB_neg = !VAR_TEMP_temp246 ;
1147: 					!VAR_TEMP_temp246 !FUNC_LIB_printInt ;
1148: 				}
1149: 				bool !VAR_TEMP_temp247 ;
1150: 				!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp247 ;
1151: 				!VAR_TEMP_temp247 if {
1152: 					int !VAR_TEMP_temp248 ;
1153: 					!VAR_TEMP_temp248 9002 = ;
1154: 					!VAR_TEMP_temp248 !FUNC_LIB_printInt ;
1155: 				}
1156: 				else {
1157: 					int !VAR_TEMP_temp249 ;
1158: 					!VAR_TEMP_temp249 9002 = ;
1159: 					int !VAR_TEMP_temp250 ;
1160: 					!VAR_TEMP_temp249 !FUNC_LIB_neg = !VAR_TEMP_temp250 ;
1161: 					!VAR_TEMP_temp250 !FUNC_LIB_printInt ;
1162: 				}
1163: 				int !VAR_TEMP_temp251 ;
1164: 				!VAR_TEMP_temp251 8999 = ;
1165: 				int !VAR_TEMP_temp252 ;
1166: 				!VAR_TEMP_temp251 !FUNC_LIB_neg = !VAR_TEMP_temp252 ;
1167: 				!VAR_TEMP_temp252 !FUNC_LIB_printInt ;
1168: 			}
1169: 		}
1170: 		int !VAR_TEMP_temp253 ;
1171: 		!VAR_TEMP_temp253 1 = ;
1172: 		int !VAR_TEMP_temp280 ;
1173: 		int !VAR_TEMP_temp396 ;
1174: 		!VAR_TEMP_temp396 !VAR_USER_valIndex = ;
1175: 		!VAR_TEMP_temp396 !VAR_TEMP_temp253 !FUNC_LIB_add = !VAR_TEMP_temp280 ;
1176: 		!VAR_USER_valIndex !VAR_TEMP_temp280 = ;
1177: 		bool !VAR_TEMP_temp254 ;
1178: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp254 ;
1179: 		!VAR_TEMP_temp254 if {
1180: 			int !VAR_TEMP_temp255 ;
1181: 			!VAR_TEMP_temp255 1 = ;
1182: 			!VAR_USER_pow2 !VAR_TEMP_temp255 = ;
1183: 		}
1184: 		else {
1185: 			int !VAR_TEMP_temp279 ;
1186: 			int !VAR_TEMP_temp397 ;
1187: 			!VAR_TEMP_temp397 !VAR_USER_pow2 = ;
1188: 			int !VAR_TEMP_temp398 ;
1189: 			!VAR_TEMP_temp398 !VAR_USER_pow2 = ;
1190: 			!VAR_TEMP_temp397 !VAR_TEMP_temp398 !FUNC_LIB_add = !VAR_TEMP_temp279 ;
1191: 			!VAR_USER_pow2 !VAR_TEMP_temp279 = ;
1192: 		}
1193: 		int !VAR_TEMP_temp256 ;
1194: 		!VAR_TEMP_temp256 1 = ;
1195: 		int !VAR_TEMP_temp257 ;
1196: 		!VAR_TEMP_temp257 2 = ;
1197: 		int !VAR_TEMP_temp258 ;
1198: 		int !VAR_TEMP_temp399 ;
1199: 		!VAR_TEMP_temp399 !VAR_USER_index = ;
1200: 		int !VAR_TEMP_temp400 ;
1201: 		!VAR_TEMP_temp400 !VAR_USER_valIndex = ;
1202: 		!VAR_TEMP_temp399 !VAR_TEMP_temp400 !FUNC_LIB_add = !VAR_TEMP_temp258 ;
1203: 		int !VAR_TEMP_temp259 ;
1204: 		int !VAR_TEMP_temp401 ;
1205: 		!VAR_TEMP_temp401 !VAR_USER_index = ;
1206: 		int !VAR_TEMP_temp402 ;
1207: 		!VAR_TEMP_temp402 !VAR_USER_valIndex = ;
1208: 		!VAR_TEMP_temp401 !VAR_TEMP_temp402 !FUNC_LIB_add = !VAR_TEMP_temp259 ;
1209: 		int !VAR_TEMP_temp260 ;
1210: 		!VAR_TEMP_temp259 !VAR_TEMP_temp256 !FUNC_LIB_add = !VAR_TEMP_temp260 ;
1211: 		int !VAR_TEMP_temp261 ;
1212: 		!VAR_TEMP_temp258 !VAR_TEMP_temp260 !FUNC_LIB_mul = !VAR_TEMP_temp261 ;
1213: 		int !VAR_TEMP_temp262 ;
1214: 		!VAR_TEMP_temp261 !VAR_TEMP_temp257 !FUNC_LIB_div = !VAR_TEMP_temp262 ;
1215: 		int !VAR_TEMP_temp263 ;
1216: 		int !VAR_TEMP_temp403 ;
1217: 		!VAR_TEMP_temp403 !VAR_USER_index = ;
1218: 		!VAR_TEMP_temp262 !VAR_TEMP_temp403 !FUNC_LIB_add = !VAR_TEMP_temp263 ;
1219: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp263 = ;
1220: 		int !VAR_TEMP_temp264 ;
1221: 		!VAR_TEMP_temp264 100 = ;
1222: 		!VAR_TEMP_temp264 !FUNC_LIB_printInt ;
1223: 		!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
1224: 		int !VAR_TEMP_temp265 ;
1225: 		!VAR_TEMP_temp265 100 = ;
1226: 		int !VAR_TEMP_temp266 ;
1227: 		!VAR_TEMP_temp265 !FUNC_LIB_neg = !VAR_TEMP_temp266 ;
1228: 		!VAR_TEMP_temp266 !FUNC_LIB_printInt ;
1229: 		while ( true ) {
1230: 			bool !VAR_TEMP_temp267 ;
1231: 			int !VAR_TEMP_temp404 ;
1232: 			!VAR_TEMP_temp404 !VAR_USER_currBitIndex = ;
1233: 			int !VAR_TEMP_temp405 ;
1234: 			!VAR_TEMP_temp405 !VAR_USER_desiredBitIndex = ;
1235: 			!VAR_TEMP_temp404 !VAR_TEMP_temp405 !FUNC_LIB_lt = !VAR_TEMP_temp267 ;
1236: 			bool !VAR_TEMP_temp268 ;
1237: 			!VAR_TEMP_temp267 ! = !VAR_TEMP_temp268 ;
1238: 			!VAR_TEMP_temp268 if {
1239: 				break ;
1240: 			}
1241: 			int !VAR_TEMP_temp269 ;
1242: 			!VAR_TEMP_temp269 1 = ;
1243: 			int !VAR_TEMP_temp278 ;
1244: 			int !VAR_TEMP_temp406 ;
1245: 			!VAR_TEMP_temp406 !VAR_USER_currBitIndex = ;
1246: 			!VAR_TEMP_temp406 !VAR_TEMP_temp269 !FUNC_LIB_add = !VAR_TEMP_temp278 ;
1247: 			!VAR_USER_currBitIndex !VAR_TEMP_temp278 = ;
1248: 			!FUNC_LIB_moveMemHeadRight ;
1249: 		}
1250: 	}
1251: 	!VAR_USER_shouldBeNegative if {
1252: 		int !VAR_TEMP_temp270 ;
1253: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp270 ;
1254: 		!VAR_USER_ans !VAR_TEMP_temp270 = ;
1255: 	}
1256: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
1257: 	!VAR_USER_ans return ;
1258: }
1259: void !FUNC_USER_what ( int !VAR_USER_x ) {
1260: 	return ;
1261: }
1262: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
1263: 	int !VAR_USER_temp ;
1264: 	int !VAR_TEMP_temp271 ;
1265: 	int !VAR_TEMP_temp407 ;
1266: 	!VAR_TEMP_temp407 !VAR_USER_a = ;
1267: 	int !VAR_TEMP_temp408 ;
1268: 	!VAR_TEMP_temp408 !VAR_USER_b = ;
1269: 	!VAR_TEMP_temp407 !VAR_TEMP_temp408 !FUNC_LIB_mul = !VAR_TEMP_temp271 ;
1270: 	int !VAR_TEMP_temp272 ;
1271: 	int !VAR_TEMP_temp409 ;
1272: 	!VAR_TEMP_temp409 !VAR_USER_c = ;
1273: 	!VAR_TEMP_temp271 !VAR_TEMP_temp409 !FUNC_LIB_div = !VAR_TEMP_temp272 ;
1274: 	!VAR_USER_temp !VAR_TEMP_temp272 = ;
1275: 	int !VAR_USER_x ;
1276: 	int !VAR_TEMP_temp273 ;
1277: 	!VAR_TEMP_temp273 1 = ;
1278: 	int !VAR_TEMP_temp274 ;
1279: 	!VAR_TEMP_temp273 !FUNC_LIB_neg = !VAR_TEMP_temp274 ;
1280: 	int !VAR_TEMP_temp275 ;
1281: 	int !VAR_TEMP_temp410 ;
1282: 	!VAR_TEMP_temp410 !VAR_USER_a = ;
1283: 	!VAR_TEMP_temp410 !VAR_TEMP_temp274 !FUNC_LIB_sub = !VAR_TEMP_temp275 ;
1284: 	!VAR_USER_x !VAR_TEMP_temp275 = ;
1285: 	!VAR_USER_temp return ;
1286: }
1287: int !FUNC_USER_main ( ) {
1288: 	int !VAR_TEMP_temp276 ;
1289: 	!VAR_TEMP_temp276 3 = ;
1290: 	bool !VAR_TEMP_temp277 ;
1291: 	!VAR_TEMP_temp276 !FUNC_LIB_memget = !VAR_TEMP_temp277 ;
1292: 	!VAR_TEMP_temp277 return ;
1293: }

after explicitReturn
  0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
  1: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
  2: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
  3: 	!VAR_TEMP_temp0 if {
  4: 		!TAPE_RAX !VAR_USER_y = ;
  5: 		return ;
  6: 	}
  7: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
  8: 	!VAR_TEMP_temp0 if {
  9: 		!TAPE_RAX !VAR_USER_x = ;
 10: 		return ;
 11: 	}
 12: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
 13: 	!VAR_TEMP_temp0 if {
 14: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp1 ;
 15: 		!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 16: 	}
 17: 	else {
 18: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 19: 	}
 20: 	!VAR_TEMP_temp2 if {
 21: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 22: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
 23: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
 24: 		!VAR_TEMP_temp2 if {
 25: 			!VAR_TEMP_temp0 0 = ;
 26: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
 27: 			return ;
 28: 		}
 29: 		else {
 30: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 31: 			!VAR_TEMP_temp1 !VAR_USER_y = ;
 32: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
 33: 			!VAR_TEMP_temp2 if {
 34: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 35: 				!VAR_TEMP_temp1 !VAR_USER_y = ;
 36: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_basic_sub = !VAR_TEMP_temp2 ;
 37: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
 38: 				return ;
 39: 			}
 40: 			else {
 41: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 42: 				!VAR_TEMP_temp1 !VAR_USER_y = ;
 43: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_sub = !VAR_TEMP_temp2 ;
 44: 				!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 45: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
 46: 				return ;
 47: 			}
 48: 		}
 49: 	}
 50: 	else {
 51: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
 52: 		!VAR_TEMP_temp0 if {
 53: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
 54: 			!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 55: 		}
 56: 		else {
 57: 			!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 58: 		}
 59: 		!VAR_TEMP_temp2 if {
 60: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 61: 			!VAR_TEMP_temp1 !VAR_USER_x = ;
 62: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
 63: 			!VAR_TEMP_temp2 if {
 64: 				!VAR_TEMP_temp0 0 = ;
 65: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
 66: 				return ;
 67: 			}
 68: 			else {
 69: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 70: 				!VAR_TEMP_temp1 !VAR_USER_x = ;
 71: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
 72: 				!VAR_TEMP_temp2 if {
 73: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 74: 					!VAR_TEMP_temp1 !VAR_USER_x = ;
 75: 					!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_basic_sub = !VAR_TEMP_temp2 ;
 76: 					!TAPE_RAX !VAR_TEMP_temp2 = ;
 77: 					return ;
 78: 				}
 79: 				else {
 80: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 81: 					!VAR_TEMP_temp1 !VAR_USER_x = ;
 82: 					!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_sub = !VAR_TEMP_temp2 ;
 83: 					!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 84: 					!TAPE_RAX !VAR_TEMP_temp0 = ;
 85: 					return ;
 86: 				}
 87: 			}
 88: 		}
 89: 		else {
 90: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
 91: 			!VAR_TEMP_temp0 if {
 92: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
 93: 				!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 94: 			}
 95: 			else {
 96: 				!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 97: 			}
 98: 			!VAR_TEMP_temp2 if {
 99: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
100: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
101: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_add = !VAR_TEMP_temp2 ;
102: 				!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
103: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
104: 				return ;
105: 			}
106: 			else {
107: 				!VAR_TEMP_temp0 !VAR_USER_x = ;
108: 				!VAR_TEMP_temp1 !VAR_USER_y = ;
109: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_add = !VAR_TEMP_temp2 ;
110: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
111: 				return ;
112: 			}
113: 		}
114: 	}
115: }
116: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
117: 	declare !VAR_TEMP_temp0 !VAR_TEMP_temp2 !VAR_TEMP_temp1 ;
118: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
119: 	!VAR_TEMP_temp0 if {
120: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
121: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
122: 		return ;
123: 	}
124: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
125: 	!VAR_TEMP_temp0 if {
126: 		!TAPE_RAX !VAR_USER_x = ;
127: 		return ;
128: 	}
129: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
130: 	!VAR_TEMP_temp0 if {
131: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
132: 		!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
133: 	}
134: 	else {
135: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
136: 	}
137: 	!VAR_TEMP_temp2 if {
138: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
139: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
140: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
141: 		!TAPE_RAX !VAR_TEMP_temp2 = ;
142: 		return ;
143: 	}
144: 	else {
145: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
146: 		!VAR_TEMP_temp0 if {
147: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp1 ;
148: 			!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
149: 		}
150: 		else {
151: 			!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
152: 		}
153: 		!VAR_TEMP_temp2 if {
154: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
155: 			!VAR_TEMP_temp1 !VAR_USER_y = ;
156: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_add = !VAR_TEMP_temp2 ;
157: 			!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
158: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
159: 			return ;
160: 		}
161: 		else {
162: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
163: 			!VAR_TEMP_temp0 if {
164: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
165: 				!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
166: 			}
167: 			else {
168: 				!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
169: 			}
170: 			!VAR_TEMP_temp2 if {
171: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
172: 				!VAR_TEMP_temp1 !VAR_USER_x = ;
173: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_basic_add = !VAR_TEMP_temp2 ;
174: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
175: 				return ;
176: 			}
177: 			else {
178: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
179: 				!VAR_TEMP_temp1 !VAR_USER_x = ;
180: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
181: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
182: 				return ;
183: 			}
184: 		}
185: 	}
186: }
187: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
188: 	declare !VAR_USER_ans !VAR_USER_y0 !VAR_USER_y1 !VAR_USER_y2 !VAR_USER_val1 !VAR_TEMP_temp2 !VAR_USER_val2 !VAR_USER_ansNeg !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
189: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
190: 	!VAR_TEMP_temp0 if {
191: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
192: 	}
193: 	else {
194: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
195: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
196: 	}
197: 	!VAR_TEMP_temp1 if {
198: 		!VAR_TEMP_temp0 0 = ;
199: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
200: 		return ;
201: 	}
202: 	!VAR_TEMP_temp0 false = ;
203: 	!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
204: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
205: 	!VAR_TEMP_temp0 if {
206: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
207: 		!VAR_USER_x !VAR_TEMP_temp0 = ;
208: 		!VAR_TEMP_temp0 true = ;
209: 		!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
210: 	}
211: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
212: 	!VAR_TEMP_temp0 if {
213: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
214: 		!VAR_USER_y !VAR_TEMP_temp0 = ;
215: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp0 ;
216: 		!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
217: 	}
218: 	!VAR_TEMP_temp0 0 = ;
219: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
220: 	!VAR_USER_y0 !VAR_USER_y = ;
221: 	while ( true ) {
222: 		!VAR_TEMP_temp0 0 = ;
223: 		!VAR_TEMP_temp1 !VAR_USER_y0 = ;
224: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
225: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
226: 		!VAR_TEMP_temp0 if {
227: 			break ;
228: 		}
229: 		!VAR_TEMP_temp0 1 = ;
230: 		!VAR_USER_y1 !VAR_TEMP_temp0 = ;
231: 		!VAR_TEMP_temp0 2 = ;
232: 		!VAR_USER_y2 !VAR_TEMP_temp0 = ;
233: 		!VAR_USER_val1 !VAR_USER_x = ;
234: 		!VAR_TEMP_temp0 !VAR_USER_x = ;
235: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
236: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
237: 		!VAR_USER_val2 !VAR_TEMP_temp2 = ;
238: 		while ( true ) {
239: 			!VAR_TEMP_temp0 !VAR_USER_val2 = ;
240: 			!VAR_TEMP_temp1 !VAR_USER_y0 = ;
241: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
242: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
243: 			!VAR_TEMP_temp0 if {
244: 				break ;
245: 			}
246: 			!VAR_USER_y1 !VAR_USER_y2 = ;
247: 			!VAR_USER_val1 !VAR_USER_val2 = ;
248: 			!VAR_TEMP_temp0 !VAR_USER_y2 = ;
249: 			!VAR_TEMP_temp1 !VAR_USER_y2 = ;
250: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
251: 			!VAR_USER_y2 !VAR_TEMP_temp2 = ;
252: 			!VAR_TEMP_temp0 !VAR_USER_val2 = ;
253: 			!VAR_TEMP_temp1 !VAR_USER_val2 = ;
254: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
255: 			!VAR_USER_val2 !VAR_TEMP_temp2 = ;
256: 		}
257: 		!VAR_TEMP_temp0 !VAR_USER_ans = ;
258: 		!VAR_TEMP_temp1 !VAR_USER_val1 = ;
259: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
260: 		!VAR_USER_ans !VAR_TEMP_temp2 = ;
261: 		!VAR_TEMP_temp0 !VAR_USER_y0 = ;
262: 		!VAR_TEMP_temp1 !VAR_USER_y1 = ;
263: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
264: 		!VAR_USER_y0 !VAR_TEMP_temp2 = ;
265: 	}
266: 	!VAR_USER_ansNeg if {
267: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
268: 		!VAR_USER_ans !VAR_TEMP_temp0 = ;
269: 	}
270: 	!TAPE_RAX !VAR_USER_ans = ;
271: 	return ;
272: }
273: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
274: 	declare !VAR_TEMP_temp3 !VAR_USER_n !VAR_USER_prevJump !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 !VAR_USER_ans !VAR_USER_jump ;
275: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
276: 	!VAR_TEMP_temp0 if {
277: 		!VAR_TEMP_temp0 0 = ;
278: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
279: 		return ;
280: 	}
281: 	!VAR_TEMP_temp0 0 = ;
282: 	!VAR_TEMP_temp1 0 = ;
283: 	!VAR_TEMP_temp2 !VAR_USER_x = ;
284: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp3 ;
285: 	!VAR_TEMP_temp3 if {
286: 		!VAR_TEMP_temp0 !VAR_USER_y = ;
287: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
288: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 = ;
289: 	}
290: 	else {
291: 		!VAR_TEMP_temp0 !VAR_TEMP_temp3 = ;
292: 	}
293: 	!VAR_TEMP_temp0 if {
294: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
295: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
296: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
297: 		!TAPE_RAX !VAR_TEMP_temp2 = ;
298: 		return ;
299: 	}
300: 	!VAR_TEMP_temp0 0 = ;
301: 	!VAR_TEMP_temp1 !VAR_USER_x = ;
302: 	!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
303: 	!VAR_TEMP_temp2 if {
304: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
305: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
306: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
307: 		!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
308: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
309: 		return ;
310: 	}
311: 	!VAR_TEMP_temp0 0 = ;
312: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
313: 	!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
314: 	!VAR_TEMP_temp2 if {
315: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
316: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
317: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
318: 		!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
319: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
320: 		return ;
321: 	}
322: 	!VAR_TEMP_temp0 0 = ;
323: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
324: 	!VAR_USER_n !VAR_USER_x = ;
325: 	while ( true ) {
326: 		!VAR_TEMP_temp0 !VAR_USER_n = ;
327: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
328: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_geq = !VAR_TEMP_temp2 ;
329: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
330: 		!VAR_TEMP_temp0 if {
331: 			break ;
332: 		}
333: 		!VAR_TEMP_temp0 0 = ;
334: 		!VAR_USER_prevJump !VAR_TEMP_temp0 = ;
335: 		!VAR_TEMP_temp0 1 = ;
336: 		!VAR_USER_jump !VAR_TEMP_temp0 = ;
337: 		while ( true ) {
338: 			!VAR_TEMP_temp0 !VAR_USER_ans = ;
339: 			!VAR_TEMP_temp1 !VAR_USER_jump = ;
340: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
341: 			!VAR_TEMP_temp0 !VAR_USER_y = ;
342: 			!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_mul = !VAR_TEMP_temp1 ;
343: 			!VAR_TEMP_temp0 !VAR_USER_x = ;
344: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
345: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
346: 			!VAR_TEMP_temp0 if {
347: 				break ;
348: 			}
349: 			!VAR_USER_prevJump !VAR_USER_jump = ;
350: 			!VAR_TEMP_temp0 !VAR_USER_jump = ;
351: 			!VAR_TEMP_temp1 !VAR_USER_jump = ;
352: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
353: 			!VAR_USER_jump !VAR_TEMP_temp2 = ;
354: 		}
355: 		!VAR_TEMP_temp0 !VAR_USER_ans = ;
356: 		!VAR_TEMP_temp1 !VAR_USER_prevJump = ;
357: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
358: 		!VAR_USER_ans !VAR_TEMP_temp2 = ;
359: 		!VAR_TEMP_temp0 !VAR_USER_y = ;
360: 		!VAR_TEMP_temp1 !VAR_USER_ans = ;
361: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
362: 		!VAR_TEMP_temp0 !VAR_USER_x = ;
363: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
364: 		!VAR_USER_n !VAR_TEMP_temp1 = ;
365: 	}
366: 	!TAPE_RAX !VAR_USER_ans = ;
367: 	return ;
368: }
369: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
370: 	declare !VAR_USER_d !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
371: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
372: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
373: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
374: 	!VAR_USER_d !VAR_TEMP_temp2 = ;
375: 	!VAR_TEMP_temp0 !VAR_USER_y = ;
376: 	!VAR_TEMP_temp1 !VAR_USER_d = ;
377: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
378: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
379: 	!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
380: 	!TAPE_RAX !VAR_TEMP_temp1 = ;
381: 	return ;
382: }
383: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
384: 	declare !VAR_TEMP_temp0 ;
385: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
386: 	!VAR_TEMP_temp0 if {
387: 		!VAR_TEMP_temp0 0 = ;
388: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
389: 		return ;
390: 	}
391: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp0 ;
392: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
393: 	return ;
394: }
395: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
396: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
397: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
398: 	!VAR_TEMP_temp0 if {
399: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
400: 		!VAR_TEMP_temp0 if {
401: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
402: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
403: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
404: 			!TAPE_RAX !VAR_TEMP_temp2 = ;
405: 			return ;
406: 		}
407: 		else {
408: 			!VAR_TEMP_temp0 true = ;
409: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
410: 			return ;
411: 		}
412: 	}
413: 	else {
414: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
415: 		!VAR_TEMP_temp0 if {
416: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
417: 			!VAR_TEMP_temp0 if {
418: 				!VAR_TEMP_temp0 false = ;
419: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
420: 				return ;
421: 			}
422: 			else {
423: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
424: 				!VAR_TEMP_temp0 if {
425: 					!VAR_TEMP_temp0 false = ;
426: 					!TAPE_RAX !VAR_TEMP_temp0 = ;
427: 					return ;
428: 				}
429: 				else {
430: 					!VAR_TEMP_temp0 true = ;
431: 					!TAPE_RAX !VAR_TEMP_temp0 = ;
432: 					return ;
433: 				}
434: 			}
435: 		}
436: 		else {
437: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
438: 			!VAR_TEMP_temp0 if {
439: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
440: 			}
441: 			else {
442: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
443: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
444: 			}
445: 			!VAR_TEMP_temp1 if {
446: 				!VAR_TEMP_temp0 false = ;
447: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
448: 				return ;
449: 			}
450: 			else {
451: 				!VAR_TEMP_temp0 !VAR_USER_x = ;
452: 				!VAR_TEMP_temp1 !VAR_USER_y = ;
453: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_lt = !VAR_TEMP_temp2 ;
454: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
455: 				return ;
456: 			}
457: 		}
458: 	}
459: }
460: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
461: 	declare !VAR_TEMP_temp3 !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
462: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
463: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
464: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
465: 	!VAR_TEMP_temp2 if {
466: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 = ;
467: 	}
468: 	else {
469: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
470: 		!VAR_TEMP_temp2 !VAR_USER_y = ;
471: 		!VAR_TEMP_temp1 !VAR_TEMP_temp2 !FUNC_LIB_lt = !VAR_TEMP_temp3 ;
472: 		!VAR_TEMP_temp0 !VAR_TEMP_temp3 = ;
473: 	}
474: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
475: 	return ;
476: }
477: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
478: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
479: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
480: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
481: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
482: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
483: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
484: 	return ;
485: }
486: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
487: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
488: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
489: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
490: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
491: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
492: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
493: 	return ;
494: }
495: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
496: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
497: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
498: 	!VAR_TEMP_temp0 if {
499: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
500: 		!VAR_TEMP_temp0 if {
501: 			!VAR_TEMP_temp0 true = ;
502: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
503: 			return ;
504: 		}
505: 		!VAR_TEMP_temp0 false = ;
506: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
507: 		return ;
508: 	}
509: 	else {
510: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
511: 		!VAR_TEMP_temp0 if {
512: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
513: 			!VAR_TEMP_temp0 if {
514: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
515: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
516: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_eq = !VAR_TEMP_temp2 ;
517: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
518: 				return ;
519: 			}
520: 			!VAR_TEMP_temp0 false = ;
521: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
522: 			return ;
523: 		}
524: 		else {
525: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
526: 			!VAR_TEMP_temp0 if {
527: 				!VAR_TEMP_temp0 !VAR_USER_x = ;
528: 				!VAR_TEMP_temp1 !VAR_USER_y = ;
529: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_eq = !VAR_TEMP_temp2 ;
530: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
531: 				return ;
532: 			}
533: 			!VAR_TEMP_temp0 false = ;
534: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
535: 			return ;
536: 		}
537: 	}
538: }
539: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
540: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
541: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
542: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
543: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
544: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
545: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
546: 	return ;
547: }
548: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
549: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
550: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
551: 	!VAR_TEMP_temp0 if {
552: 		!TAPE_RAX !VAR_USER_y = ;
553: 		return ;
554: 	}
555: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
556: 	!VAR_TEMP_temp0 if {
557: 		!TAPE_RAX !VAR_USER_x = ;
558: 		return ;
559: 	}
560: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
561: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
562: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_xor = !VAR_TEMP_temp2 ;
563: 	!TAPE_RAX !VAR_TEMP_temp2 = ;
564: 	return ;
565: }
566: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
567: 	declare !VAR_USER_handledSign !VAR_TEMP_temp3 !VAR_TEMP_temp0 !VAR_USER_V2 !VAR_TEMP_temp2 !VAR_USER_valIndex !VAR_TEMP_temp1 !VAR_TEMP_temp4 !VAR_USER_desiredBitIndex !VAR_USER_currBitIndex !VAR_TEMP_temp5 !VAR_USER_bit !VAR_USER_V ;
568: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp0 ;
569: 	!VAR_USER_currBitIndex !VAR_TEMP_temp0 = ;
570: 	!VAR_TEMP_temp0 false = ;
571: 	!VAR_USER_handledSign !VAR_TEMP_temp0 = ;
572: 	!VAR_TEMP_temp0 0 = ;
573: 	!VAR_USER_valIndex !VAR_TEMP_temp0 = ;
574: 	!VAR_USER_V !VAR_USER_val = ;
575: 	while ( true ) {
576: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
577: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
578: 		!VAR_TEMP_temp1 if {
579: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 = ;
580: 		}
581: 		else {
582: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp1 ;
583: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 = ;
584: 		}
585: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
586: 		!VAR_TEMP_temp1 if {
587: 			break ;
588: 		}
589: 		!VAR_TEMP_temp0 1 = ;
590: 		!VAR_TEMP_temp1 2 = ;
591: 		!VAR_TEMP_temp2 !VAR_USER_index = ;
592: 		!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
593: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp4 ;
594: 		!VAR_TEMP_temp2 !VAR_USER_index = ;
595: 		!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
596: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp5 ;
597: 		!VAR_TEMP_temp5 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
598: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
599: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
600: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
601: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp1 ;
602: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp1 = ;
603: 		while ( true ) {
604: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
605: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
606: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
607: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
608: 			!VAR_TEMP_temp0 if {
609: 				break ;
610: 			}
611: 			!VAR_TEMP_temp0 1 = ;
612: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
613: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
614: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
615: 			!FUNC_LIB_moveMemHeadLeft ;
616: 		}
617: 		while ( true ) {
618: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
619: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
620: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
621: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
622: 			!VAR_TEMP_temp0 if {
623: 				break ;
624: 			}
625: 			!VAR_TEMP_temp0 1 = ;
626: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
627: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
628: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
629: 			!FUNC_LIB_moveMemHeadRight ;
630: 		}
631: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp0 ;
632: 		!VAR_TEMP_temp0 if {
633: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
634: 			!VAR_TEMP_temp0 if {
635: 				!FUNC_LIB_setMemBitOne ;
636: 				!VAR_USER_V !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
637: 				!VAR_USER_V !VAR_TEMP_temp0 = ;
638: 			}
639: 			else {
640: 				!FUNC_LIB_setMemBitZero ;
641: 			}
642: 			!VAR_TEMP_temp0 true = ;
643: 			!VAR_USER_handledSign !VAR_TEMP_temp0 = ;
644: 		}
645: 		else {
646: 			!VAR_TEMP_temp0 2 = ;
647: 			!VAR_TEMP_temp1 !VAR_USER_V = ;
648: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
649: 			!VAR_USER_V2 !VAR_TEMP_temp2 = ;
650: 			!VAR_TEMP_temp0 2 = ;
651: 			!VAR_TEMP_temp1 !VAR_USER_V2 = ;
652: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
653: 			!VAR_TEMP_temp0 !VAR_USER_V = ;
654: 			!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
655: 			!VAR_USER_bit !VAR_TEMP_temp1 = ;
656: 			!VAR_TEMP_temp0 1 = ;
657: 			!VAR_TEMP_temp1 !VAR_USER_bit = ;
658: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
659: 			!VAR_TEMP_temp2 if {
660: 				!FUNC_LIB_setMemBitOne ;
661: 			}
662: 			else {
663: 				!FUNC_LIB_setMemBitZero ;
664: 			}
665: 			!VAR_USER_V !VAR_USER_V2 = ;
666: 		}
667: 		!VAR_TEMP_temp0 1 = ;
668: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
669: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
670: 		!VAR_USER_valIndex !VAR_TEMP_temp2 = ;
671: 	}
672: 	!VAR_TEMP_temp0 1 = ;
673: 	!VAR_TEMP_temp1 2 = ;
674: 	!VAR_TEMP_temp2 !VAR_USER_index = ;
675: 	!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
676: 	!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp4 ;
677: 	!VAR_TEMP_temp2 !VAR_USER_index = ;
678: 	!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
679: 	!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp5 ;
680: 	!VAR_TEMP_temp5 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
681: 	!VAR_TEMP_temp4 !VAR_TEMP_temp2 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
682: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
683: 	!VAR_TEMP_temp0 !VAR_USER_index = ;
684: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp1 ;
685: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp1 = ;
686: 	while ( true ) {
687: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
688: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
689: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
690: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
691: 		!VAR_TEMP_temp0 if {
692: 			break ;
693: 		}
694: 		!VAR_TEMP_temp0 1 = ;
695: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
696: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
697: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
698: 		!FUNC_LIB_moveMemHeadRight ;
699: 	}
700: 	!FUNC_LIB_setMemBitBlank ;
701: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
702: 	return ;
703: }
704: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
705: 	declare !VAR_USER_ans !VAR_TEMP_temp3 !VAR_TEMP_temp0 !VAR_USER_currBitIndex !VAR_TEMP_temp5 !VAR_TEMP_temp2 !VAR_USER_pow2 !VAR_USER_shouldBeNegative !VAR_TEMP_temp1 !VAR_TEMP_temp4 !VAR_USER_valIndex !VAR_USER_desiredBitIndex ;
706: 	!VAR_TEMP_temp0 0 = ;
707: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
708: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp0 ;
709: 	!VAR_USER_currBitIndex !VAR_TEMP_temp0 = ;
710: 	!VAR_TEMP_temp0 1 = ;
711: 	!VAR_TEMP_temp1 2 = ;
712: 	!VAR_TEMP_temp2 !VAR_USER_index = ;
713: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp3 ;
714: 	!VAR_TEMP_temp0 !VAR_USER_index = ;
715: 	!VAR_TEMP_temp0 !VAR_TEMP_temp3 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
716: 	!VAR_TEMP_temp2 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp0 ;
717: 	!VAR_TEMP_temp1 !VAR_USER_index = ;
718: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
719: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp2 = ;
720: 	!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
721: 	while ( true ) {
722: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
723: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
724: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
725: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
726: 		!VAR_TEMP_temp0 if {
727: 			break ;
728: 		}
729: 		!VAR_TEMP_temp0 1 = ;
730: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
731: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
732: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
733: 		!FUNC_LIB_moveMemHeadLeft ;
734: 	}
735: 	while ( true ) {
736: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
737: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
738: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
739: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
740: 		!VAR_TEMP_temp0 if {
741: 			break ;
742: 		}
743: 		!VAR_TEMP_temp0 1 = ;
744: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
745: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
746: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
747: 		!FUNC_LIB_moveMemHeadRight ;
748: 	}
749: 	!VAR_TEMP_temp0 0 = ;
750: 	!VAR_USER_valIndex !VAR_TEMP_temp0 = ;
751: 	!VAR_TEMP_temp0 false = ;
752: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp0 = ;
753: 	!VAR_TEMP_temp0 0 = ;
754: 	!VAR_USER_pow2 !VAR_TEMP_temp0 = ;
755: 	while ( true ) {
756: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp0 ;
757: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
758: 		!VAR_TEMP_temp1 ! = !VAR_TEMP_temp0 ;
759: 		!VAR_TEMP_temp0 if {
760: 			break ;
761: 		}
762: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
763: 		!VAR_TEMP_temp0 if {
764: 			!VAR_TEMP_temp0 413 = ;
765: 			!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
766: 			!VAR_TEMP_temp0 413 = ;
767: 			!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
768: 			!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
769: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp0 ;
770: 			!VAR_TEMP_temp0 if {
771: 				!VAR_TEMP_temp0 417 = ;
772: 				!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
773: 				!VAR_TEMP_temp0 417 = ;
774: 				!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
775: 				!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
776: 				!VAR_TEMP_temp0 true = ;
777: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp0 = ;
778: 			}
779: 		}
780: 		else {
781: 			!VAR_TEMP_temp0 423 = ;
782: 			!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
783: 			!VAR_TEMP_temp0 423 = ;
784: 			!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
785: 			!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
786: 			!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp0 ;
787: 			!VAR_TEMP_temp0 if {
788: 				!VAR_TEMP_temp0 !VAR_USER_ans = ;
789: 				!VAR_TEMP_temp1 !VAR_USER_pow2 = ;
790: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
791: 				!VAR_USER_ans !VAR_TEMP_temp2 = ;
792: 				!VAR_TEMP_temp0 37 = ;
793: 				!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
794: 				!VAR_USER_ans !FUNC_LIB_printInt ;
795: 				!VAR_TEMP_temp0 37 = ;
796: 				!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
797: 				!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
798: 			}
799: 			else {
800: 				!VAR_TEMP_temp0 8999 = ;
801: 				!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
802: 				!FUNC_LIB_memBitIsZero = !VAR_TEMP_temp0 ;
803: 				!VAR_TEMP_temp0 if {
804: 					!VAR_TEMP_temp0 9000 = ;
805: 					!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
806: 				}
807: 				else {
808: 					!VAR_TEMP_temp0 9000 = ;
809: 					!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
810: 					!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
811: 				}
812: 				!FUNC_LIB_memBitIsOne = !VAR_TEMP_temp0 ;
813: 				!VAR_TEMP_temp0 if {
814: 					!VAR_TEMP_temp0 9001 = ;
815: 					!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
816: 				}
817: 				else {
818: 					!VAR_TEMP_temp0 9001 = ;
819: 					!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
820: 					!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
821: 				}
822: 				!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp0 ;
823: 				!VAR_TEMP_temp0 if {
824: 					!VAR_TEMP_temp0 9002 = ;
825: 					!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
826: 				}
827: 				else {
828: 					!VAR_TEMP_temp0 9002 = ;
829: 					!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
830: 					!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
831: 				}
832: 				!VAR_TEMP_temp0 8999 = ;
833: 				!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
834: 				!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
835: 			}
836: 		}
837: 		!VAR_TEMP_temp0 1 = ;
838: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
839: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
840: 		!VAR_USER_valIndex !VAR_TEMP_temp2 = ;
841: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
842: 		!VAR_TEMP_temp0 if {
843: 			!VAR_TEMP_temp0 1 = ;
844: 			!VAR_USER_pow2 !VAR_TEMP_temp0 = ;
845: 		}
846: 		else {
847: 			!VAR_TEMP_temp0 !VAR_USER_pow2 = ;
848: 			!VAR_TEMP_temp1 !VAR_USER_pow2 = ;
849: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
850: 			!VAR_USER_pow2 !VAR_TEMP_temp2 = ;
851: 		}
852: 		!VAR_TEMP_temp0 1 = ;
853: 		!VAR_TEMP_temp1 2 = ;
854: 		!VAR_TEMP_temp2 !VAR_USER_index = ;
855: 		!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
856: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp4 ;
857: 		!VAR_TEMP_temp2 !VAR_USER_index = ;
858: 		!VAR_TEMP_temp3 !VAR_USER_valIndex = ;
859: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_add = !VAR_TEMP_temp5 ;
860: 		!VAR_TEMP_temp5 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
861: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
862: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
863: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
864: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp1 ;
865: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp1 = ;
866: 		!VAR_TEMP_temp0 100 = ;
867: 		!VAR_TEMP_temp0 !FUNC_LIB_printInt ;
868: 		!VAR_USER_desiredBitIndex !FUNC_LIB_printInt ;
869: 		!VAR_TEMP_temp0 100 = ;
870: 		!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
871: 		!VAR_TEMP_temp1 !FUNC_LIB_printInt ;
872: 		while ( true ) {
873: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
874: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
875: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
876: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
877: 			!VAR_TEMP_temp0 if {
878: 				break ;
879: 			}
880: 			!VAR_TEMP_temp0 1 = ;
881: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
882: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
883: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
884: 			!FUNC_LIB_moveMemHeadRight ;
885: 		}
886: 	}
887: 	!VAR_USER_shouldBeNegative if {
888: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
889: 		!VAR_USER_ans !VAR_TEMP_temp0 = ;
890: 	}
891: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
892: 	!TAPE_RAX !VAR_USER_ans = ;
893: 	return ;
894: }
895: void !FUNC_USER_what ( int !VAR_USER_x ) {
896: 	declare ;
897: 	return ;
898: }
899: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
900: 	declare !VAR_USER_temp !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 !VAR_USER_x ;
901: 	!VAR_TEMP_temp0 !VAR_USER_a = ;
902: 	!VAR_TEMP_temp1 !VAR_USER_b = ;
903: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
904: 	!VAR_TEMP_temp0 !VAR_USER_c = ;
905: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp1 ;
906: 	!VAR_USER_temp !VAR_TEMP_temp1 = ;
907: 	!VAR_TEMP_temp0 1 = ;
908: 	!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
909: 	!VAR_TEMP_temp0 !VAR_USER_a = ;
910: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
911: 	!VAR_USER_x !VAR_TEMP_temp2 = ;
912: 	!TAPE_RAX !VAR_USER_temp = ;
913: 	return ;
914: }
915: int !FUNC_USER_main ( ) {
916: 	declare !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
917: 	!VAR_TEMP_temp0 3 = ;
918: 	!VAR_TEMP_temp0 !FUNC_LIB_memget = !VAR_TEMP_temp1 ;
919: 	!TAPE_RAX !VAR_TEMP_temp1 = ;
920: 	return ;
921: }

func !FUNC_USER_linear on line 1385
func !FUNC_LIB_memset on line 864
func !FUNC_LIB_neq on line 825
func !FUNC_LIB_eq on line 760
func !FUNC_LIB_div on line 424
func !FUNC_USER_main on line 1414
func !FUNC_LIB_memget on line 1080
func !FUNC_LIB_mul on line 302
func !FUNC_USER_what on line 1381
func !FUNC_LIB_eor on line 838
func !FUNC_LIB_mod on line 580
func !FUNC_LIB_gt on line 734
func !FUNC_LIB_sub on line 190
func !FUNC_LIB_geq on line 747
func !FUNC_LIB_add on line 1
func !FUNC_LIB_neg on line 604
func !FUNC_LIB_lt on line 620
func !FUNC_LIB_leq on line 710
Done with jumps
   0: jmp 1414 ;
   1: nop ;
   2: pop !TAPE_PARAMS !TAPE_tape0 ;
   3: pop !TAPE_PARAMS !TAPE_tape1 ;
   4: push !TAPE_tape0 !TAPE_PARAMS ;
   5: call !FUNC_LIB_isZero ;
   6: pop !TAPE_RAX !TAPE_tape3 ;
   7: jf !TAPE_tape3 10 ;
   8: !TAPE_RAX !TAPE_tape1 = ;
   9: return ;
  10: nop ;
  11: push !TAPE_tape1 !TAPE_PARAMS ;
  12: call !FUNC_LIB_isZero ;
  13: pop !TAPE_RAX !TAPE_tape3 ;
  14: jf !TAPE_tape3 17 ;
  15: !TAPE_RAX !TAPE_tape0 = ;
  16: return ;
  17: nop ;
  18: push !TAPE_tape0 !TAPE_PARAMS ;
  19: call !FUNC_LIB_isNeg ;
  20: pop !TAPE_RAX !TAPE_tape3 ;
  21: jf !TAPE_tape3 27 ;
  22: push !TAPE_tape1 !TAPE_PARAMS ;
  23: call !FUNC_LIB_isPos ;
  24: pop !TAPE_RAX !TAPE_tape4 ;
  25: !TAPE_tape2 !TAPE_tape4 = ;
  26: jmp 29 ;
  27: nop ;
  28: !TAPE_tape2 !TAPE_tape3 = ;
  29: nop ;
  30: jf !TAPE_tape2 82 ;
  31: push !TAPE_tape0 !TAPE_PARAMS ;
  32: call 604 ;
  33: pop !TAPE_RAX !TAPE_tape3 ;
  34: !TAPE_tape4 !TAPE_tape1 = ;
  35: push !TAPE_tape4 !TAPE_PARAMS ;
  36: push !TAPE_tape3 !TAPE_PARAMS ;
  37: call 760 ;
  38: pop !TAPE_RAX !TAPE_tape2 ;
  39: jf !TAPE_tape2 44 ;
  40: !TAPE_tape3 0 = ;
  41: !TAPE_RAX !TAPE_tape3 = ;
  42: return ;
  43: jmp 80 ;
  44: nop ;
  45: push !TAPE_tape0 !TAPE_PARAMS ;
  46: call 604 ;
  47: pop !TAPE_RAX !TAPE_tape3 ;
  48: !TAPE_tape4 !TAPE_tape1 = ;
  49: push !TAPE_tape4 !TAPE_PARAMS ;
  50: push !TAPE_tape3 !TAPE_PARAMS ;
  51: call 620 ;
  52: pop !TAPE_RAX !TAPE_tape2 ;
  53: jf !TAPE_tape2 65 ;
  54: push !TAPE_tape0 !TAPE_PARAMS ;
  55: call 604 ;
  56: pop !TAPE_RAX !TAPE_tape3 ;
  57: !TAPE_tape4 !TAPE_tape1 = ;
  58: push !TAPE_tape3 !TAPE_PARAMS ;
  59: push !TAPE_tape4 !TAPE_PARAMS ;
  60: call !FUNC_LIB_basic_sub ;
  61: pop !TAPE_RAX !TAPE_tape2 ;
  62: !TAPE_RAX !TAPE_tape2 = ;
  63: return ;
  64: jmp 79 ;
  65: nop ;
  66: push !TAPE_tape0 !TAPE_PARAMS ;
  67: call 604 ;
  68: pop !TAPE_RAX !TAPE_tape3 ;
  69: !TAPE_tape4 !TAPE_tape1 = ;
  70: push !TAPE_tape4 !TAPE_PARAMS ;
  71: push !TAPE_tape3 !TAPE_PARAMS ;
  72: call !FUNC_LIB_basic_sub ;
  73: pop !TAPE_RAX !TAPE_tape2 ;
  74: push !TAPE_tape2 !TAPE_PARAMS ;
  75: call 604 ;
  76: pop !TAPE_RAX !TAPE_tape3 ;
  77: !TAPE_RAX !TAPE_tape3 = ;
  78: return ;
  79: nop ;
  80: nop ;
  81: jmp 188 ;
  82: nop ;
  83: push !TAPE_tape0 !TAPE_PARAMS ;
  84: call !FUNC_LIB_isPos ;
  85: pop !TAPE_RAX !TAPE_tape3 ;
  86: jf !TAPE_tape3 92 ;
  87: push !TAPE_tape1 !TAPE_PARAMS ;
  88: call !FUNC_LIB_isNeg ;
  89: pop !TAPE_RAX !TAPE_tape4 ;
  90: !TAPE_tape2 !TAPE_tape4 = ;
  91: jmp 94 ;
  92: nop ;
  93: !TAPE_tape2 !TAPE_tape3 = ;
  94: nop ;
  95: jf !TAPE_tape2 147 ;
  96: push !TAPE_tape1 !TAPE_PARAMS ;
  97: call 604 ;
  98: pop !TAPE_RAX !TAPE_tape3 ;
  99: !TAPE_tape4 !TAPE_tape0 = ;
 100: push !TAPE_tape4 !TAPE_PARAMS ;
 101: push !TAPE_tape3 !TAPE_PARAMS ;
 102: call 760 ;
 103: pop !TAPE_RAX !TAPE_tape2 ;
 104: jf !TAPE_tape2 109 ;
 105: !TAPE_tape3 0 = ;
 106: !TAPE_RAX !TAPE_tape3 = ;
 107: return ;
 108: jmp 145 ;
 109: nop ;
 110: push !TAPE_tape1 !TAPE_PARAMS ;
 111: call 604 ;
 112: pop !TAPE_RAX !TAPE_tape3 ;
 113: !TAPE_tape4 !TAPE_tape0 = ;
 114: push !TAPE_tape4 !TAPE_PARAMS ;
 115: push !TAPE_tape3 !TAPE_PARAMS ;
 116: call 620 ;
 117: pop !TAPE_RAX !TAPE_tape2 ;
 118: jf !TAPE_tape2 130 ;
 119: push !TAPE_tape1 !TAPE_PARAMS ;
 120: call 604 ;
 121: pop !TAPE_RAX !TAPE_tape3 ;
 122: !TAPE_tape4 !TAPE_tape0 = ;
 123: push !TAPE_tape3 !TAPE_PARAMS ;
 124: push !TAPE_tape4 !TAPE_PARAMS ;
 125: call !FUNC_LIB_basic_sub ;
 126: pop !TAPE_RAX !TAPE_tape2 ;
 127: !TAPE_RAX !TAPE_tape2 = ;
 128: return ;
 129: jmp 144 ;
 130: nop ;
 131: push !TAPE_tape1 !TAPE_PARAMS ;
 132: call 604 ;
 133: pop !TAPE_RAX !TAPE_tape3 ;
 134: !TAPE_tape4 !TAPE_tape0 = ;
 135: push !TAPE_tape4 !TAPE_PARAMS ;
 136: push !TAPE_tape3 !TAPE_PARAMS ;
 137: call !FUNC_LIB_basic_sub ;
 138: pop !TAPE_RAX !TAPE_tape2 ;
 139: push !TAPE_tape2 !TAPE_PARAMS ;
 140: call 604 ;
 141: pop !TAPE_RAX !TAPE_tape3 ;
 142: !TAPE_RAX !TAPE_tape3 = ;
 143: return ;
 144: nop ;
 145: nop ;
 146: jmp 187 ;
 147: nop ;
 148: push !TAPE_tape0 !TAPE_PARAMS ;
 149: call !FUNC_LIB_isNeg ;
 150: pop !TAPE_RAX !TAPE_tape3 ;
 151: jf !TAPE_tape3 157 ;
 152: push !TAPE_tape1 !TAPE_PARAMS ;
 153: call !FUNC_LIB_isNeg ;
 154: pop !TAPE_RAX !TAPE_tape4 ;
 155: !TAPE_tape2 !TAPE_tape4 = ;
 156: jmp 159 ;
 157: nop ;
 158: !TAPE_tape2 !TAPE_tape3 = ;
 159: nop ;
 160: jf !TAPE_tape2 177 ;
 161: push !TAPE_tape0 !TAPE_PARAMS ;
 162: call 604 ;
 163: pop !TAPE_RAX !TAPE_tape3 ;
 164: push !TAPE_tape1 !TAPE_PARAMS ;
 165: call 604 ;
 166: pop !TAPE_RAX !TAPE_tape4 ;
 167: push !TAPE_tape4 !TAPE_PARAMS ;
 168: push !TAPE_tape3 !TAPE_PARAMS ;
 169: call !FUNC_LIB_basic_add ;
 170: pop !TAPE_RAX !TAPE_tape2 ;
 171: push !TAPE_tape2 !TAPE_PARAMS ;
 172: call 604 ;
 173: pop !TAPE_RAX !TAPE_tape3 ;
 174: !TAPE_RAX !TAPE_tape3 = ;
 175: return ;
 176: jmp 186 ;
 177: nop ;
 178: !TAPE_tape3 !TAPE_tape0 = ;
 179: !TAPE_tape4 !TAPE_tape1 = ;
 180: push !TAPE_tape4 !TAPE_PARAMS ;
 181: push !TAPE_tape3 !TAPE_PARAMS ;
 182: call !FUNC_LIB_basic_add ;
 183: pop !TAPE_RAX !TAPE_tape2 ;
 184: !TAPE_RAX !TAPE_tape2 = ;
 185: return ;
 186: nop ;
 187: nop ;
 188: nop ;
 189: nop ;
 190: nop ;
 191: pop !TAPE_PARAMS !TAPE_tape0 ;
 192: pop !TAPE_PARAMS !TAPE_tape1 ;
 193: push !TAPE_tape0 !TAPE_PARAMS ;
 194: call !FUNC_LIB_isZero ;
 195: pop !TAPE_RAX !TAPE_tape2 ;
 196: jf !TAPE_tape2 202 ;
 197: push !TAPE_tape1 !TAPE_PARAMS ;
 198: call 604 ;
 199: pop !TAPE_RAX !TAPE_tape2 ;
 200: !TAPE_RAX !TAPE_tape2 = ;
 201: return ;
 202: nop ;
 203: push !TAPE_tape1 !TAPE_PARAMS ;
 204: call !FUNC_LIB_isZero ;
 205: pop !TAPE_RAX !TAPE_tape2 ;
 206: jf !TAPE_tape2 209 ;
 207: !TAPE_RAX !TAPE_tape0 = ;
 208: return ;
 209: nop ;
 210: push !TAPE_tape0 !TAPE_PARAMS ;
 211: call !FUNC_LIB_isNeg ;
 212: pop !TAPE_RAX !TAPE_tape2 ;
 213: jf !TAPE_tape2 219 ;
 214: push !TAPE_tape1 !TAPE_PARAMS ;
 215: call !FUNC_LIB_isNeg ;
 216: pop !TAPE_RAX !TAPE_tape4 ;
 217: !TAPE_tape3 !TAPE_tape4 = ;
 218: jmp 221 ;
 219: nop ;
 220: !TAPE_tape3 !TAPE_tape2 = ;
 221: nop ;
 222: jf !TAPE_tape3 234 ;
 223: push !TAPE_tape1 !TAPE_PARAMS ;
 224: call 604 ;
 225: pop !TAPE_RAX !TAPE_tape2 ;
 226: !TAPE_tape4 !TAPE_tape0 = ;
 227: push !TAPE_tape2 !TAPE_PARAMS ;
 228: push !TAPE_tape4 !TAPE_PARAMS ;
 229: call 1 ;
 230: pop !TAPE_RAX !TAPE_tape3 ;
 231: !TAPE_RAX !TAPE_tape3 = ;
 232: return ;
 233: jmp 300 ;
 234: nop ;
 235: push !TAPE_tape0 !TAPE_PARAMS ;
 236: call !FUNC_LIB_isNeg ;
 237: pop !TAPE_RAX !TAPE_tape2 ;
 238: jf !TAPE_tape2 244 ;
 239: push !TAPE_tape1 !TAPE_PARAMS ;
 240: call !FUNC_LIB_isPos ;
 241: pop !TAPE_RAX !TAPE_tape4 ;
 242: !TAPE_tape3 !TAPE_tape4 = ;
 243: jmp 246 ;
 244: nop ;
 245: !TAPE_tape3 !TAPE_tape2 = ;
 246: nop ;
 247: jf !TAPE_tape3 262 ;
 248: push !TAPE_tape0 !TAPE_PARAMS ;
 249: call 604 ;
 250: pop !TAPE_RAX !TAPE_tape2 ;
 251: !TAPE_tape4 !TAPE_tape1 = ;
 252: push !TAPE_tape4 !TAPE_PARAMS ;
 253: push !TAPE_tape2 !TAPE_PARAMS ;
 254: call !FUNC_LIB_basic_add ;
 255: pop !TAPE_RAX !TAPE_tape3 ;
 256: push !TAPE_tape3 !TAPE_PARAMS ;
 257: call 604 ;
 258: pop !TAPE_RAX !TAPE_tape2 ;
 259: !TAPE_RAX !TAPE_tape2 = ;
 260: return ;
 261: jmp 299 ;
 262: nop ;
 263: push !TAPE_tape0 !TAPE_PARAMS ;
 264: call !FUNC_LIB_isPos ;
 265: pop !TAPE_RAX !TAPE_tape2 ;
 266: jf !TAPE_tape2 272 ;
 267: push !TAPE_tape1 !TAPE_PARAMS ;
 268: call !FUNC_LIB_isNeg ;
 269: pop !TAPE_RAX !TAPE_tape4 ;
 270: !TAPE_tape3 !TAPE_tape4 = ;
 271: jmp 274 ;
 272: nop ;
 273: !TAPE_tape3 !TAPE_tape2 = ;
 274: nop ;
 275: jf !TAPE_tape3 287 ;
 276: push !TAPE_tape1 !TAPE_PARAMS ;
 277: call 604 ;
 278: pop !TAPE_RAX !TAPE_tape2 ;
 279: !TAPE_tape4 !TAPE_tape0 = ;
 280: push !TAPE_tape2 !TAPE_PARAMS ;
 281: push !TAPE_tape4 !TAPE_PARAMS ;
 282: call !FUNC_LIB_basic_add ;
 283: pop !TAPE_RAX !TAPE_tape3 ;
 284: !TAPE_RAX !TAPE_tape3 = ;
 285: return ;
 286: jmp 298 ;
 287: nop ;
 288: push !TAPE_tape1 !TAPE_PARAMS ;
 289: call 604 ;
 290: pop !TAPE_RAX !TAPE_tape2 ;
 291: !TAPE_tape4 !TAPE_tape0 = ;
 292: push !TAPE_tape2 !TAPE_PARAMS ;
 293: push !TAPE_tape4 !TAPE_PARAMS ;
 294: call 1 ;
 295: pop !TAPE_RAX !TAPE_tape3 ;
 296: !TAPE_RAX !TAPE_tape3 = ;
 297: return ;
 298: nop ;
 299: nop ;
 300: nop ;
 301: nop ;
 302: nop ;
 303: pop !TAPE_PARAMS !TAPE_tape0 ;
 304: pop !TAPE_PARAMS !TAPE_tape1 ;
 305: push !TAPE_tape0 !TAPE_PARAMS ;
 306: call !FUNC_LIB_isZero ;
 307: pop !TAPE_RAX !TAPE_tape10 ;
 308: jf !TAPE_tape10 311 ;
 309: !TAPE_tape11 !TAPE_tape10 = ;
 310: jmp 316 ;
 311: nop ;
 312: push !TAPE_tape1 !TAPE_PARAMS ;
 313: call !FUNC_LIB_isZero ;
 314: pop !TAPE_RAX !TAPE_tape10 ;
 315: !TAPE_tape11 !TAPE_tape10 = ;
 316: nop ;
 317: jf !TAPE_tape11 321 ;
 318: !TAPE_tape10 0 = ;
 319: !TAPE_RAX !TAPE_tape10 = ;
 320: return ;
 321: nop ;
 322: !TAPE_tape10 false = ;
 323: !TAPE_tape9 !TAPE_tape10 = ;
 324: push !TAPE_tape0 !TAPE_PARAMS ;
 325: call !FUNC_LIB_isNeg ;
 326: pop !TAPE_RAX !TAPE_tape10 ;
 327: jf !TAPE_tape10 334 ;
 328: push !TAPE_tape0 !TAPE_PARAMS ;
 329: call 604 ;
 330: pop !TAPE_RAX !TAPE_tape10 ;
 331: !TAPE_tape0 !TAPE_tape10 = ;
 332: !TAPE_tape10 true = ;
 333: !TAPE_tape9 !TAPE_tape10 = ;
 334: nop ;
 335: push !TAPE_tape1 !TAPE_PARAMS ;
 336: call !FUNC_LIB_isNeg ;
 337: pop !TAPE_RAX !TAPE_tape10 ;
 338: jf !TAPE_tape10 345 ;
 339: push !TAPE_tape1 !TAPE_PARAMS ;
 340: call 604 ;
 341: pop !TAPE_RAX !TAPE_tape10 ;
 342: !TAPE_tape1 !TAPE_tape10 = ;
 343: !TAPE_tape9 ! = !TAPE_tape10 ;
 344: !TAPE_tape9 !TAPE_tape10 = ;
 345: nop ;
 346: !TAPE_tape10 0 = ;
 347: !TAPE_tape2 !TAPE_tape10 = ;
 348: !TAPE_tape3 !TAPE_tape1 = ;
 349: nop ;
 350: !TAPE_tape10 0 = ;
 351: !TAPE_tape11 !TAPE_tape3 = ;
 352: push !TAPE_tape10 !TAPE_PARAMS ;
 353: push !TAPE_tape11 !TAPE_PARAMS ;
 354: call 734 ;
 355: pop !TAPE_RAX !TAPE_tape7 ;
 356: !TAPE_tape7 ! = !TAPE_tape10 ;
 357: jf !TAPE_tape10 359 ;
 358: jmp 415 ;
 359: nop ;
 360: !TAPE_tape10 1 = ;
 361: !TAPE_tape4 !TAPE_tape10 = ;
 362: !TAPE_tape10 2 = ;
 363: !TAPE_tape5 !TAPE_tape10 = ;
 364: !TAPE_tape6 !TAPE_tape0 = ;
 365: !TAPE_tape10 !TAPE_tape0 = ;
 366: !TAPE_tape11 !TAPE_tape0 = ;
 367: push !TAPE_tape11 !TAPE_PARAMS ;
 368: push !TAPE_tape10 !TAPE_PARAMS ;
 369: call 1 ;
 370: pop !TAPE_RAX !TAPE_tape7 ;
 371: !TAPE_tape8 !TAPE_tape7 = ;
 372: nop ;
 373: !TAPE_tape10 !TAPE_tape8 = ;
 374: !TAPE_tape11 !TAPE_tape3 = ;
 375: push !TAPE_tape11 !TAPE_PARAMS ;
 376: push !TAPE_tape10 !TAPE_PARAMS ;
 377: call 710 ;
 378: pop !TAPE_RAX !TAPE_tape7 ;
 379: !TAPE_tape7 ! = !TAPE_tape10 ;
 380: jf !TAPE_tape10 382 ;
 381: jmp 400 ;
 382: nop ;
 383: !TAPE_tape4 !TAPE_tape5 = ;
 384: !TAPE_tape6 !TAPE_tape8 = ;
 385: !TAPE_tape10 !TAPE_tape5 = ;
 386: !TAPE_tape11 !TAPE_tape5 = ;
 387: push !TAPE_tape11 !TAPE_PARAMS ;
 388: push !TAPE_tape10 !TAPE_PARAMS ;
 389: call 1 ;
 390: pop !TAPE_RAX !TAPE_tape7 ;
 391: !TAPE_tape5 !TAPE_tape7 = ;
 392: !TAPE_tape10 !TAPE_tape8 = ;
 393: !TAPE_tape11 !TAPE_tape8 = ;
 394: push !TAPE_tape11 !TAPE_PARAMS ;
 395: push !TAPE_tape10 !TAPE_PARAMS ;
 396: call 1 ;
 397: pop !TAPE_RAX !TAPE_tape7 ;
 398: !TAPE_tape8 !TAPE_tape7 = ;
 399: jmp 372 ;
 400: !TAPE_tape10 !TAPE_tape2 = ;
 401: !TAPE_tape11 !TAPE_tape6 = ;
 402: push !TAPE_tape11 !TAPE_PARAMS ;
 403: push !TAPE_tape10 !TAPE_PARAMS ;
 404: call 1 ;
 405: pop !TAPE_RAX !TAPE_tape7 ;
 406: !TAPE_tape2 !TAPE_tape7 = ;
 407: !TAPE_tape10 !TAPE_tape3 = ;
 408: !TAPE_tape11 !TAPE_tape4 = ;
 409: push !TAPE_tape11 !TAPE_PARAMS ;
 410: push !TAPE_tape10 !TAPE_PARAMS ;
 411: call 190 ;
 412: pop !TAPE_RAX !TAPE_tape7 ;
 413: !TAPE_tape3 !TAPE_tape7 = ;
 414: jmp 349 ;
 415: jf !TAPE_tape9 420 ;
 416: push !TAPE_tape2 !TAPE_PARAMS ;
 417: call 604 ;
 418: pop !TAPE_RAX !TAPE_tape10 ;
 419: !TAPE_tape2 !TAPE_tape10 = ;
 420: nop ;
 421: !TAPE_RAX !TAPE_tape2 = ;
 422: return ;
 423: nop ;
 424: nop ;
 425: pop !TAPE_PARAMS !TAPE_tape0 ;
 426: pop !TAPE_PARAMS !TAPE_tape1 ;
 427: push !TAPE_tape0 !TAPE_PARAMS ;
 428: call !FUNC_LIB_isZero ;
 429: pop !TAPE_RAX !TAPE_tape6 ;
 430: jf !TAPE_tape6 434 ;
 431: !TAPE_tape6 0 = ;
 432: !TAPE_RAX !TAPE_tape6 = ;
 433: return ;
 434: nop ;
 435: !TAPE_tape6 0 = ;
 436: !TAPE_tape7 0 = ;
 437: !TAPE_tape5 !TAPE_tape0 = ;
 438: push !TAPE_tape6 !TAPE_PARAMS ;
 439: push !TAPE_tape5 !TAPE_PARAMS ;
 440: call 620 ;
 441: pop !TAPE_RAX !TAPE_tape2 ;
 442: jf !TAPE_tape2 450 ;
 443: !TAPE_tape6 !TAPE_tape1 = ;
 444: push !TAPE_tape7 !TAPE_PARAMS ;
 445: push !TAPE_tape6 !TAPE_PARAMS ;
 446: call 620 ;
 447: pop !TAPE_RAX !TAPE_tape5 ;
 448: !TAPE_tape6 !TAPE_tape5 = ;
 449: jmp 452 ;
 450: nop ;
 451: !TAPE_tape6 !TAPE_tape2 = ;
 452: nop ;
 453: jf !TAPE_tape6 466 ;
 454: push !TAPE_tape0 !TAPE_PARAMS ;
 455: call 604 ;
 456: pop !TAPE_RAX !TAPE_tape6 ;
 457: push !TAPE_tape1 !TAPE_PARAMS ;
 458: call 604 ;
 459: pop !TAPE_RAX !TAPE_tape7 ;
 460: push !TAPE_tape7 !TAPE_PARAMS ;
 461: push !TAPE_tape6 !TAPE_PARAMS ;
 462: call 424 ;
 463: pop !TAPE_RAX !TAPE_tape5 ;
 464: !TAPE_RAX !TAPE_tape5 = ;
 465: return ;
 466: nop ;
 467: !TAPE_tape6 0 = ;
 468: !TAPE_tape7 !TAPE_tape0 = ;
 469: push !TAPE_tape6 !TAPE_PARAMS ;
 470: push !TAPE_tape7 !TAPE_PARAMS ;
 471: call 620 ;
 472: pop !TAPE_RAX !TAPE_tape5 ;
 473: jf !TAPE_tape5 487 ;
 474: push !TAPE_tape0 !TAPE_PARAMS ;
 475: call 604 ;
 476: pop !TAPE_RAX !TAPE_tape6 ;
 477: !TAPE_tape7 !TAPE_tape1 = ;
 478: push !TAPE_tape7 !TAPE_PARAMS ;
 479: push !TAPE_tape6 !TAPE_PARAMS ;
 480: call 424 ;
 481: pop !TAPE_RAX !TAPE_tape5 ;
 482: push !TAPE_tape5 !TAPE_PARAMS ;
 483: call 604 ;
 484: pop !TAPE_RAX !TAPE_tape6 ;
 485: !TAPE_RAX !TAPE_tape6 = ;
 486: return ;
 487: nop ;
 488: !TAPE_tape6 0 = ;
 489: !TAPE_tape7 !TAPE_tape1 = ;
 490: push !TAPE_tape6 !TAPE_PARAMS ;
 491: push !TAPE_tape7 !TAPE_PARAMS ;
 492: call 620 ;
 493: pop !TAPE_RAX !TAPE_tape5 ;
 494: jf !TAPE_tape5 508 ;
 495: push !TAPE_tape1 !TAPE_PARAMS ;
 496: call 604 ;
 497: pop !TAPE_RAX !TAPE_tape6 ;
 498: !TAPE_tape7 !TAPE_tape0 = ;
 499: push !TAPE_tape6 !TAPE_PARAMS ;
 500: push !TAPE_tape7 !TAPE_PARAMS ;
 501: call 424 ;
 502: pop !TAPE_RAX !TAPE_tape5 ;
 503: push !TAPE_tape5 !TAPE_PARAMS ;
 504: call 604 ;
 505: pop !TAPE_RAX !TAPE_tape6 ;
 506: !TAPE_RAX !TAPE_tape6 = ;
 507: return ;
 508: nop ;
 509: !TAPE_tape6 0 = ;
 510: !TAPE_tape8 !TAPE_tape6 = ;
 511: !TAPE_tape3 !TAPE_tape0 = ;
 512: nop ;
 513: !TAPE_tape6 !TAPE_tape3 = ;
 514: !TAPE_tape7 !TAPE_tape1 = ;
 515: push !TAPE_tape7 !TAPE_PARAMS ;
 516: push !TAPE_tape6 !TAPE_PARAMS ;
 517: call 747 ;
 518: pop !TAPE_RAX !TAPE_tape5 ;
 519: !TAPE_tape5 ! = !TAPE_tape6 ;
 520: jf !TAPE_tape6 522 ;
 521: jmp 577 ;
 522: nop ;
 523: !TAPE_tape6 0 = ;
 524: !TAPE_tape4 !TAPE_tape6 = ;
 525: !TAPE_tape6 1 = ;
 526: !TAPE_tape9 !TAPE_tape6 = ;
 527: nop ;
 528: !TAPE_tape6 !TAPE_tape8 = ;
 529: !TAPE_tape7 !TAPE_tape9 = ;
 530: push !TAPE_tape7 !TAPE_PARAMS ;
 531: push !TAPE_tape6 !TAPE_PARAMS ;
 532: call 1 ;
 533: pop !TAPE_RAX !TAPE_tape5 ;
 534: !TAPE_tape6 !TAPE_tape1 = ;
 535: push !TAPE_tape5 !TAPE_PARAMS ;
 536: push !TAPE_tape6 !TAPE_PARAMS ;
 537: call 302 ;
 538: pop !TAPE_RAX !TAPE_tape7 ;
 539: !TAPE_tape6 !TAPE_tape0 = ;
 540: push !TAPE_tape6 !TAPE_PARAMS ;
 541: push !TAPE_tape7 !TAPE_PARAMS ;
 542: call 710 ;
 543: pop !TAPE_RAX !TAPE_tape5 ;
 544: !TAPE_tape5 ! = !TAPE_tape6 ;
 545: jf !TAPE_tape6 547 ;
 546: jmp 557 ;
 547: nop ;
 548: !TAPE_tape4 !TAPE_tape9 = ;
 549: !TAPE_tape6 !TAPE_tape9 = ;
 550: !TAPE_tape7 !TAPE_tape9 = ;
 551: push !TAPE_tape7 !TAPE_PARAMS ;
 552: push !TAPE_tape6 !TAPE_PARAMS ;
 553: call 1 ;
 554: pop !TAPE_RAX !TAPE_tape5 ;
 555: !TAPE_tape9 !TAPE_tape5 = ;
 556: jmp 527 ;
 557: !TAPE_tape6 !TAPE_tape8 = ;
 558: !TAPE_tape7 !TAPE_tape4 = ;
 559: push !TAPE_tape7 !TAPE_PARAMS ;
 560: push !TAPE_tape6 !TAPE_PARAMS ;
 561: call 1 ;
 562: pop !TAPE_RAX !TAPE_tape5 ;
 563: !TAPE_tape8 !TAPE_tape5 = ;
 564: !TAPE_tape6 !TAPE_tape1 = ;
 565: !TAPE_tape7 !TAPE_tape8 = ;
 566: push !TAPE_tape7 !TAPE_PARAMS ;
 567: push !TAPE_tape6 !TAPE_PARAMS ;
 568: call 302 ;
 569: pop !TAPE_RAX !TAPE_tape5 ;
 570: !TAPE_tape6 !TAPE_tape0 = ;
 571: push !TAPE_tape5 !TAPE_PARAMS ;
 572: push !TAPE_tape6 !TAPE_PARAMS ;
 573: call 190 ;
 574: pop !TAPE_RAX !TAPE_tape7 ;
 575: !TAPE_tape3 !TAPE_tape7 = ;
 576: jmp 512 ;
 577: !TAPE_RAX !TAPE_tape8 = ;
 578: return ;
 579: nop ;
 580: nop ;
 581: pop !TAPE_PARAMS !TAPE_tape0 ;
 582: pop !TAPE_PARAMS !TAPE_tape1 ;
 583: !TAPE_tape5 !TAPE_tape0 = ;
 584: !TAPE_tape3 !TAPE_tape1 = ;
 585: push !TAPE_tape3 !TAPE_PARAMS ;
 586: push !TAPE_tape5 !TAPE_PARAMS ;
 587: call 424 ;
 588: pop !TAPE_RAX !TAPE_tape4 ;
 589: !TAPE_tape2 !TAPE_tape4 = ;
 590: !TAPE_tape5 !TAPE_tape1 = ;
 591: !TAPE_tape3 !TAPE_tape2 = ;
 592: push !TAPE_tape3 !TAPE_PARAMS ;
 593: push !TAPE_tape5 !TAPE_PARAMS ;
 594: call 302 ;
 595: pop !TAPE_RAX !TAPE_tape4 ;
 596: !TAPE_tape5 !TAPE_tape0 = ;
 597: push !TAPE_tape4 !TAPE_PARAMS ;
 598: push !TAPE_tape5 !TAPE_PARAMS ;
 599: call 190 ;
 600: pop !TAPE_RAX !TAPE_tape3 ;
 601: !TAPE_RAX !TAPE_tape3 = ;
 602: return ;
 603: nop ;
 604: nop ;
 605: pop !TAPE_PARAMS !TAPE_tape0 ;
 606: push !TAPE_tape0 !TAPE_PARAMS ;
 607: call !FUNC_LIB_isZero ;
 608: pop !TAPE_RAX !TAPE_tape1 ;
 609: jf !TAPE_tape1 613 ;
 610: !TAPE_tape1 0 = ;
 611: !TAPE_RAX !TAPE_tape1 = ;
 612: return ;
 613: nop ;
 614: push !TAPE_tape0 !TAPE_PARAMS ;
 615: call !FUNC_LIB_basic_neg ;
 616: pop !TAPE_RAX !TAPE_tape1 ;
 617: !TAPE_RAX !TAPE_tape1 = ;
 618: return ;
 619: nop ;
 620: nop ;
 621: pop !TAPE_PARAMS !TAPE_tape0 ;
 622: pop !TAPE_PARAMS !TAPE_tape1 ;
 623: push !TAPE_tape0 !TAPE_PARAMS ;
 624: call !FUNC_LIB_isNeg ;
 625: pop !TAPE_RAX !TAPE_tape3 ;
 626: jf !TAPE_tape3 650 ;
 627: push !TAPE_tape1 !TAPE_PARAMS ;
 628: call !FUNC_LIB_isNeg ;
 629: pop !TAPE_RAX !TAPE_tape3 ;
 630: jf !TAPE_tape3 644 ;
 631: push !TAPE_tape1 !TAPE_PARAMS ;
 632: call 604 ;
 633: pop !TAPE_RAX !TAPE_tape3 ;
 634: push !TAPE_tape0 !TAPE_PARAMS ;
 635: call 604 ;
 636: pop !TAPE_RAX !TAPE_tape4 ;
 637: push !TAPE_tape4 !TAPE_PARAMS ;
 638: push !TAPE_tape3 !TAPE_PARAMS ;
 639: call 620 ;
 640: pop !TAPE_RAX !TAPE_tape2 ;
 641: !TAPE_RAX !TAPE_tape2 = ;
 642: return ;
 643: jmp 648 ;
 644: nop ;
 645: !TAPE_tape3 true = ;
 646: !TAPE_RAX !TAPE_tape3 = ;
 647: return ;
 648: nop ;
 649: jmp 708 ;
 650: nop ;
 651: push !TAPE_tape0 !TAPE_PARAMS ;
 652: call !FUNC_LIB_isZero ;
 653: pop !TAPE_RAX !TAPE_tape3 ;
 654: jf !TAPE_tape3 679 ;
 655: push !TAPE_tape1 !TAPE_PARAMS ;
 656: call !FUNC_LIB_isNeg ;
 657: pop !TAPE_RAX !TAPE_tape3 ;
 658: jf !TAPE_tape3 663 ;
 659: !TAPE_tape3 false = ;
 660: !TAPE_RAX !TAPE_tape3 = ;
 661: return ;
 662: jmp 677 ;
 663: nop ;
 664: push !TAPE_tape1 !TAPE_PARAMS ;
 665: call !FUNC_LIB_isZero ;
 666: pop !TAPE_RAX !TAPE_tape3 ;
 667: jf !TAPE_tape3 672 ;
 668: !TAPE_tape3 false = ;
 669: !TAPE_RAX !TAPE_tape3 = ;
 670: return ;
 671: jmp 676 ;
 672: nop ;
 673: !TAPE_tape3 true = ;
 674: !TAPE_RAX !TAPE_tape3 = ;
 675: return ;
 676: nop ;
 677: nop ;
 678: jmp 707 ;
 679: nop ;
 680: push !TAPE_tape1 !TAPE_PARAMS ;
 681: call !FUNC_LIB_isNeg ;
 682: pop !TAPE_RAX !TAPE_tape3 ;
 683: jf !TAPE_tape3 686 ;
 684: !TAPE_tape4 !TAPE_tape3 = ;
 685: jmp 691 ;
 686: nop ;
 687: push !TAPE_tape1 !TAPE_PARAMS ;
 688: call !FUNC_LIB_isZero ;
 689: pop !TAPE_RAX !TAPE_tape3 ;
 690: !TAPE_tape4 !TAPE_tape3 = ;
 691: nop ;
 692: jf !TAPE_tape4 697 ;
 693: !TAPE_tape3 false = ;
 694: !TAPE_RAX !TAPE_tape3 = ;
 695: return ;
 696: jmp 706 ;
 697: nop ;
 698: !TAPE_tape3 !TAPE_tape0 = ;
 699: !TAPE_tape4 !TAPE_tape1 = ;
 700: push !TAPE_tape4 !TAPE_PARAMS ;
 701: push !TAPE_tape3 !TAPE_PARAMS ;
 702: call !FUNC_LIB_basic_lt ;
 703: pop !TAPE_RAX !TAPE_tape2 ;
 704: !TAPE_RAX !TAPE_tape2 = ;
 705: return ;
 706: nop ;
 707: nop ;
 708: nop ;
 709: nop ;
 710: nop ;
 711: pop !TAPE_PARAMS !TAPE_tape0 ;
 712: pop !TAPE_PARAMS !TAPE_tape1 ;
 713: !TAPE_tape5 !TAPE_tape0 = ;
 714: !TAPE_tape3 !TAPE_tape1 = ;
 715: push !TAPE_tape3 !TAPE_PARAMS ;
 716: push !TAPE_tape5 !TAPE_PARAMS ;
 717: call 760 ;
 718: pop !TAPE_RAX !TAPE_tape4 ;
 719: jf !TAPE_tape4 722 ;
 720: !TAPE_tape5 !TAPE_tape4 = ;
 721: jmp 730 ;
 722: nop ;
 723: !TAPE_tape3 !TAPE_tape0 = ;
 724: !TAPE_tape4 !TAPE_tape1 = ;
 725: push !TAPE_tape4 !TAPE_PARAMS ;
 726: push !TAPE_tape3 !TAPE_PARAMS ;
 727: call 620 ;
 728: pop !TAPE_RAX !TAPE_tape2 ;
 729: !TAPE_tape5 !TAPE_tape2 = ;
 730: nop ;
 731: !TAPE_RAX !TAPE_tape5 = ;
 732: return ;
 733: nop ;
 734: nop ;
 735: pop !TAPE_PARAMS !TAPE_tape0 ;
 736: pop !TAPE_PARAMS !TAPE_tape1 ;
 737: !TAPE_tape4 !TAPE_tape0 = ;
 738: !TAPE_tape2 !TAPE_tape1 = ;
 739: push !TAPE_tape2 !TAPE_PARAMS ;
 740: push !TAPE_tape4 !TAPE_PARAMS ;
 741: call 710 ;
 742: pop !TAPE_RAX !TAPE_tape3 ;
 743: !TAPE_tape3 ! = !TAPE_tape4 ;
 744: !TAPE_RAX !TAPE_tape4 = ;
 745: return ;
 746: nop ;
 747: nop ;
 748: pop !TAPE_PARAMS !TAPE_tape0 ;
 749: pop !TAPE_PARAMS !TAPE_tape1 ;
 750: !TAPE_tape4 !TAPE_tape0 = ;
 751: !TAPE_tape2 !TAPE_tape1 = ;
 752: push !TAPE_tape2 !TAPE_PARAMS ;
 753: push !TAPE_tape4 !TAPE_PARAMS ;
 754: call 620 ;
 755: pop !TAPE_RAX !TAPE_tape3 ;
 756: !TAPE_tape3 ! = !TAPE_tape4 ;
 757: !TAPE_RAX !TAPE_tape4 = ;
 758: return ;
 759: nop ;
 760: nop ;
 761: pop !TAPE_PARAMS !TAPE_tape0 ;
 762: pop !TAPE_PARAMS !TAPE_tape1 ;
 763: push !TAPE_tape0 !TAPE_PARAMS ;
 764: call !FUNC_LIB_isZero ;
 765: pop !TAPE_RAX !TAPE_tape4 ;
 766: jf !TAPE_tape4 779 ;
 767: push !TAPE_tape1 !TAPE_PARAMS ;
 768: call !FUNC_LIB_isZero ;
 769: pop !TAPE_RAX !TAPE_tape4 ;
 770: jf !TAPE_tape4 774 ;
 771: !TAPE_tape4 true = ;
 772: !TAPE_RAX !TAPE_tape4 = ;
 773: return ;
 774: nop ;
 775: !TAPE_tape4 false = ;
 776: !TAPE_RAX !TAPE_tape4 = ;
 777: return ;
 778: jmp 823 ;
 779: nop ;
 780: push !TAPE_tape0 !TAPE_PARAMS ;
 781: call !FUNC_LIB_isNeg ;
 782: pop !TAPE_RAX !TAPE_tape4 ;
 783: jf !TAPE_tape4 805 ;
 784: push !TAPE_tape1 !TAPE_PARAMS ;
 785: call !FUNC_LIB_isNeg ;
 786: pop !TAPE_RAX !TAPE_tape4 ;
 787: jf !TAPE_tape4 800 ;
 788: push !TAPE_tape0 !TAPE_PARAMS ;
 789: call 604 ;
 790: pop !TAPE_RAX !TAPE_tape4 ;
 791: push !TAPE_tape1 !TAPE_PARAMS ;
 792: call 604 ;
 793: pop !TAPE_RAX !TAPE_tape2 ;
 794: push !TAPE_tape2 !TAPE_PARAMS ;
 795: push !TAPE_tape4 !TAPE_PARAMS ;
 796: call !FUNC_LIB_basic_eq ;
 797: pop !TAPE_RAX !TAPE_tape3 ;
 798: !TAPE_RAX !TAPE_tape3 = ;
 799: return ;
 800: nop ;
 801: !TAPE_tape4 false = ;
 802: !TAPE_RAX !TAPE_tape4 = ;
 803: return ;
 804: jmp 822 ;
 805: nop ;
 806: push !TAPE_tape1 !TAPE_PARAMS ;
 807: call !FUNC_LIB_isPos ;
 808: pop !TAPE_RAX !TAPE_tape4 ;
 809: jf !TAPE_tape4 818 ;
 810: !TAPE_tape4 !TAPE_tape0 = ;
 811: !TAPE_tape2 !TAPE_tape1 = ;
 812: push !TAPE_tape2 !TAPE_PARAMS ;
 813: push !TAPE_tape4 !TAPE_PARAMS ;
 814: call !FUNC_LIB_basic_eq ;
 815: pop !TAPE_RAX !TAPE_tape3 ;
 816: !TAPE_RAX !TAPE_tape3 = ;
 817: return ;
 818: nop ;
 819: !TAPE_tape4 false = ;
 820: !TAPE_RAX !TAPE_tape4 = ;
 821: return ;
 822: nop ;
 823: nop ;
 824: nop ;
 825: nop ;
 826: pop !TAPE_PARAMS !TAPE_tape0 ;
 827: pop !TAPE_PARAMS !TAPE_tape1 ;
 828: !TAPE_tape4 !TAPE_tape0 = ;
 829: !TAPE_tape2 !TAPE_tape1 = ;
 830: push !TAPE_tape2 !TAPE_PARAMS ;
 831: push !TAPE_tape4 !TAPE_PARAMS ;
 832: call 760 ;
 833: pop !TAPE_RAX !TAPE_tape3 ;
 834: !TAPE_tape3 ! = !TAPE_tape4 ;
 835: !TAPE_RAX !TAPE_tape4 = ;
 836: return ;
 837: nop ;
 838: nop ;
 839: pop !TAPE_PARAMS !TAPE_tape0 ;
 840: pop !TAPE_PARAMS !TAPE_tape1 ;
 841: push !TAPE_tape0 !TAPE_PARAMS ;
 842: call !FUNC_LIB_isZero ;
 843: pop !TAPE_RAX !TAPE_tape3 ;
 844: jf !TAPE_tape3 847 ;
 845: !TAPE_RAX !TAPE_tape1 = ;
 846: return ;
 847: nop ;
 848: push !TAPE_tape1 !TAPE_PARAMS ;
 849: call !FUNC_LIB_isZero ;
 850: pop !TAPE_RAX !TAPE_tape3 ;
 851: jf !TAPE_tape3 854 ;
 852: !TAPE_RAX !TAPE_tape0 = ;
 853: return ;
 854: nop ;
 855: !TAPE_tape3 !TAPE_tape0 = ;
 856: !TAPE_tape4 !TAPE_tape1 = ;
 857: push !TAPE_tape4 !TAPE_PARAMS ;
 858: push !TAPE_tape3 !TAPE_PARAMS ;
 859: call !FUNC_LIB_basic_xor ;
 860: pop !TAPE_RAX !TAPE_tape2 ;
 861: !TAPE_RAX !TAPE_tape2 = ;
 862: return ;
 863: nop ;
 864: nop ;
 865: pop !TAPE_PARAMS !TAPE_tape0 ;
 866: pop !TAPE_PARAMS !TAPE_tape1 ;
 867: call !FUNC_LIB_getMemBitIndex ;
 868: pop !TAPE_RAX !TAPE_tape4 ;
 869: !TAPE_tape11 !TAPE_tape4 = ;
 870: !TAPE_tape4 false = ;
 871: !TAPE_tape2 !TAPE_tape4 = ;
 872: !TAPE_tape4 0 = ;
 873: !TAPE_tape7 !TAPE_tape4 = ;
 874: !TAPE_tape14 !TAPE_tape1 = ;
 875: nop ;
 876: push !TAPE_tape14 !TAPE_PARAMS ;
 877: call !FUNC_LIB_isZero ;
 878: pop !TAPE_RAX !TAPE_tape4 ;
 879: !TAPE_tape4 ! = !TAPE_tape8 ;
 880: jf !TAPE_tape8 883 ;
 881: !TAPE_tape4 !TAPE_tape8 = ;
 882: jmp 886 ;
 883: nop ;
 884: !TAPE_tape2 ! = !TAPE_tape8 ;
 885: !TAPE_tape4 !TAPE_tape8 = ;
 886: nop ;
 887: !TAPE_tape4 ! = !TAPE_tape8 ;
 888: jf !TAPE_tape8 890 ;
 889: jmp 1023 ;
 890: nop ;
 891: !TAPE_tape4 1 = ;
 892: !TAPE_tape8 2 = ;
 893: !TAPE_tape6 !TAPE_tape0 = ;
 894: !TAPE_tape3 !TAPE_tape7 = ;
 895: push !TAPE_tape3 !TAPE_PARAMS ;
 896: push !TAPE_tape6 !TAPE_PARAMS ;
 897: call 1 ;
 898: pop !TAPE_RAX !TAPE_tape9 ;
 899: !TAPE_tape6 !TAPE_tape0 = ;
 900: !TAPE_tape3 !TAPE_tape7 = ;
 901: push !TAPE_tape3 !TAPE_PARAMS ;
 902: push !TAPE_tape6 !TAPE_PARAMS ;
 903: call 1 ;
 904: pop !TAPE_RAX !TAPE_tape12 ;
 905: push !TAPE_tape4 !TAPE_PARAMS ;
 906: push !TAPE_tape12 !TAPE_PARAMS ;
 907: call 1 ;
 908: pop !TAPE_RAX !TAPE_tape6 ;
 909: push !TAPE_tape6 !TAPE_PARAMS ;
 910: push !TAPE_tape9 !TAPE_PARAMS ;
 911: call 302 ;
 912: pop !TAPE_RAX !TAPE_tape4 ;
 913: push !TAPE_tape8 !TAPE_PARAMS ;
 914: push !TAPE_tape4 !TAPE_PARAMS ;
 915: call 424 ;
 916: pop !TAPE_RAX !TAPE_tape6 ;
 917: !TAPE_tape4 !TAPE_tape0 = ;
 918: push !TAPE_tape4 !TAPE_PARAMS ;
 919: push !TAPE_tape6 !TAPE_PARAMS ;
 920: call 1 ;
 921: pop !TAPE_RAX !TAPE_tape8 ;
 922: !TAPE_tape10 !TAPE_tape8 = ;
 923: nop ;
 924: !TAPE_tape4 !TAPE_tape11 = ;
 925: !TAPE_tape8 !TAPE_tape10 = ;
 926: push !TAPE_tape8 !TAPE_PARAMS ;
 927: push !TAPE_tape4 !TAPE_PARAMS ;
 928: call 734 ;
 929: pop !TAPE_RAX !TAPE_tape6 ;
 930: !TAPE_tape6 ! = !TAPE_tape4 ;
 931: jf !TAPE_tape4 933 ;
 932: jmp 943 ;
 933: nop ;
 934: !TAPE_tape4 1 = ;
 935: !TAPE_tape8 !TAPE_tape11 = ;
 936: push !TAPE_tape4 !TAPE_PARAMS ;
 937: push !TAPE_tape8 !TAPE_PARAMS ;
 938: call 190 ;
 939: pop !TAPE_RAX !TAPE_tape6 ;
 940: !TAPE_tape11 !TAPE_tape6 = ;
 941: call !FUNC_LIB_moveMemHeadLeft ;
 942: jmp 923 ;
 943: nop ;
 944: !TAPE_tape4 !TAPE_tape11 = ;
 945: !TAPE_tape8 !TAPE_tape10 = ;
 946: push !TAPE_tape8 !TAPE_PARAMS ;
 947: push !TAPE_tape4 !TAPE_PARAMS ;
 948: call 620 ;
 949: pop !TAPE_RAX !TAPE_tape6 ;
 950: !TAPE_tape6 ! = !TAPE_tape4 ;
 951: jf !TAPE_tape4 953 ;
 952: jmp 963 ;
 953: nop ;
 954: !TAPE_tape4 1 = ;
 955: !TAPE_tape8 !TAPE_tape11 = ;
 956: push !TAPE_tape4 !TAPE_PARAMS ;
 957: push !TAPE_tape8 !TAPE_PARAMS ;
 958: call 1 ;
 959: pop !TAPE_RAX !TAPE_tape6 ;
 960: !TAPE_tape11 !TAPE_tape6 = ;
 961: call !FUNC_LIB_moveMemHeadRight ;
 962: jmp 943 ;
 963: !TAPE_tape2 ! = !TAPE_tape4 ;
 964: jf !TAPE_tape4 981 ;
 965: push !TAPE_tape14 !TAPE_PARAMS ;
 966: call !FUNC_LIB_isNeg ;
 967: pop !TAPE_RAX !TAPE_tape4 ;
 968: jf !TAPE_tape4 975 ;
 969: call !FUNC_LIB_setMemBitOne ;
 970: push !TAPE_tape14 !TAPE_PARAMS ;
 971: call 604 ;
 972: pop !TAPE_RAX !TAPE_tape4 ;
 973: !TAPE_tape14 !TAPE_tape4 = ;
 974: jmp 977 ;
 975: nop ;
 976: call !FUNC_LIB_setMemBitZero ;
 977: nop ;
 978: !TAPE_tape4 true = ;
 979: !TAPE_tape2 !TAPE_tape4 = ;
 980: jmp 1014 ;
 981: nop ;
 982: !TAPE_tape4 2 = ;
 983: !TAPE_tape8 !TAPE_tape14 = ;
 984: push !TAPE_tape4 !TAPE_PARAMS ;
 985: push !TAPE_tape8 !TAPE_PARAMS ;
 986: call 424 ;
 987: pop !TAPE_RAX !TAPE_tape6 ;
 988: !TAPE_tape5 !TAPE_tape6 = ;
 989: !TAPE_tape4 2 = ;
 990: !TAPE_tape8 !TAPE_tape5 = ;
 991: push !TAPE_tape8 !TAPE_PARAMS ;
 992: push !TAPE_tape4 !TAPE_PARAMS ;
 993: call 302 ;
 994: pop !TAPE_RAX !TAPE_tape6 ;
 995: !TAPE_tape4 !TAPE_tape14 = ;
 996: push !TAPE_tape6 !TAPE_PARAMS ;
 997: push !TAPE_tape4 !TAPE_PARAMS ;
 998: call 190 ;
 999: pop !TAPE_RAX !TAPE_tape8 ;
1000: !TAPE_tape13 !TAPE_tape8 = ;
1001: !TAPE_tape4 1 = ;
1002: !TAPE_tape8 !TAPE_tape13 = ;
1003: push !TAPE_tape4 !TAPE_PARAMS ;
1004: push !TAPE_tape8 !TAPE_PARAMS ;
1005: call 760 ;
1006: pop !TAPE_RAX !TAPE_tape6 ;
1007: jf !TAPE_tape6 1010 ;
1008: call !FUNC_LIB_setMemBitOne ;
1009: jmp 1012 ;
1010: nop ;
1011: call !FUNC_LIB_setMemBitZero ;
1012: nop ;
1013: !TAPE_tape14 !TAPE_tape5 = ;
1014: nop ;
1015: !TAPE_tape4 1 = ;
1016: !TAPE_tape8 !TAPE_tape7 = ;
1017: push !TAPE_tape4 !TAPE_PARAMS ;
1018: push !TAPE_tape8 !TAPE_PARAMS ;
1019: call 1 ;
1020: pop !TAPE_RAX !TAPE_tape6 ;
1021: !TAPE_tape7 !TAPE_tape6 = ;
1022: jmp 875 ;
1023: !TAPE_tape4 1 = ;
1024: !TAPE_tape8 2 = ;
1025: !TAPE_tape6 !TAPE_tape0 = ;
1026: !TAPE_tape3 !TAPE_tape7 = ;
1027: push !TAPE_tape3 !TAPE_PARAMS ;
1028: push !TAPE_tape6 !TAPE_PARAMS ;
1029: call 1 ;
1030: pop !TAPE_RAX !TAPE_tape9 ;
1031: !TAPE_tape6 !TAPE_tape0 = ;
1032: !TAPE_tape3 !TAPE_tape7 = ;
1033: push !TAPE_tape3 !TAPE_PARAMS ;
1034: push !TAPE_tape6 !TAPE_PARAMS ;
1035: call 1 ;
1036: pop !TAPE_RAX !TAPE_tape12 ;
1037: push !TAPE_tape4 !TAPE_PARAMS ;
1038: push !TAPE_tape12 !TAPE_PARAMS ;
1039: call 1 ;
1040: pop !TAPE_RAX !TAPE_tape6 ;
1041: push !TAPE_tape6 !TAPE_PARAMS ;
1042: push !TAPE_tape9 !TAPE_PARAMS ;
1043: call 302 ;
1044: pop !TAPE_RAX !TAPE_tape4 ;
1045: push !TAPE_tape8 !TAPE_PARAMS ;
1046: push !TAPE_tape4 !TAPE_PARAMS ;
1047: call 424 ;
1048: pop !TAPE_RAX !TAPE_tape6 ;
1049: !TAPE_tape4 !TAPE_tape0 = ;
1050: push !TAPE_tape4 !TAPE_PARAMS ;
1051: push !TAPE_tape6 !TAPE_PARAMS ;
1052: call 1 ;
1053: pop !TAPE_RAX !TAPE_tape8 ;
1054: !TAPE_tape10 !TAPE_tape8 = ;
1055: nop ;
1056: !TAPE_tape4 !TAPE_tape11 = ;
1057: !TAPE_tape8 !TAPE_tape10 = ;
1058: push !TAPE_tape8 !TAPE_PARAMS ;
1059: push !TAPE_tape4 !TAPE_PARAMS ;
1060: call 620 ;
1061: pop !TAPE_RAX !TAPE_tape6 ;
1062: !TAPE_tape6 ! = !TAPE_tape4 ;
1063: jf !TAPE_tape4 1065 ;
1064: jmp 1075 ;
1065: nop ;
1066: !TAPE_tape4 1 = ;
1067: !TAPE_tape8 !TAPE_tape11 = ;
1068: push !TAPE_tape4 !TAPE_PARAMS ;
1069: push !TAPE_tape8 !TAPE_PARAMS ;
1070: call 1 ;
1071: pop !TAPE_RAX !TAPE_tape6 ;
1072: !TAPE_tape11 !TAPE_tape6 = ;
1073: call !FUNC_LIB_moveMemHeadRight ;
1074: jmp 1055 ;
1075: call !FUNC_LIB_setMemBitBlank ;
1076: push !TAPE_tape11 !TAPE_PARAMS ;
1077: call !FUNC_LIB_setMemBitIndex ;
1078: return ;
1079: nop ;
1080: nop ;
1081: pop !TAPE_PARAMS !TAPE_tape0 ;
1082: !TAPE_tape3 0 = ;
1083: !TAPE_tape1 !TAPE_tape3 = ;
1084: call !FUNC_LIB_getMemBitIndex ;
1085: pop !TAPE_RAX !TAPE_tape3 ;
1086: !TAPE_tape4 !TAPE_tape3 = ;
1087: !TAPE_tape3 1 = ;
1088: !TAPE_tape9 2 = ;
1089: !TAPE_tape6 !TAPE_tape0 = ;
1090: push !TAPE_tape3 !TAPE_PARAMS ;
1091: push !TAPE_tape6 !TAPE_PARAMS ;
1092: call 1 ;
1093: pop !TAPE_RAX !TAPE_tape2 ;
1094: !TAPE_tape3 !TAPE_tape0 = ;
1095: push !TAPE_tape2 !TAPE_PARAMS ;
1096: push !TAPE_tape3 !TAPE_PARAMS ;
1097: call 302 ;
1098: pop !TAPE_RAX !TAPE_tape6 ;
1099: push !TAPE_tape9 !TAPE_PARAMS ;
1100: push !TAPE_tape6 !TAPE_PARAMS ;
1101: call 424 ;
1102: pop !TAPE_RAX !TAPE_tape3 ;
1103: !TAPE_tape9 !TAPE_tape0 = ;
1104: push !TAPE_tape9 !TAPE_PARAMS ;
1105: push !TAPE_tape3 !TAPE_PARAMS ;
1106: call 1 ;
1107: pop !TAPE_RAX !TAPE_tape6 ;
1108: !TAPE_tape12 !TAPE_tape6 = ;
1109: push !TAPE_tape12 !TAPE_PARAMS ;
1110: call !FUNC_LIB_printInt ;
1111: nop ;
1112: !TAPE_tape3 !TAPE_tape4 = ;
1113: !TAPE_tape9 !TAPE_tape12 = ;
1114: push !TAPE_tape9 !TAPE_PARAMS ;
1115: push !TAPE_tape3 !TAPE_PARAMS ;
1116: call 734 ;
1117: pop !TAPE_RAX !TAPE_tape6 ;
1118: !TAPE_tape6 ! = !TAPE_tape3 ;
1119: jf !TAPE_tape3 1121 ;
1120: jmp 1131 ;
1121: nop ;
1122: !TAPE_tape3 1 = ;
1123: !TAPE_tape9 !TAPE_tape4 = ;
1124: push !TAPE_tape3 !TAPE_PARAMS ;
1125: push !TAPE_tape9 !TAPE_PARAMS ;
1126: call 190 ;
1127: pop !TAPE_RAX !TAPE_tape6 ;
1128: !TAPE_tape4 !TAPE_tape6 = ;
1129: call !FUNC_LIB_moveMemHeadLeft ;
1130: jmp 1111 ;
1131: nop ;
1132: !TAPE_tape3 !TAPE_tape4 = ;
1133: !TAPE_tape9 !TAPE_tape12 = ;
1134: push !TAPE_tape9 !TAPE_PARAMS ;
1135: push !TAPE_tape3 !TAPE_PARAMS ;
1136: call 620 ;
1137: pop !TAPE_RAX !TAPE_tape6 ;
1138: !TAPE_tape6 ! = !TAPE_tape3 ;
1139: jf !TAPE_tape3 1141 ;
1140: jmp 1151 ;
1141: nop ;
1142: !TAPE_tape3 1 = ;
1143: !TAPE_tape9 !TAPE_tape4 = ;
1144: push !TAPE_tape3 !TAPE_PARAMS ;
1145: push !TAPE_tape9 !TAPE_PARAMS ;
1146: call 1 ;
1147: pop !TAPE_RAX !TAPE_tape6 ;
1148: !TAPE_tape4 !TAPE_tape6 = ;
1149: call !FUNC_LIB_moveMemHeadRight ;
1150: jmp 1131 ;
1151: !TAPE_tape3 0 = ;
1152: !TAPE_tape11 !TAPE_tape3 = ;
1153: !TAPE_tape3 false = ;
1154: !TAPE_tape8 !TAPE_tape3 = ;
1155: !TAPE_tape3 0 = ;
1156: !TAPE_tape7 !TAPE_tape3 = ;
1157: nop ;
1158: call !FUNC_LIB_memBitIsBlank ;
1159: pop !TAPE_RAX !TAPE_tape3 ;
1160: !TAPE_tape3 ! = !TAPE_tape9 ;
1161: !TAPE_tape9 ! = !TAPE_tape3 ;
1162: jf !TAPE_tape3 1164 ;
1163: jmp 1370 ;
1164: nop ;
1165: push !TAPE_tape11 !TAPE_PARAMS ;
1166: call !FUNC_LIB_isZero ;
1167: pop !TAPE_RAX !TAPE_tape3 ;
1168: jf !TAPE_tape3 1194 ;
1169: !TAPE_tape3 413 = ;
1170: push !TAPE_tape3 !TAPE_PARAMS ;
1171: call !FUNC_LIB_printInt ;
1172: !TAPE_tape3 413 = ;
1173: push !TAPE_tape3 !TAPE_PARAMS ;
1174: call 604 ;
1175: pop !TAPE_RAX !TAPE_tape9 ;
1176: push !TAPE_tape9 !TAPE_PARAMS ;
1177: call !FUNC_LIB_printInt ;
1178: call !FUNC_LIB_memBitIsOne ;
1179: pop !TAPE_RAX !TAPE_tape3 ;
1180: jf !TAPE_tape3 1192 ;
1181: !TAPE_tape3 417 = ;
1182: push !TAPE_tape3 !TAPE_PARAMS ;
1183: call !FUNC_LIB_printInt ;
1184: !TAPE_tape3 417 = ;
1185: push !TAPE_tape3 !TAPE_PARAMS ;
1186: call 604 ;
1187: pop !TAPE_RAX !TAPE_tape9 ;
1188: push !TAPE_tape9 !TAPE_PARAMS ;
1189: call !FUNC_LIB_printInt ;
1190: !TAPE_tape3 true = ;
1191: !TAPE_tape8 !TAPE_tape3 = ;
1192: nop ;
1193: jmp 1282 ;
1194: nop ;
1195: !TAPE_tape3 423 = ;
1196: push !TAPE_tape3 !TAPE_PARAMS ;
1197: call !FUNC_LIB_printInt ;
1198: !TAPE_tape3 423 = ;
1199: push !TAPE_tape3 !TAPE_PARAMS ;
1200: call 604 ;
1201: pop !TAPE_RAX !TAPE_tape9 ;
1202: push !TAPE_tape9 !TAPE_PARAMS ;
1203: call !FUNC_LIB_printInt ;
1204: call !FUNC_LIB_memBitIsOne ;
1205: pop !TAPE_RAX !TAPE_tape3 ;
1206: jf !TAPE_tape3 1226 ;
1207: !TAPE_tape3 !TAPE_tape1 = ;
1208: !TAPE_tape9 !TAPE_tape7 = ;
1209: push !TAPE_tape9 !TAPE_PARAMS ;
1210: push !TAPE_tape3 !TAPE_PARAMS ;
1211: call 1 ;
1212: pop !TAPE_RAX !TAPE_tape6 ;
1213: !TAPE_tape1 !TAPE_tape6 = ;
1214: !TAPE_tape3 37 = ;
1215: push !TAPE_tape3 !TAPE_PARAMS ;
1216: call !FUNC_LIB_printInt ;
1217: push !TAPE_tape1 !TAPE_PARAMS ;
1218: call !FUNC_LIB_printInt ;
1219: !TAPE_tape3 37 = ;
1220: push !TAPE_tape3 !TAPE_PARAMS ;
1221: call 604 ;
1222: pop !TAPE_RAX !TAPE_tape9 ;
1223: push !TAPE_tape9 !TAPE_PARAMS ;
1224: call !FUNC_LIB_printInt ;
1225: jmp 1281 ;
1226: nop ;
1227: !TAPE_tape3 8999 = ;
1228: push !TAPE_tape3 !TAPE_PARAMS ;
1229: call !FUNC_LIB_printInt ;
1230: call !FUNC_LIB_memBitIsZero ;
1231: pop !TAPE_RAX !TAPE_tape3 ;
1232: jf !TAPE_tape3 1237 ;
1233: !TAPE_tape3 9000 = ;
1234: push !TAPE_tape3 !TAPE_PARAMS ;
1235: call !FUNC_LIB_printInt ;
1236: jmp 1244 ;
1237: nop ;
1238: !TAPE_tape3 9000 = ;
1239: push !TAPE_tape3 !TAPE_PARAMS ;
1240: call 604 ;
1241: pop !TAPE_RAX !TAPE_tape9 ;
1242: push !TAPE_tape9 !TAPE_PARAMS ;
1243: call !FUNC_LIB_printInt ;
1244: nop ;
1245: call !FUNC_LIB_memBitIsOne ;
1246: pop !TAPE_RAX !TAPE_tape3 ;
1247: jf !TAPE_tape3 1252 ;
1248: !TAPE_tape3 9001 = ;
1249: push !TAPE_tape3 !TAPE_PARAMS ;
1250: call !FUNC_LIB_printInt ;
1251: jmp 1259 ;
1252: nop ;
1253: !TAPE_tape3 9001 = ;
1254: push !TAPE_tape3 !TAPE_PARAMS ;
1255: call 604 ;
1256: pop !TAPE_RAX !TAPE_tape9 ;
1257: push !TAPE_tape9 !TAPE_PARAMS ;
1258: call !FUNC_LIB_printInt ;
1259: nop ;
1260: call !FUNC_LIB_memBitIsBlank ;
1261: pop !TAPE_RAX !TAPE_tape3 ;
1262: jf !TAPE_tape3 1267 ;
1263: !TAPE_tape3 9002 = ;
1264: push !TAPE_tape3 !TAPE_PARAMS ;
1265: call !FUNC_LIB_printInt ;
1266: jmp 1274 ;
1267: nop ;
1268: !TAPE_tape3 9002 = ;
1269: push !TAPE_tape3 !TAPE_PARAMS ;
1270: call 604 ;
1271: pop !TAPE_RAX !TAPE_tape9 ;
1272: push !TAPE_tape9 !TAPE_PARAMS ;
1273: call !FUNC_LIB_printInt ;
1274: nop ;
1275: !TAPE_tape3 8999 = ;
1276: push !TAPE_tape3 !TAPE_PARAMS ;
1277: call 604 ;
1278: pop !TAPE_RAX !TAPE_tape9 ;
1279: push !TAPE_tape9 !TAPE_PARAMS ;
1280: call !FUNC_LIB_printInt ;
1281: nop ;
1282: nop ;
1283: !TAPE_tape3 1 = ;
1284: !TAPE_tape9 !TAPE_tape11 = ;
1285: push !TAPE_tape3 !TAPE_PARAMS ;
1286: push !TAPE_tape9 !TAPE_PARAMS ;
1287: call 1 ;
1288: pop !TAPE_RAX !TAPE_tape6 ;
1289: !TAPE_tape11 !TAPE_tape6 = ;
1290: push !TAPE_tape7 !TAPE_PARAMS ;
1291: call !FUNC_LIB_isZero ;
1292: pop !TAPE_RAX !TAPE_tape3 ;
1293: jf !TAPE_tape3 1297 ;
1294: !TAPE_tape3 1 = ;
1295: !TAPE_tape7 !TAPE_tape3 = ;
1296: jmp 1305 ;
1297: nop ;
1298: !TAPE_tape3 !TAPE_tape7 = ;
1299: !TAPE_tape9 !TAPE_tape7 = ;
1300: push !TAPE_tape9 !TAPE_PARAMS ;
1301: push !TAPE_tape3 !TAPE_PARAMS ;
1302: call 1 ;
1303: pop !TAPE_RAX !TAPE_tape6 ;
1304: !TAPE_tape7 !TAPE_tape6 = ;
1305: nop ;
1306: !TAPE_tape3 1 = ;
1307: !TAPE_tape9 2 = ;
1308: !TAPE_tape6 !TAPE_tape0 = ;
1309: !TAPE_tape2 !TAPE_tape11 = ;
1310: push !TAPE_tape2 !TAPE_PARAMS ;
1311: push !TAPE_tape6 !TAPE_PARAMS ;
1312: call 1 ;
1313: pop !TAPE_RAX !TAPE_tape10 ;
1314: !TAPE_tape6 !TAPE_tape0 = ;
1315: !TAPE_tape2 !TAPE_tape11 = ;
1316: push !TAPE_tape2 !TAPE_PARAMS ;
1317: push !TAPE_tape6 !TAPE_PARAMS ;
1318: call 1 ;
1319: pop !TAPE_RAX !TAPE_tape5 ;
1320: push !TAPE_tape3 !TAPE_PARAMS ;
1321: push !TAPE_tape5 !TAPE_PARAMS ;
1322: call 1 ;
1323: pop !TAPE_RAX !TAPE_tape6 ;
1324: push !TAPE_tape6 !TAPE_PARAMS ;
1325: push !TAPE_tape10 !TAPE_PARAMS ;
1326: call 302 ;
1327: pop !TAPE_RAX !TAPE_tape3 ;
1328: push !TAPE_tape9 !TAPE_PARAMS ;
1329: push !TAPE_tape3 !TAPE_PARAMS ;
1330: call 424 ;
1331: pop !TAPE_RAX !TAPE_tape6 ;
1332: !TAPE_tape3 !TAPE_tape0 = ;
1333: push !TAPE_tape3 !TAPE_PARAMS ;
1334: push !TAPE_tape6 !TAPE_PARAMS ;
1335: call 1 ;
1336: pop !TAPE_RAX !TAPE_tape9 ;
1337: !TAPE_tape12 !TAPE_tape9 = ;
1338: !TAPE_tape3 100 = ;
1339: push !TAPE_tape3 !TAPE_PARAMS ;
1340: call !FUNC_LIB_printInt ;
1341: push !TAPE_tape12 !TAPE_PARAMS ;
1342: call !FUNC_LIB_printInt ;
1343: !TAPE_tape3 100 = ;
1344: push !TAPE_tape3 !TAPE_PARAMS ;
1345: call 604 ;
1346: pop !TAPE_RAX !TAPE_tape9 ;
1347: push !TAPE_tape9 !TAPE_PARAMS ;
1348: call !FUNC_LIB_printInt ;
1349: nop ;
1350: !TAPE_tape3 !TAPE_tape4 = ;
1351: !TAPE_tape9 !TAPE_tape12 = ;
1352: push !TAPE_tape9 !TAPE_PARAMS ;
1353: push !TAPE_tape3 !TAPE_PARAMS ;
1354: call 620 ;
1355: pop !TAPE_RAX !TAPE_tape6 ;
1356: !TAPE_tape6 ! = !TAPE_tape3 ;
1357: jf !TAPE_tape3 1359 ;
1358: jmp 1369 ;
1359: nop ;
1360: !TAPE_tape3 1 = ;
1361: !TAPE_tape9 !TAPE_tape4 = ;
1362: push !TAPE_tape3 !TAPE_PARAMS ;
1363: push !TAPE_tape9 !TAPE_PARAMS ;
1364: call 1 ;
1365: pop !TAPE_RAX !TAPE_tape6 ;
1366: !TAPE_tape4 !TAPE_tape6 = ;
1367: call !FUNC_LIB_moveMemHeadRight ;
1368: jmp 1349 ;
1369: jmp 1157 ;
1370: jf !TAPE_tape8 1375 ;
1371: push !TAPE_tape1 !TAPE_PARAMS ;
1372: call 604 ;
1373: pop !TAPE_RAX !TAPE_tape3 ;
1374: !TAPE_tape1 !TAPE_tape3 = ;
1375: nop ;
1376: push !TAPE_tape4 !TAPE_PARAMS ;
1377: call !FUNC_LIB_setMemBitIndex ;
1378: !TAPE_RAX !TAPE_tape1 = ;
1379: return ;
1380: nop ;
1381: nop ;
1382: pop !TAPE_PARAMS !TAPE_tape0 ;
1383: return ;
1384: nop ;
1385: nop ;
1386: pop !TAPE_PARAMS !TAPE_tape0 ;
1387: pop !TAPE_PARAMS !TAPE_tape1 ;
1388: pop !TAPE_PARAMS !TAPE_tape2 ;
1389: !TAPE_tape5 !TAPE_tape0 = ;
1390: !TAPE_tape6 !TAPE_tape1 = ;
1391: push !TAPE_tape6 !TAPE_PARAMS ;
1392: push !TAPE_tape5 !TAPE_PARAMS ;
1393: call 302 ;
1394: pop !TAPE_RAX !TAPE_tape4 ;
1395: !TAPE_tape5 !TAPE_tape2 = ;
1396: push !TAPE_tape5 !TAPE_PARAMS ;
1397: push !TAPE_tape4 !TAPE_PARAMS ;
1398: call 424 ;
1399: pop !TAPE_RAX !TAPE_tape6 ;
1400: !TAPE_tape3 !TAPE_tape6 = ;
1401: !TAPE_tape5 1 = ;
1402: push !TAPE_tape5 !TAPE_PARAMS ;
1403: call 604 ;
1404: pop !TAPE_RAX !TAPE_tape6 ;
1405: !TAPE_tape5 !TAPE_tape0 = ;
1406: push !TAPE_tape6 !TAPE_PARAMS ;
1407: push !TAPE_tape5 !TAPE_PARAMS ;
1408: call 190 ;
1409: pop !TAPE_RAX !TAPE_tape4 ;
1410: !TAPE_tape7 !TAPE_tape4 = ;
1411: !TAPE_RAX !TAPE_tape3 = ;
1412: return ;
1413: nop ;
1414: nop ;
1415: !TAPE_tape0 3 = ;
1416: push !TAPE_tape0 !TAPE_PARAMS ;
1417: call 1080 ;
1418: pop !TAPE_RAX !TAPE_tape1 ;
1419: !TAPE_RAX !TAPE_tape1 = ;
1420: return ;
1421: nop ;
