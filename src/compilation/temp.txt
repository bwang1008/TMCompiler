Execute: g++ -fsyntax-only ../programs/example_temp.cpp
Initial compilation OK
Library file found
After assignDefaultToDeclaration, 
  0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
  1: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
  2: 		return ( !VAR_USER_y ) ;
  3: 	}
  4: 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
  5: 		return ( !VAR_USER_x ) ;
  6: 	}
  7: 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
  8: 		if ( - !VAR_USER_x == !VAR_USER_y ) {
  9: 			return ( 0 ) ;
 10: 		}
 11: 		else {
 12: 			if ( - !VAR_USER_x < !VAR_USER_y ) {
 13: 				return ( !FUNC_LIB_basic_sub ( !VAR_USER_y , - !VAR_USER_x ) ) ;
 14: 			}
 15: 			else {
 16: 				return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_x , !VAR_USER_y ) ) ;
 17: 			}
 18: 		}
 19: 	}
 20: 	else {
 21: 		if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
 22: 			if ( - !VAR_USER_y == !VAR_USER_x ) {
 23: 				return ( 0 ) ;
 24: 			}
 25: 			else {
 26: 				if ( - !VAR_USER_y < !VAR_USER_x ) {
 27: 					return ( !FUNC_LIB_basic_sub ( !VAR_USER_x , - !VAR_USER_y ) ) ;
 28: 				}
 29: 				else {
 30: 					return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_y , !VAR_USER_x ) ) ;
 31: 				}
 32: 			}
 33: 		}
 34: 		else {
 35: 			if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
 36: 				return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
 37: 			}
 38: 			else {
 39: 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , !VAR_USER_y ) ) ;
 40: 			}
 41: 		}
 42: 	}
 43: }
 44: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
 45: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
 46: 		return ( - !VAR_USER_y ) ;
 47: 	}
 48: 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
 49: 		return ( !VAR_USER_x ) ;
 50: 	}
 51: 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
 52: 		return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
 53: 	}
 54: 	else {
 55: 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
 56: 			return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , !VAR_USER_y ) ) ;
 57: 		}
 58: 		else {
 59: 			if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
 60: 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
 61: 			}
 62: 			else {
 63: 				return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
 64: 			}
 65: 		}
 66: 	}
 67: }
 68: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
 69: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
 70: 		return ( 0 ) ;
 71: 	}
 72: 	bool !VAR_USER_ansNeg ;
 73: 	!VAR_USER_ansNeg = false ;
 74: 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
 75: 		!VAR_USER_x = - !VAR_USER_x ;
 76: 		!VAR_USER_ansNeg = true ;
 77: 	}
 78: 	if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
 79: 		!VAR_USER_y = - !VAR_USER_y ;
 80: 		!VAR_USER_ansNeg = ! !VAR_USER_ansNeg ;
 81: 	}
 82: 	int !VAR_USER_ans ;
 83: 	!VAR_USER_ans = 0 ;
 84: 	int !VAR_USER_y0 ;
 85: 	!VAR_USER_y0 = !VAR_USER_y ;
 86: 	while ( true ) {
 87: 		if ( ! ( !VAR_USER_y0 > 0 ) ) {
 88: 			break ;
 89: 		}
 90: 		int !VAR_USER_y1 ;
 91: 		!VAR_USER_y1 = 1 ;
 92: 		int !VAR_USER_y2 ;
 93: 		!VAR_USER_y2 = 2 ;
 94: 		int !VAR_USER_val1 ;
 95: 		!VAR_USER_val1 = !VAR_USER_x ;
 96: 		int !VAR_USER_val2 ;
 97: 		!VAR_USER_val2 = !VAR_USER_x + !VAR_USER_x ;
 98: 		while ( true ) {
 99: 			if ( ! ( !VAR_USER_val2 <= !VAR_USER_y0 ) ) {
100: 				break ;
101: 			}
102: 			!VAR_USER_y1 = !VAR_USER_y2 ;
103: 			!VAR_USER_val1 = !VAR_USER_val2 ;
104: 			!VAR_USER_y2 += !VAR_USER_y2 ;
105: 			!VAR_USER_val2 += !VAR_USER_val2 ;
106: 		}
107: 		!VAR_USER_ans += !VAR_USER_val1 ;
108: 		!VAR_USER_y0 -= !VAR_USER_y1 ;
109: 	}
110: 	if ( !VAR_USER_ansNeg ) {
111: 		!VAR_USER_ans = - !VAR_USER_ans ;
112: 	}
113: 	return ( !VAR_USER_ans ) ;
114: }
115: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
116: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
117: 		return ( 0 ) ;
118: 	}
119: 	if ( !VAR_USER_x < 0 && !VAR_USER_y < 0 ) {
120: 		return ( !FUNC_LIB_div ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
121: 	}
122: 	if ( !VAR_USER_x < 0 ) {
123: 		return ( - !FUNC_LIB_div ( - !VAR_USER_x , !VAR_USER_y ) ) ;
124: 	}
125: 	if ( !VAR_USER_y < 0 ) {
126: 		return ( - !FUNC_LIB_div ( !VAR_USER_x , - !VAR_USER_y ) ) ;
127: 	}
128: 	int !VAR_USER_ans ;
129: 	!VAR_USER_ans = 0 ;
130: 	int !VAR_USER_n ;
131: 	!VAR_USER_n = !VAR_USER_x ;
132: 	while ( true ) {
133: 		if ( ! ( !VAR_USER_n >= !VAR_USER_y ) ) {
134: 			break ;
135: 		}
136: 		int !VAR_USER_prevJump ;
137: 		!VAR_USER_prevJump = 0 ;
138: 		int !VAR_USER_jump ;
139: 		!VAR_USER_jump = 1 ;
140: 		while ( true ) {
141: 			if ( ! ( !VAR_USER_y * ( !VAR_USER_ans + !VAR_USER_jump ) <= !VAR_USER_x ) ) {
142: 				break ;
143: 			}
144: 			!VAR_USER_prevJump = !VAR_USER_jump ;
145: 			!VAR_USER_jump += !VAR_USER_jump ;
146: 		}
147: 		!VAR_USER_ans += !VAR_USER_prevJump ;
148: 		!VAR_USER_n = !VAR_USER_x - ( !VAR_USER_y * !VAR_USER_ans ) ;
149: 	}
150: 	return ( !VAR_USER_ans ) ;
151: }
152: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
153: 	int !VAR_USER_d ;
154: 	!VAR_USER_d = !FUNC_LIB_div ( !VAR_USER_x , !VAR_USER_y ) ;
155: 	return ( !VAR_USER_x - !VAR_USER_y * !VAR_USER_d ) ;
156: }
157: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
158: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
159: 		return ( 0 ) ;
160: 	}
161: 	return ( !FUNC_LIB_basic_neg ( !VAR_USER_x ) ) ;
162: }
163: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
164: 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
165: 		if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
166: 			return ( !FUNC_LIB_lt ( - !VAR_USER_y , - !VAR_USER_x ) ) ;
167: 		}
168: 		else {
169: 			return ( true ) ;
170: 		}
171: 	}
172: 	else {
173: 		if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
174: 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
175: 				return ( false ) ;
176: 			}
177: 			else {
178: 				if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
179: 					return ( false ) ;
180: 				}
181: 				else {
182: 					return ( true ) ;
183: 				}
184: 			}
185: 		}
186: 		else {
187: 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
188: 				return ( false ) ;
189: 			}
190: 			else {
191: 				return ( !FUNC_LIB_basic_lt ( !VAR_USER_x , !VAR_USER_y ) ) ;
192: 			}
193: 		}
194: 	}
195: }
196: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
197: 	return ( ( !VAR_USER_x == !VAR_USER_y ) || ( !VAR_USER_x < !VAR_USER_y ) ) ;
198: }
199: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
200: 	return ( ! ( !VAR_USER_x <= !VAR_USER_y ) ) ;
201: }
202: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
203: 	return ( ! ( !VAR_USER_x < !VAR_USER_y ) ) ;
204: }
205: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
206: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
207: 		if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
208: 			return ( true ) ;
209: 		}
210: 		return ( false ) ;
211: 	}
212: 	else {
213: 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
214: 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
215: 				return ( !FUNC_LIB_basic_eq ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
216: 			}
217: 			return ( false ) ;
218: 		}
219: 		else {
220: 			if ( !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
221: 				return ( !FUNC_LIB_basic_eq ( !VAR_USER_x , !VAR_USER_y ) ) ;
222: 			}
223: 			return ( false ) ;
224: 		}
225: 	}
226: }
227: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
228: 	return ( ! ( !VAR_USER_x == !VAR_USER_y ) ) ;
229: }
230: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
231: 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
232: 		return ( !VAR_USER_y ) ;
233: 	}
234: 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
235: 		return ( !VAR_USER_x ) ;
236: 	}
237: 	return ( !FUNC_LIB_basic_xor ( !VAR_USER_x , !VAR_USER_y ) ) ;
238: }
239: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
240: 	int !VAR_USER_currBitIndex ;
241: 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
242: 	bool !VAR_USER_handledSign ;
243: 	!VAR_USER_handledSign = false ;
244: 	int !VAR_USER_valIndex ;
245: 	!VAR_USER_valIndex = 0 ;
246: 	int !VAR_USER_V ;
247: 	!VAR_USER_V = !VAR_USER_val ;
248: 	while ( true ) {
249: 		if ( ! ( ! !FUNC_LIB_isZero ( !VAR_USER_V ) || ! !VAR_USER_handledSign ) ) {
250: 			break ;
251: 		}
252: 		int !VAR_USER_desiredBitIndex ;
253: 		!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
254: 		while ( true ) {
255: 			if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
256: 				break ;
257: 			}
258: 			!VAR_USER_currBitIndex -= 1 ;
259: 			!FUNC_LIB_moveMemHeadLeft ( ) ;
260: 		}
261: 		while ( true ) {
262: 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
263: 				break ;
264: 			}
265: 			!VAR_USER_currBitIndex += 1 ;
266: 			!FUNC_LIB_moveMemHeadRight ( ) ;
267: 		}
268: 		if ( ! !VAR_USER_handledSign ) {
269: 			if ( !FUNC_LIB_isNeg ( !VAR_USER_V ) ) {
270: 				!FUNC_LIB_setMemBitOne ( ) ;
271: 				!VAR_USER_V = - !VAR_USER_V ;
272: 			}
273: 			else {
274: 				!FUNC_LIB_setMemBitZero ( ) ;
275: 			}
276: 			!VAR_USER_handledSign = true ;
277: 		}
278: 		else {
279: 			int !VAR_USER_V2 ;
280: 			!VAR_USER_V2 = !VAR_USER_V / 2 ;
281: 			int !VAR_USER_bit ;
282: 			!VAR_USER_bit = !VAR_USER_V - ( 2 * !VAR_USER_V2 ) ;
283: 			if ( !VAR_USER_bit == 1 ) {
284: 				!FUNC_LIB_setMemBitOne ( ) ;
285: 			}
286: 			else {
287: 				!FUNC_LIB_setMemBitZero ( ) ;
288: 			}
289: 			!VAR_USER_V = !VAR_USER_V2 ;
290: 		}
291: 		!VAR_USER_valIndex += 1 ;
292: 	}
293: 	int !VAR_USER_desiredBitIndex ;
294: 	!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
295: 	while ( true ) {
296: 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
297: 			break ;
298: 		}
299: 		!VAR_USER_currBitIndex += 1 ;
300: 		!FUNC_LIB_moveMemHeadRight ( ) ;
301: 	}
302: 	!FUNC_LIB_setMemBitBlank ( ) ;
303: 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
304: 	return ;
305: }
306: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
307: 	int !VAR_USER_ans ;
308: 	!VAR_USER_ans = 0 ;
309: 	int !VAR_USER_currBitIndex ;
310: 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
311: 	int !VAR_USER_desiredBitIndex ;
312: 	!VAR_USER_desiredBitIndex = !VAR_USER_index * !VAR_USER_index ;
313: 	while ( true ) {
314: 		if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
315: 			break ;
316: 		}
317: 		!VAR_USER_currBitIndex -= 1 ;
318: 		!FUNC_LIB_moveMemHeadLeft ( ) ;
319: 	}
320: 	while ( true ) {
321: 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
322: 			break ;
323: 		}
324: 		!VAR_USER_currBitIndex += 1 ;
325: 		!FUNC_LIB_moveMemHeadRight ( ) ;
326: 	}
327: 	int !VAR_USER_valIndex ;
328: 	!VAR_USER_valIndex = 0 ;
329: 	bool !VAR_USER_shouldBeNegative ;
330: 	!VAR_USER_shouldBeNegative = false ;
331: 	int !VAR_USER_pow2 ;
332: 	!VAR_USER_pow2 = 0 ;
333: 	while ( true ) {
334: 		if ( ! ( ! !FUNC_LIB_memBitIsBlank ( ) ) ) {
335: 			break ;
336: 		}
337: 		if ( !FUNC_LIB_isZero ( !VAR_USER_valIndex ) ) {
338: 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
339: 				!VAR_USER_shouldBeNegative = true ;
340: 			}
341: 		}
342: 		else {
343: 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
344: 				!VAR_USER_ans += !VAR_USER_pow2 ;
345: 			}
346: 		}
347: 		!VAR_USER_valIndex += 1 ;
348: 		if ( !FUNC_LIB_isZero ( !VAR_USER_pow2 ) ) {
349: 			!VAR_USER_pow2 = 1 ;
350: 		}
351: 		else {
352: 			!VAR_USER_pow2 += !VAR_USER_pow2 ;
353: 		}
354: 		!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
355: 		while ( true ) {
356: 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
357: 				break ;
358: 			}
359: 			!VAR_USER_currBitIndex += 1 ;
360: 			!FUNC_LIB_moveMemHeadRight ( ) ;
361: 		}
362: 	}
363: 	if ( !VAR_USER_shouldBeNegative ) {
364: 		!VAR_USER_ans = - !VAR_USER_ans ;
365: 	}
366: 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
367: 	return ( !VAR_USER_ans ) ;
368: }
369: void !FUNC_USER_what ( int !VAR_USER_x ) {
370: 	return ;
371: }
372: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
373: 	int !VAR_USER_temp ;
374: 	!VAR_USER_temp = !VAR_USER_a * !VAR_USER_b / !VAR_USER_c ;
375: 	int !VAR_USER_x ;
376: 	!VAR_USER_x = !VAR_USER_a - - 1 ;
377: 	return ( !VAR_USER_temp ) ;
378: }
379: int !FUNC_USER_main ( ) {
380: 	int !VAR_USER_x ;
381: 	!VAR_USER_x = !FUNC_LIB_nextInt ( ) ;
382: 	int !VAR_USER_y ;
383: 	!VAR_USER_y = !VAR_USER_x + 1 ;
384: 	return ( !VAR_USER_x + !VAR_USER_y ) ;
385: }

line = int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ; 
: !VAR_TEMP_temp0 if  { 

orig: 
return ( !VAR_USER_y ) 
post: 
!VAR_USER_y return 

line = 		return ( !VAR_USER_y ) ;
: !VAR_USER_y return  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ; 
: !VAR_TEMP_temp1 if  { 

orig: 
return ( !VAR_USER_x ) 
post: 
!VAR_USER_x return 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg !VAR_USER_y !FUNC_LIB_isPos && if 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp2 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp2 ; 
: !VAR_TEMP_temp2 if { 
: bool !VAR_TEMP_temp3 ; 
: !VAR_USER_y !FUNC_LIB_isPos  = !VAR_TEMP_temp3 ; 
: !VAR_TEMP_temp4 !VAR_TEMP_temp3 = ; 
:  } 
: else { 
: !VAR_TEMP_temp4 !VAR_TEMP_temp2 = ; 
:  } 
: !VAR_TEMP_temp4 if  { 

orig: 
if ( - !VAR_USER_x == !VAR_USER_y ) 
post: 
!VAR_USER_x u- !VAR_USER_y == if 

line = 		if ( - !VAR_USER_x == !VAR_USER_y ) {
: int !VAR_TEMP_temp5 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp5 ; 
: !VAR_TEMP_temp5 !VAR_USER_y == = !VAR_TEMP_temp6 ; 
: !VAR_TEMP_temp6 if  { 

orig: 
return ( !VAR_TEMP_temp7 ) 
post: 
!VAR_TEMP_temp7 return 

line = 			return ( 0 ) ;
: int !VAR_TEMP_temp7 ; 
: !VAR_TEMP_temp7 0 = ; 
: !VAR_TEMP_temp7 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( - !VAR_USER_x < !VAR_USER_y ) 
post: 
!VAR_USER_x u- !VAR_USER_y < if 

line = 			if ( - !VAR_USER_x < !VAR_USER_y ) {
: int !VAR_TEMP_temp8 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp8 ; 
: !VAR_TEMP_temp8 !VAR_USER_y < = !VAR_TEMP_temp9 ; 
: !VAR_TEMP_temp9 if  { 

orig: 
return ( !FUNC_LIB_basic_sub ( !VAR_USER_y , - !VAR_USER_x ) ) 
post: 
!VAR_USER_y !VAR_USER_x u- !FUNC_LIB_basic_sub return 

numParam of u- = 1
now postfix = !VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub return 
line = 				return ( !FUNC_LIB_basic_sub ( !VAR_USER_y , - !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp10 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp10 ; 
: !VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ; 
: !VAR_TEMP_temp11 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y !FUNC_LIB_basic_sub u- return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp12 !VAR_USER_y !FUNC_LIB_basic_sub u- return 
numParam of !FUNC_LIB_basic_sub = 1
now postfix = !VAR_TEMP_temp12 !VAR_TEMP_temp13 u- return 
line = 				return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp12 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp12 ; 
: int !VAR_TEMP_temp13 ; 
: !VAR_USER_y !FUNC_LIB_basic_sub  = !VAR_TEMP_temp13 ; 
: !VAR_TEMP_temp12 !VAR_TEMP_temp13 u- = !VAR_TEMP_temp14 ; 
: !VAR_TEMP_temp14 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = 	else {
: 	else {

orig: 
if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isPos !VAR_USER_y !FUNC_LIB_isNeg && if 

line = 		if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp15 ; 
: !VAR_USER_x !FUNC_LIB_isPos  = !VAR_TEMP_temp15 ; 
: !VAR_TEMP_temp15 if { 
: bool !VAR_TEMP_temp16 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp16 ; 
: !VAR_TEMP_temp17 !VAR_TEMP_temp16 = ; 
:  } 
: else { 
: !VAR_TEMP_temp17 !VAR_TEMP_temp15 = ; 
:  } 
: !VAR_TEMP_temp17 if  { 

orig: 
if ( - !VAR_USER_y == !VAR_USER_x ) 
post: 
!VAR_USER_y u- !VAR_USER_x == if 

line = 			if ( - !VAR_USER_y == !VAR_USER_x ) {
: int !VAR_TEMP_temp18 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp18 ; 
: !VAR_TEMP_temp18 !VAR_USER_x == = !VAR_TEMP_temp19 ; 
: !VAR_TEMP_temp19 if  { 

orig: 
return ( !VAR_TEMP_temp20 ) 
post: 
!VAR_TEMP_temp20 return 

line = 				return ( 0 ) ;
: int !VAR_TEMP_temp20 ; 
: !VAR_TEMP_temp20 0 = ; 
: !VAR_TEMP_temp20 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
if ( - !VAR_USER_y < !VAR_USER_x ) 
post: 
!VAR_USER_y u- !VAR_USER_x < if 

line = 				if ( - !VAR_USER_y < !VAR_USER_x ) {
: int !VAR_TEMP_temp21 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp21 ; 
: !VAR_TEMP_temp21 !VAR_USER_x < = !VAR_TEMP_temp22 ; 
: !VAR_TEMP_temp22 if  { 

orig: 
return ( !FUNC_LIB_basic_sub ( !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y u- !FUNC_LIB_basic_sub return 

numParam of u- = 1
now postfix = !VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub return 
line = 					return ( !FUNC_LIB_basic_sub ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp23 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp23 ; 
: !VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ; 
: !VAR_TEMP_temp24 return  ; 

line = 				}
: 				}

line = 				else {
: 				else {

orig: 
return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_y , !VAR_USER_x ) ) 
post: 
!VAR_USER_y u- !VAR_USER_x !FUNC_LIB_basic_sub u- return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp25 !VAR_USER_x !FUNC_LIB_basic_sub u- return 
numParam of !FUNC_LIB_basic_sub = 1
now postfix = !VAR_TEMP_temp25 !VAR_TEMP_temp26 u- return 
line = 					return ( - !FUNC_LIB_basic_sub ( - !VAR_USER_y , !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp25 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp25 ; 
: int !VAR_TEMP_temp26 ; 
: !VAR_USER_x !FUNC_LIB_basic_sub  = !VAR_TEMP_temp26 ; 
: !VAR_TEMP_temp25 !VAR_TEMP_temp26 u- = !VAR_TEMP_temp27 ; 
: !VAR_TEMP_temp27 return  ; 

line = 				}
: 				}

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg !VAR_USER_y !FUNC_LIB_isNeg && if 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp28 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp28 ; 
: !VAR_TEMP_temp28 if { 
: bool !VAR_TEMP_temp29 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp29 ; 
: !VAR_TEMP_temp30 !VAR_TEMP_temp29 = ; 
:  } 
: else { 
: !VAR_TEMP_temp30 !VAR_TEMP_temp28 = ; 
:  } 
: !VAR_TEMP_temp30 if  { 

orig: 
return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y u- !FUNC_LIB_basic_add u- return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp31 !VAR_USER_y u- !FUNC_LIB_basic_add u- return 
numParam of u- = 1
now postfix = !VAR_TEMP_temp31 !VAR_TEMP_temp32 !FUNC_LIB_basic_add u- return 
numParam of !FUNC_LIB_basic_add = 1
now postfix = !VAR_TEMP_temp31 !VAR_TEMP_temp33 u- return 
line = 				return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp31 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp31 ; 
: int !VAR_TEMP_temp32 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp32 ; 
: int !VAR_TEMP_temp33 ; 
: !VAR_TEMP_temp32 !FUNC_LIB_basic_add  = !VAR_TEMP_temp33 ; 
: !VAR_TEMP_temp31 !VAR_TEMP_temp33 u- = !VAR_TEMP_temp34 ; 
: !VAR_TEMP_temp34 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
return ( !FUNC_LIB_basic_add ( !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add return 

line = 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , !VAR_USER_y ) ) ;
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ; 
: !VAR_TEMP_temp35 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ; 
: !VAR_TEMP_temp36 if  { 

orig: 
return ( - !VAR_USER_y ) 
post: 
!VAR_USER_y u- return 

line = 		return ( - !VAR_USER_y ) ;
: !VAR_USER_y u- = !VAR_TEMP_temp37 ; 
: !VAR_TEMP_temp37 return  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ; 
: !VAR_TEMP_temp38 if  { 

orig: 
return ( !VAR_USER_x ) 
post: 
!VAR_USER_x return 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg !VAR_USER_y !FUNC_LIB_isNeg && if 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp39 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp39 ; 
: !VAR_TEMP_temp39 if { 
: bool !VAR_TEMP_temp40 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp40 ; 
: !VAR_TEMP_temp41 !VAR_TEMP_temp40 = ; 
:  } 
: else { 
: !VAR_TEMP_temp41 !VAR_TEMP_temp39 = ; 
:  } 
: !VAR_TEMP_temp41 if  { 

orig: 
return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y u- !FUNC_LIB_add return 

numParam of u- = 1
now postfix = !VAR_USER_x !VAR_TEMP_temp42 !FUNC_LIB_add return 
line = 		return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp42 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp42 ; 
: !VAR_USER_x !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ; 
: !VAR_TEMP_temp43 return  ; 

line = 	}
: 	}

line = 	else {
: 	else {

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg !VAR_USER_y !FUNC_LIB_isPos && if 

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) && !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp44 ; 
: !VAR_USER_x !FUNC_LIB_isNeg  = !VAR_TEMP_temp44 ; 
: !VAR_TEMP_temp44 if { 
: bool !VAR_TEMP_temp45 ; 
: !VAR_USER_y !FUNC_LIB_isPos  = !VAR_TEMP_temp45 ; 
: !VAR_TEMP_temp46 !VAR_TEMP_temp45 = ; 
:  } 
: else { 
: !VAR_TEMP_temp46 !VAR_TEMP_temp44 = ; 
:  } 
: !VAR_TEMP_temp46 if  { 

orig: 
return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y !FUNC_LIB_basic_add u- return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp47 !VAR_USER_y !FUNC_LIB_basic_add u- return 
numParam of !FUNC_LIB_basic_add = 1
now postfix = !VAR_TEMP_temp47 !VAR_TEMP_temp48 u- return 
line = 			return ( - !FUNC_LIB_basic_add ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp47 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp47 ; 
: int !VAR_TEMP_temp48 ; 
: !VAR_USER_y !FUNC_LIB_basic_add  = !VAR_TEMP_temp48 ; 
: !VAR_TEMP_temp47 !VAR_TEMP_temp48 u- = !VAR_TEMP_temp49 ; 
: !VAR_TEMP_temp49 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isPos !VAR_USER_y !FUNC_LIB_isNeg && if 

line = 			if ( !FUNC_LIB_isPos ( !VAR_USER_x ) && !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp50 ; 
: !VAR_USER_x !FUNC_LIB_isPos  = !VAR_TEMP_temp50 ; 
: !VAR_TEMP_temp50 if { 
: bool !VAR_TEMP_temp51 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp51 ; 
: !VAR_TEMP_temp52 !VAR_TEMP_temp51 = ; 
:  } 
: else { 
: !VAR_TEMP_temp52 !VAR_TEMP_temp50 = ; 
:  } 
: !VAR_TEMP_temp52 if  { 

orig: 
return ( !FUNC_LIB_basic_add ( !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y u- !FUNC_LIB_basic_add return 

numParam of u- = 1
now postfix = !VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add return 
line = 				return ( !FUNC_LIB_basic_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp53 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp53 ; 
: !VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ; 
: !VAR_TEMP_temp54 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y u- !FUNC_LIB_add return 

numParam of u- = 1
now postfix = !VAR_USER_x !VAR_TEMP_temp55 !FUNC_LIB_add return 
line = 				return ( !FUNC_LIB_add ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp55 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp55 ; 
: !VAR_USER_x !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ; 
: !VAR_TEMP_temp56 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero !VAR_USER_y !FUNC_LIB_isZero || if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp57 ; 
: !VAR_USER_x !FUNC_LIB_isZero  = !VAR_TEMP_temp57 ; 
: !VAR_TEMP_temp57 if { 
: !VAR_TEMP_temp59 !VAR_TEMP_temp57 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp58 ; 
: !VAR_USER_y !FUNC_LIB_isZero  = !VAR_TEMP_temp58 ; 
: !VAR_TEMP_temp59 !VAR_TEMP_temp58 = ; 
:  } 
: !VAR_TEMP_temp59 if  { 

orig: 
return ( !VAR_TEMP_temp60 ) 
post: 
!VAR_TEMP_temp60 return 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp60 ; 
: !VAR_TEMP_temp60 0 = ; 
: !VAR_TEMP_temp60 return  ; 

line = 	}
: 	}

line = 	bool !VAR_USER_ansNeg ;
: 	bool !VAR_USER_ansNeg ;

orig: 
!VAR_USER_ansNeg = !VAR_TEMP_temp61 
post: 
!VAR_USER_ansNeg !VAR_TEMP_temp61 = 

line = 	!VAR_USER_ansNeg = false ;
: bool !VAR_TEMP_temp61 ; 
: !VAR_TEMP_temp61 false = ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp61 =  ; 

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg if 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ; 
: !VAR_TEMP_temp62 if  { 

orig: 
!VAR_USER_x = - !VAR_USER_x 
post: 
!VAR_USER_x !VAR_USER_x u- = 

line = 		!VAR_USER_x = - !VAR_USER_x ;
: int !VAR_TEMP_temp63 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp63 ; 
: !VAR_USER_x !VAR_TEMP_temp63 =  ; 

orig: 
!VAR_USER_ansNeg = !VAR_TEMP_temp64 
post: 
!VAR_USER_ansNeg !VAR_TEMP_temp64 = 

line = 		!VAR_USER_ansNeg = true ;
: bool !VAR_TEMP_temp64 ; 
: !VAR_TEMP_temp64 true = ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp64 =  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isNeg if 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ; 
: !VAR_TEMP_temp65 if  { 

orig: 
!VAR_USER_y = - !VAR_USER_y 
post: 
!VAR_USER_y !VAR_USER_y u- = 

line = 		!VAR_USER_y = - !VAR_USER_y ;
: int !VAR_TEMP_temp66 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp66 ; 
: !VAR_USER_y !VAR_TEMP_temp66 =  ; 

orig: 
!VAR_USER_ansNeg = ! !VAR_USER_ansNeg 
post: 
!VAR_USER_ansNeg !VAR_USER_ansNeg ! = 

line = 		!VAR_USER_ansNeg = ! !VAR_USER_ansNeg ;
: bool !VAR_TEMP_temp67 ; 
: !VAR_USER_ansNeg !  = !VAR_TEMP_temp67 ; 
: !VAR_USER_ansNeg !VAR_TEMP_temp67 =  ; 

line = 	}
: 	}

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

orig: 
!VAR_USER_ans = !VAR_TEMP_temp68 
post: 
!VAR_USER_ans !VAR_TEMP_temp68 = 

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp68 ; 
: !VAR_TEMP_temp68 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp68 =  ; 

line = 	int !VAR_USER_y0 ;
: 	int !VAR_USER_y0 ;

orig: 
!VAR_USER_y0 = !VAR_USER_y 
post: 
!VAR_USER_y0 !VAR_USER_y = 

line = 	!VAR_USER_y0 = !VAR_USER_y ;
: !VAR_USER_y0 !VAR_USER_y =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( !VAR_USER_y0 > !VAR_TEMP_temp69 ) ) 
post: 
!VAR_USER_y0 !VAR_TEMP_temp69 > ! if 

line = 		if ( ! ( !VAR_USER_y0 > 0 ) ) {
: int !VAR_TEMP_temp69 ; 
: !VAR_TEMP_temp69 0 = ; 
: bool !VAR_TEMP_temp70 ; 
: !VAR_USER_y0 !VAR_TEMP_temp69 >  = !VAR_TEMP_temp70 ; 
: !VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ; 
: !VAR_TEMP_temp71 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_y1 ;
: 		int !VAR_USER_y1 ;

orig: 
!VAR_USER_y1 = !VAR_TEMP_temp72 
post: 
!VAR_USER_y1 !VAR_TEMP_temp72 = 

line = 		!VAR_USER_y1 = 1 ;
: int !VAR_TEMP_temp72 ; 
: !VAR_TEMP_temp72 1 = ; 
: !VAR_USER_y1 !VAR_TEMP_temp72 =  ; 

line = 		int !VAR_USER_y2 ;
: 		int !VAR_USER_y2 ;

orig: 
!VAR_USER_y2 = !VAR_TEMP_temp73 
post: 
!VAR_USER_y2 !VAR_TEMP_temp73 = 

line = 		!VAR_USER_y2 = 2 ;
: int !VAR_TEMP_temp73 ; 
: !VAR_TEMP_temp73 2 = ; 
: !VAR_USER_y2 !VAR_TEMP_temp73 =  ; 

line = 		int !VAR_USER_val1 ;
: 		int !VAR_USER_val1 ;

orig: 
!VAR_USER_val1 = !VAR_USER_x 
post: 
!VAR_USER_val1 !VAR_USER_x = 

line = 		!VAR_USER_val1 = !VAR_USER_x ;
: !VAR_USER_val1 !VAR_USER_x =  ; 

line = 		int !VAR_USER_val2 ;
: 		int !VAR_USER_val2 ;

orig: 
!VAR_USER_val2 = !VAR_USER_x + !VAR_USER_x 
post: 
!VAR_USER_val2 !VAR_USER_x !VAR_USER_x + = 

line = 		!VAR_USER_val2 = !VAR_USER_x + !VAR_USER_x ;
: int !VAR_TEMP_temp74 ; 
: !VAR_USER_x !VAR_USER_x +  = !VAR_TEMP_temp74 ; 
: !VAR_USER_val2 !VAR_TEMP_temp74 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

orig: 
if ( ! ( !VAR_USER_val2 <= !VAR_USER_y0 ) ) 
post: 
!VAR_USER_val2 !VAR_USER_y0 <= ! if 

line = 			if ( ! ( !VAR_USER_val2 <= !VAR_USER_y0 ) ) {
: bool !VAR_TEMP_temp75 ; 
: !VAR_USER_val2 !VAR_USER_y0 <=  = !VAR_TEMP_temp75 ; 
: !VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ; 
: !VAR_TEMP_temp76 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

orig: 
!VAR_USER_y1 = !VAR_USER_y2 
post: 
!VAR_USER_y1 !VAR_USER_y2 = 

line = 			!VAR_USER_y1 = !VAR_USER_y2 ;
: !VAR_USER_y1 !VAR_USER_y2 =  ; 

orig: 
!VAR_USER_val1 = !VAR_USER_val2 
post: 
!VAR_USER_val1 !VAR_USER_val2 = 

line = 			!VAR_USER_val1 = !VAR_USER_val2 ;
: !VAR_USER_val1 !VAR_USER_val2 =  ; 

orig: 
!VAR_USER_y2 += !VAR_USER_y2 
post: 
!VAR_USER_y2 !VAR_USER_y2 += 

line = 			!VAR_USER_y2 += !VAR_USER_y2 ;
: !VAR_USER_y2 !VAR_USER_y2 +=  ; 

orig: 
!VAR_USER_val2 += !VAR_USER_val2 
post: 
!VAR_USER_val2 !VAR_USER_val2 += 

line = 			!VAR_USER_val2 += !VAR_USER_val2 ;
: !VAR_USER_val2 !VAR_USER_val2 +=  ; 

line = 		}
: 		}

orig: 
!VAR_USER_ans += !VAR_USER_val1 
post: 
!VAR_USER_ans !VAR_USER_val1 += 

line = 		!VAR_USER_ans += !VAR_USER_val1 ;
: !VAR_USER_ans !VAR_USER_val1 +=  ; 

orig: 
!VAR_USER_y0 -= !VAR_USER_y1 
post: 
!VAR_USER_y0 !VAR_USER_y1 -= 

line = 		!VAR_USER_y0 -= !VAR_USER_y1 ;
: !VAR_USER_y0 !VAR_USER_y1 -=  ; 

line = 	}
: 	}

orig: 
if ( !VAR_USER_ansNeg ) 
post: 
!VAR_USER_ansNeg if 

line = 	if ( !VAR_USER_ansNeg ) {
: !VAR_USER_ansNeg if  { 

orig: 
!VAR_USER_ans = - !VAR_USER_ans 
post: 
!VAR_USER_ans !VAR_USER_ans u- = 

line = 		!VAR_USER_ans = - !VAR_USER_ans ;
: int !VAR_TEMP_temp77 ; 
: !VAR_USER_ans u-  = !VAR_TEMP_temp77 ; 
: !VAR_USER_ans !VAR_TEMP_temp77 =  ; 

line = 	}
: 	}

orig: 
return ( !VAR_USER_ans ) 
post: 
!VAR_USER_ans return 

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ; 
: !VAR_TEMP_temp78 if  { 

orig: 
return ( !VAR_TEMP_temp79 ) 
post: 
!VAR_TEMP_temp79 return 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp79 ; 
: !VAR_TEMP_temp79 0 = ; 
: !VAR_TEMP_temp79 return  ; 

line = 	}
: 	}

orig: 
if ( !VAR_USER_x < !VAR_TEMP_temp80 && !VAR_USER_y < !VAR_TEMP_temp81 ) 
post: 
!VAR_USER_x !VAR_TEMP_temp80 < !VAR_USER_y !VAR_TEMP_temp81 < && if 

line = 	if ( !VAR_USER_x < 0 && !VAR_USER_y < 0 ) {
: int !VAR_TEMP_temp80 ; 
: !VAR_TEMP_temp80 0 = ; 
: int !VAR_TEMP_temp81 ; 
: !VAR_TEMP_temp81 0 = ; 
: bool !VAR_TEMP_temp82 ; 
: !VAR_USER_x !VAR_TEMP_temp80 <  = !VAR_TEMP_temp82 ; 
: !VAR_TEMP_temp82 if { 
: bool !VAR_TEMP_temp83 ; 
: !VAR_USER_y !VAR_TEMP_temp81 <  = !VAR_TEMP_temp83 ; 
: !VAR_TEMP_temp84 !VAR_TEMP_temp83 = ; 
:  } 
: else { 
: !VAR_TEMP_temp84 !VAR_TEMP_temp82 = ; 
:  } 
: !VAR_TEMP_temp84 if  { 

orig: 
return ( !FUNC_LIB_div ( - !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y u- !FUNC_LIB_div return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp85 !VAR_USER_y u- !FUNC_LIB_div return 
numParam of u- = 1
now postfix = !VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div return 
line = 		return ( !FUNC_LIB_div ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp85 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp85 ; 
: int !VAR_TEMP_temp86 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp86 ; 
: !VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ; 
: !VAR_TEMP_temp87 return  ; 

line = 	}
: 	}

orig: 
if ( !VAR_USER_x < !VAR_TEMP_temp88 ) 
post: 
!VAR_USER_x !VAR_TEMP_temp88 < if 

line = 	if ( !VAR_USER_x < 0 ) {
: int !VAR_TEMP_temp88 ; 
: !VAR_TEMP_temp88 0 = ; 
: !VAR_USER_x !VAR_TEMP_temp88 < = !VAR_TEMP_temp89 ; 
: !VAR_TEMP_temp89 if  { 

orig: 
return ( - !FUNC_LIB_div ( - !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y !FUNC_LIB_div u- return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp90 !VAR_USER_y !FUNC_LIB_div u- return 
numParam of !FUNC_LIB_div = 2
now postfix = !VAR_TEMP_temp91 u- return 
line = 		return ( - !FUNC_LIB_div ( - !VAR_USER_x , !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp90 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp90 ; 
: int !VAR_TEMP_temp91 ; 
: !VAR_TEMP_temp90 !VAR_USER_y !FUNC_LIB_div  = !VAR_TEMP_temp91 ; 
: !VAR_TEMP_temp91 u- = !VAR_TEMP_temp92 ; 
: !VAR_TEMP_temp92 return  ; 

line = 	}
: 	}

orig: 
if ( !VAR_USER_y < !VAR_TEMP_temp93 ) 
post: 
!VAR_USER_y !VAR_TEMP_temp93 < if 

line = 	if ( !VAR_USER_y < 0 ) {
: int !VAR_TEMP_temp93 ; 
: !VAR_TEMP_temp93 0 = ; 
: !VAR_USER_y !VAR_TEMP_temp93 < = !VAR_TEMP_temp94 ; 
: !VAR_TEMP_temp94 if  { 

orig: 
return ( - !FUNC_LIB_div ( !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y u- !FUNC_LIB_div u- return 

numParam of u- = 1
now postfix = !VAR_USER_x !VAR_TEMP_temp95 !FUNC_LIB_div u- return 
numParam of !FUNC_LIB_div = 2
now postfix = !VAR_TEMP_temp96 u- return 
line = 		return ( - !FUNC_LIB_div ( !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp95 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp95 ; 
: int !VAR_TEMP_temp96 ; 
: !VAR_USER_x !VAR_TEMP_temp95 !FUNC_LIB_div  = !VAR_TEMP_temp96 ; 
: !VAR_TEMP_temp96 u- = !VAR_TEMP_temp97 ; 
: !VAR_TEMP_temp97 return  ; 

line = 	}
: 	}

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

orig: 
!VAR_USER_ans = !VAR_TEMP_temp98 
post: 
!VAR_USER_ans !VAR_TEMP_temp98 = 

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp98 ; 
: !VAR_TEMP_temp98 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp98 =  ; 

line = 	int !VAR_USER_n ;
: 	int !VAR_USER_n ;

orig: 
!VAR_USER_n = !VAR_USER_x 
post: 
!VAR_USER_n !VAR_USER_x = 

line = 	!VAR_USER_n = !VAR_USER_x ;
: !VAR_USER_n !VAR_USER_x =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( !VAR_USER_n >= !VAR_USER_y ) ) 
post: 
!VAR_USER_n !VAR_USER_y >= ! if 

line = 		if ( ! ( !VAR_USER_n >= !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp99 ; 
: !VAR_USER_n !VAR_USER_y >=  = !VAR_TEMP_temp99 ; 
: !VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ; 
: !VAR_TEMP_temp100 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_prevJump ;
: 		int !VAR_USER_prevJump ;

orig: 
!VAR_USER_prevJump = !VAR_TEMP_temp101 
post: 
!VAR_USER_prevJump !VAR_TEMP_temp101 = 

line = 		!VAR_USER_prevJump = 0 ;
: int !VAR_TEMP_temp101 ; 
: !VAR_TEMP_temp101 0 = ; 
: !VAR_USER_prevJump !VAR_TEMP_temp101 =  ; 

line = 		int !VAR_USER_jump ;
: 		int !VAR_USER_jump ;

orig: 
!VAR_USER_jump = !VAR_TEMP_temp102 
post: 
!VAR_USER_jump !VAR_TEMP_temp102 = 

line = 		!VAR_USER_jump = 1 ;
: int !VAR_TEMP_temp102 ; 
: !VAR_TEMP_temp102 1 = ; 
: !VAR_USER_jump !VAR_TEMP_temp102 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

orig: 
if ( ! ( !VAR_USER_y * ( !VAR_USER_ans + !VAR_USER_jump ) <= !VAR_USER_x ) ) 
post: 
!VAR_USER_y !VAR_USER_ans !VAR_USER_jump + * !VAR_USER_x <= ! if 

line = 			if ( ! ( !VAR_USER_y * ( !VAR_USER_ans + !VAR_USER_jump ) <= !VAR_USER_x ) ) {
: int !VAR_TEMP_temp103 ; 
: !VAR_USER_ans !VAR_USER_jump +  = !VAR_TEMP_temp103 ; 
: int !VAR_TEMP_temp104 ; 
: !VAR_USER_y !VAR_TEMP_temp103 *  = !VAR_TEMP_temp104 ; 
: bool !VAR_TEMP_temp105 ; 
: !VAR_TEMP_temp104 !VAR_USER_x <=  = !VAR_TEMP_temp105 ; 
: !VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ; 
: !VAR_TEMP_temp106 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

orig: 
!VAR_USER_prevJump = !VAR_USER_jump 
post: 
!VAR_USER_prevJump !VAR_USER_jump = 

line = 			!VAR_USER_prevJump = !VAR_USER_jump ;
: !VAR_USER_prevJump !VAR_USER_jump =  ; 

orig: 
!VAR_USER_jump += !VAR_USER_jump 
post: 
!VAR_USER_jump !VAR_USER_jump += 

line = 			!VAR_USER_jump += !VAR_USER_jump ;
: !VAR_USER_jump !VAR_USER_jump +=  ; 

line = 		}
: 		}

orig: 
!VAR_USER_ans += !VAR_USER_prevJump 
post: 
!VAR_USER_ans !VAR_USER_prevJump += 

line = 		!VAR_USER_ans += !VAR_USER_prevJump ;
: !VAR_USER_ans !VAR_USER_prevJump +=  ; 

orig: 
!VAR_USER_n = !VAR_USER_x - ( !VAR_USER_y * !VAR_USER_ans ) 
post: 
!VAR_USER_n !VAR_USER_x !VAR_USER_y !VAR_USER_ans * - = 

line = 		!VAR_USER_n = !VAR_USER_x - ( !VAR_USER_y * !VAR_USER_ans ) ;
: int !VAR_TEMP_temp107 ; 
: !VAR_USER_y !VAR_USER_ans *  = !VAR_TEMP_temp107 ; 
: int !VAR_TEMP_temp108 ; 
: !VAR_USER_x !VAR_TEMP_temp107 -  = !VAR_TEMP_temp108 ; 
: !VAR_USER_n !VAR_TEMP_temp108 =  ; 

line = 	}
: 	}

orig: 
return ( !VAR_USER_ans ) 
post: 
!VAR_USER_ans return 

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {

line = 	int !VAR_USER_d ;
: 	int !VAR_USER_d ;

orig: 
!VAR_USER_d = !FUNC_LIB_div ( !VAR_USER_x , !VAR_USER_y ) 
post: 
!VAR_USER_d !VAR_USER_x !VAR_USER_y !FUNC_LIB_div = 

line = 	!VAR_USER_d = !FUNC_LIB_div ( !VAR_USER_x , !VAR_USER_y ) ;
: int !VAR_TEMP_temp109 ; 
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_div  = !VAR_TEMP_temp109 ; 
: !VAR_USER_d !VAR_TEMP_temp109 =  ; 

orig: 
return ( !VAR_USER_x - !VAR_USER_y * !VAR_USER_d ) 
post: 
!VAR_USER_x !VAR_USER_y !VAR_USER_d * - return 

numParam of * = 2
now postfix = !VAR_USER_x !VAR_TEMP_temp110 - return 
line = 	return ( !VAR_USER_x - !VAR_USER_y * !VAR_USER_d ) ;
: int !VAR_TEMP_temp110 ; 
: !VAR_USER_y !VAR_USER_d *  = !VAR_TEMP_temp110 ; 
: !VAR_USER_x !VAR_TEMP_temp110 - = !VAR_TEMP_temp111 ; 
: !VAR_TEMP_temp111 return  ; 

line = }
: }

line = int !FUNC_LIB_neg ( int !VAR_USER_x ) {
: int !FUNC_LIB_neg ( int !VAR_USER_x ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ; 
: !VAR_TEMP_temp112 if  { 

orig: 
return ( !VAR_TEMP_temp113 ) 
post: 
!VAR_TEMP_temp113 return 

line = 		return ( 0 ) ;
: int !VAR_TEMP_temp113 ; 
: !VAR_TEMP_temp113 0 = ; 
: !VAR_TEMP_temp113 return  ; 

line = 	}
: 	}

orig: 
return ( !FUNC_LIB_basic_neg ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_basic_neg return 

line = 	return ( !FUNC_LIB_basic_neg ( !VAR_USER_x ) ) ;
: !VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ; 
: !VAR_TEMP_temp114 return  ; 

line = }
: }

line = bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg if 

line = 	if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ; 
: !VAR_TEMP_temp115 if  { 

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isNeg if 

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ; 
: !VAR_TEMP_temp116 if  { 

orig: 
return ( !FUNC_LIB_lt ( - !VAR_USER_y , - !VAR_USER_x ) ) 
post: 
!VAR_USER_y u- !VAR_USER_x u- !FUNC_LIB_lt return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp117 !VAR_USER_x u- !FUNC_LIB_lt return 
numParam of u- = 1
now postfix = !VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt return 
line = 			return ( !FUNC_LIB_lt ( - !VAR_USER_y , - !VAR_USER_x ) ) ;
: int !VAR_TEMP_temp117 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp117 ; 
: int !VAR_TEMP_temp118 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp118 ; 
: !VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ; 
: !VAR_TEMP_temp119 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
return ( !VAR_TEMP_temp120 ) 
post: 
!VAR_TEMP_temp120 return 

line = 			return ( true ) ;
: bool !VAR_TEMP_temp120 ; 
: !VAR_TEMP_temp120 true = ; 
: !VAR_TEMP_temp120 return  ; 

line = 		}
: 		}

line = 	}
: 	}

line = 	else {
: 	else {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ; 
: !VAR_TEMP_temp121 if  { 

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isNeg if 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ; 
: !VAR_TEMP_temp122 if  { 

orig: 
return ( !VAR_TEMP_temp123 ) 
post: 
!VAR_TEMP_temp123 return 

line = 				return ( false ) ;
: bool !VAR_TEMP_temp123 ; 
: !VAR_TEMP_temp123 false = ; 
: !VAR_TEMP_temp123 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isZero if 

line = 				if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ; 
: !VAR_TEMP_temp124 if  { 

orig: 
return ( !VAR_TEMP_temp125 ) 
post: 
!VAR_TEMP_temp125 return 

line = 					return ( false ) ;
: bool !VAR_TEMP_temp125 ; 
: !VAR_TEMP_temp125 false = ; 
: !VAR_TEMP_temp125 return  ; 

line = 				}
: 				}

line = 				else {
: 				else {

orig: 
return ( !VAR_TEMP_temp126 ) 
post: 
!VAR_TEMP_temp126 return 

line = 					return ( true ) ;
: bool !VAR_TEMP_temp126 ; 
: !VAR_TEMP_temp126 true = ; 
: !VAR_TEMP_temp126 return  ; 

line = 				}
: 				}

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isNeg !VAR_USER_y !FUNC_LIB_isZero || if 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) || !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: bool !VAR_TEMP_temp127 ; 
: !VAR_USER_y !FUNC_LIB_isNeg  = !VAR_TEMP_temp127 ; 
: !VAR_TEMP_temp127 if { 
: !VAR_TEMP_temp129 !VAR_TEMP_temp127 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp128 ; 
: !VAR_USER_y !FUNC_LIB_isZero  = !VAR_TEMP_temp128 ; 
: !VAR_TEMP_temp129 !VAR_TEMP_temp128 = ; 
:  } 
: !VAR_TEMP_temp129 if  { 

orig: 
return ( !VAR_TEMP_temp130 ) 
post: 
!VAR_TEMP_temp130 return 

line = 				return ( false ) ;
: bool !VAR_TEMP_temp130 ; 
: !VAR_TEMP_temp130 false = ; 
: !VAR_TEMP_temp130 return  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
return ( !FUNC_LIB_basic_lt ( !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt return 

line = 				return ( !FUNC_LIB_basic_lt ( !VAR_USER_x , !VAR_USER_y ) ) ;
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ; 
: !VAR_TEMP_temp131 return  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
return ( ( !VAR_USER_x == !VAR_USER_y ) || ( !VAR_USER_x < !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y == !VAR_USER_x !VAR_USER_y < || return 

numParam of == = 2
now postfix = !VAR_TEMP_temp132 !VAR_USER_x !VAR_USER_y < || return 
numParam of < = 2
now postfix = !VAR_TEMP_temp132 !VAR_TEMP_temp133 || return 
line = 	return ( ( !VAR_USER_x == !VAR_USER_y ) || ( !VAR_USER_x < !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp132 ; 
: !VAR_USER_x !VAR_USER_y ==  = !VAR_TEMP_temp132 ; 
: !VAR_TEMP_temp132 if { 
: !VAR_TEMP_temp134 !VAR_TEMP_temp132 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp133 ; 
: !VAR_USER_x !VAR_USER_y <  = !VAR_TEMP_temp133 ; 
: !VAR_TEMP_temp134 !VAR_TEMP_temp133 = ; 
:  } 
: !VAR_TEMP_temp134 return  ; 

line = }
: }

line = bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
return ( ! ( !VAR_USER_x <= !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y <= ! return 

numParam of <= = 2
now postfix = !VAR_TEMP_temp135 ! return 
line = 	return ( ! ( !VAR_USER_x <= !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp135 ; 
: !VAR_USER_x !VAR_USER_y <=  = !VAR_TEMP_temp135 ; 
: !VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ; 
: !VAR_TEMP_temp136 return  ; 

line = }
: }

line = bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
return ( ! ( !VAR_USER_x < !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y < ! return 

numParam of < = 2
now postfix = !VAR_TEMP_temp137 ! return 
line = 	return ( ! ( !VAR_USER_x < !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp137 ; 
: !VAR_USER_x !VAR_USER_y <  = !VAR_TEMP_temp137 ; 
: !VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ; 
: !VAR_TEMP_temp138 return  ; 

line = }
: }

line = bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ; 
: !VAR_TEMP_temp139 if  { 

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isZero if 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ; 
: !VAR_TEMP_temp140 if  { 

orig: 
return ( !VAR_TEMP_temp141 ) 
post: 
!VAR_TEMP_temp141 return 

line = 			return ( true ) ;
: bool !VAR_TEMP_temp141 ; 
: !VAR_TEMP_temp141 true = ; 
: !VAR_TEMP_temp141 return  ; 

line = 		}
: 		}

orig: 
return ( !VAR_TEMP_temp142 ) 
post: 
!VAR_TEMP_temp142 return 

line = 		return ( false ) ;
: bool !VAR_TEMP_temp142 ; 
: !VAR_TEMP_temp142 false = ; 
: !VAR_TEMP_temp142 return  ; 

line = 	}
: 	}

line = 	else {
: 	else {

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isNeg if 

line = 		if ( !FUNC_LIB_isNeg ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ; 
: !VAR_TEMP_temp143 if  { 

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isNeg if 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ; 
: !VAR_TEMP_temp144 if  { 

orig: 
return ( !FUNC_LIB_basic_eq ( - !VAR_USER_x , - !VAR_USER_y ) ) 
post: 
!VAR_USER_x u- !VAR_USER_y u- !FUNC_LIB_basic_eq return 

numParam of u- = 1
now postfix = !VAR_TEMP_temp145 !VAR_USER_y u- !FUNC_LIB_basic_eq return 
numParam of u- = 1
now postfix = !VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq return 
line = 				return ( !FUNC_LIB_basic_eq ( - !VAR_USER_x , - !VAR_USER_y ) ) ;
: int !VAR_TEMP_temp145 ; 
: !VAR_USER_x u-  = !VAR_TEMP_temp145 ; 
: int !VAR_TEMP_temp146 ; 
: !VAR_USER_y u-  = !VAR_TEMP_temp146 ; 
: !VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ; 
: !VAR_TEMP_temp147 return  ; 

line = 			}
: 			}

orig: 
return ( !VAR_TEMP_temp148 ) 
post: 
!VAR_TEMP_temp148 return 

line = 			return ( false ) ;
: bool !VAR_TEMP_temp148 ; 
: !VAR_TEMP_temp148 false = ; 
: !VAR_TEMP_temp148 return  ; 

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( !FUNC_LIB_isPos ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isPos if 

line = 			if ( !FUNC_LIB_isPos ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ; 
: !VAR_TEMP_temp149 if  { 

orig: 
return ( !FUNC_LIB_basic_eq ( !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq return 

line = 				return ( !FUNC_LIB_basic_eq ( !VAR_USER_x , !VAR_USER_y ) ) ;
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ; 
: !VAR_TEMP_temp150 return  ; 

line = 			}
: 			}

orig: 
return ( !VAR_TEMP_temp151 ) 
post: 
!VAR_TEMP_temp151 return 

line = 			return ( false ) ;
: bool !VAR_TEMP_temp151 ; 
: !VAR_TEMP_temp151 false = ; 
: !VAR_TEMP_temp151 return  ; 

line = 		}
: 		}

line = 	}
: 	}

line = }
: }

line = bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
return ( ! ( !VAR_USER_x == !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y == ! return 

numParam of == = 2
now postfix = !VAR_TEMP_temp152 ! return 
line = 	return ( ! ( !VAR_USER_x == !VAR_USER_y ) ) ;
: bool !VAR_TEMP_temp152 ; 
: !VAR_USER_x !VAR_USER_y ==  = !VAR_TEMP_temp152 ; 
: !VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ; 
: !VAR_TEMP_temp153 return  ; 

line = }
: }

line = int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) 
post: 
!VAR_USER_x !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_x ) ) {
: !VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ; 
: !VAR_TEMP_temp154 if  { 

orig: 
return ( !VAR_USER_y ) 
post: 
!VAR_USER_y return 

line = 		return ( !VAR_USER_y ) ;
: !VAR_USER_y return  ; 

line = 	}
: 	}

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) 
post: 
!VAR_USER_y !FUNC_LIB_isZero if 

line = 	if ( !FUNC_LIB_isZero ( !VAR_USER_y ) ) {
: !VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ; 
: !VAR_TEMP_temp155 if  { 

orig: 
return ( !VAR_USER_x ) 
post: 
!VAR_USER_x return 

line = 		return ( !VAR_USER_x ) ;
: !VAR_USER_x return  ; 

line = 	}
: 	}

orig: 
return ( !FUNC_LIB_basic_xor ( !VAR_USER_x , !VAR_USER_y ) ) 
post: 
!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor return 

line = 	return ( !FUNC_LIB_basic_xor ( !VAR_USER_x , !VAR_USER_y ) ) ;
: !VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ; 
: !VAR_TEMP_temp156 return  ; 

line = }
: }

line = void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {

line = 	int !VAR_USER_currBitIndex ;
: 	int !VAR_USER_currBitIndex ;

orig: 
!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) 
post: 
!VAR_USER_currBitIndex !FUNC_LIB_getMemBitIndex = 

line = 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
: int !VAR_TEMP_temp157 ; 
: !FUNC_LIB_getMemBitIndex  = !VAR_TEMP_temp157 ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp157 =  ; 

line = 	bool !VAR_USER_handledSign ;
: 	bool !VAR_USER_handledSign ;

orig: 
!VAR_USER_handledSign = !VAR_TEMP_temp158 
post: 
!VAR_USER_handledSign !VAR_TEMP_temp158 = 

line = 	!VAR_USER_handledSign = false ;
: bool !VAR_TEMP_temp158 ; 
: !VAR_TEMP_temp158 false = ; 
: !VAR_USER_handledSign !VAR_TEMP_temp158 =  ; 

line = 	int !VAR_USER_valIndex ;
: 	int !VAR_USER_valIndex ;

orig: 
!VAR_USER_valIndex = !VAR_TEMP_temp159 
post: 
!VAR_USER_valIndex !VAR_TEMP_temp159 = 

line = 	!VAR_USER_valIndex = 0 ;
: int !VAR_TEMP_temp159 ; 
: !VAR_TEMP_temp159 0 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp159 =  ; 

line = 	int !VAR_USER_V ;
: 	int !VAR_USER_V ;

orig: 
!VAR_USER_V = !VAR_USER_val 
post: 
!VAR_USER_V !VAR_USER_val = 

line = 	!VAR_USER_V = !VAR_USER_val ;
: !VAR_USER_V !VAR_USER_val =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( ! !FUNC_LIB_isZero ( !VAR_USER_V ) || ! !VAR_USER_handledSign ) ) 
post: 
!VAR_USER_V !FUNC_LIB_isZero ! !VAR_USER_handledSign ! || ! if 

line = 		if ( ! ( ! !FUNC_LIB_isZero ( !VAR_USER_V ) || ! !VAR_USER_handledSign ) ) {
: bool !VAR_TEMP_temp160 ; 
: !VAR_USER_V !FUNC_LIB_isZero  = !VAR_TEMP_temp160 ; 
: bool !VAR_TEMP_temp161 ; 
: !VAR_TEMP_temp160 !  = !VAR_TEMP_temp161 ; 
: !VAR_TEMP_temp161 if { 
: !VAR_TEMP_temp163 !VAR_TEMP_temp161 = ; 
:  } 
: else { 
: bool !VAR_TEMP_temp162 ; 
: !VAR_USER_handledSign !  = !VAR_TEMP_temp162 ; 
: bool !VAR_TEMP_temp163 ; 
: !VAR_TEMP_temp163 !VAR_TEMP_temp162 = ; 
:  } 
: !VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ; 
: !VAR_TEMP_temp164 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

line = 		int !VAR_USER_desiredBitIndex ;
: 		int !VAR_USER_desiredBitIndex ;

orig: 
!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex 
post: 
!VAR_USER_desiredBitIndex !VAR_USER_index !VAR_USER_valIndex + !VAR_USER_index !VAR_USER_valIndex + * !VAR_USER_valIndex + = 

line = 		!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
: int !VAR_TEMP_temp165 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp165 ; 
: int !VAR_TEMP_temp166 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp166 ; 
: int !VAR_TEMP_temp167 ; 
: !VAR_TEMP_temp165 !VAR_TEMP_temp166 *  = !VAR_TEMP_temp167 ; 
: int !VAR_TEMP_temp168 ; 
: !VAR_TEMP_temp167 !VAR_USER_valIndex +  = !VAR_TEMP_temp168 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp168 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > ! if 

line = 			if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp169 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex >  = !VAR_TEMP_temp169 ; 
: !VAR_TEMP_temp169 ! = !VAR_TEMP_temp170 ; 
: !VAR_TEMP_temp170 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

orig: 
!VAR_USER_currBitIndex -= !VAR_TEMP_temp171 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp171 -= 

line = 			!VAR_USER_currBitIndex -= 1 ;
: int !VAR_TEMP_temp171 ; 
: !VAR_TEMP_temp171 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp171 -=  ; 

orig: 
!FUNC_LIB_moveMemHeadLeft ( ) 
post: 
!FUNC_LIB_moveMemHeadLeft 

line = 			!FUNC_LIB_moveMemHeadLeft ( ) ;
: !FUNC_LIB_moveMemHeadLeft  ; 

line = 		}
: 		}

line = 		while ( true ) {
: 		while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < ! if 

line = 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp172 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp172 ; 
: !VAR_TEMP_temp172 ! = !VAR_TEMP_temp173 ; 
: !VAR_TEMP_temp173 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

orig: 
!VAR_USER_currBitIndex += !VAR_TEMP_temp174 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp174 += 

line = 			!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp174 ; 
: !VAR_TEMP_temp174 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp174 +=  ; 

orig: 
!FUNC_LIB_moveMemHeadRight ( ) 
post: 
!FUNC_LIB_moveMemHeadRight 

line = 			!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 		}
: 		}

orig: 
if ( ! !VAR_USER_handledSign ) 
post: 
!VAR_USER_handledSign ! if 

line = 		if ( ! !VAR_USER_handledSign ) {
: !VAR_USER_handledSign ! = !VAR_TEMP_temp175 ; 
: !VAR_TEMP_temp175 if  { 

orig: 
if ( !FUNC_LIB_isNeg ( !VAR_USER_V ) ) 
post: 
!VAR_USER_V !FUNC_LIB_isNeg if 

line = 			if ( !FUNC_LIB_isNeg ( !VAR_USER_V ) ) {
: !VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp176 ; 
: !VAR_TEMP_temp176 if  { 

orig: 
!FUNC_LIB_setMemBitOne ( ) 
post: 
!FUNC_LIB_setMemBitOne 

line = 				!FUNC_LIB_setMemBitOne ( ) ;
: !FUNC_LIB_setMemBitOne  ; 

orig: 
!VAR_USER_V = - !VAR_USER_V 
post: 
!VAR_USER_V !VAR_USER_V u- = 

line = 				!VAR_USER_V = - !VAR_USER_V ;
: int !VAR_TEMP_temp177 ; 
: !VAR_USER_V u-  = !VAR_TEMP_temp177 ; 
: !VAR_USER_V !VAR_TEMP_temp177 =  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
!FUNC_LIB_setMemBitZero ( ) 
post: 
!FUNC_LIB_setMemBitZero 

line = 				!FUNC_LIB_setMemBitZero ( ) ;
: !FUNC_LIB_setMemBitZero  ; 

line = 			}
: 			}

orig: 
!VAR_USER_handledSign = !VAR_TEMP_temp178 
post: 
!VAR_USER_handledSign !VAR_TEMP_temp178 = 

line = 			!VAR_USER_handledSign = true ;
: bool !VAR_TEMP_temp178 ; 
: !VAR_TEMP_temp178 true = ; 
: !VAR_USER_handledSign !VAR_TEMP_temp178 =  ; 

line = 		}
: 		}

line = 		else {
: 		else {

line = 			int !VAR_USER_V2 ;
: 			int !VAR_USER_V2 ;

orig: 
!VAR_USER_V2 = !VAR_USER_V / !VAR_TEMP_temp179 
post: 
!VAR_USER_V2 !VAR_USER_V !VAR_TEMP_temp179 / = 

line = 			!VAR_USER_V2 = !VAR_USER_V / 2 ;
: int !VAR_TEMP_temp179 ; 
: !VAR_TEMP_temp179 2 = ; 
: int !VAR_TEMP_temp180 ; 
: !VAR_USER_V !VAR_TEMP_temp179 /  = !VAR_TEMP_temp180 ; 
: !VAR_USER_V2 !VAR_TEMP_temp180 =  ; 

line = 			int !VAR_USER_bit ;
: 			int !VAR_USER_bit ;

orig: 
!VAR_USER_bit = !VAR_USER_V - ( !VAR_TEMP_temp181 * !VAR_USER_V2 ) 
post: 
!VAR_USER_bit !VAR_USER_V !VAR_TEMP_temp181 !VAR_USER_V2 * - = 

line = 			!VAR_USER_bit = !VAR_USER_V - ( 2 * !VAR_USER_V2 ) ;
: int !VAR_TEMP_temp181 ; 
: !VAR_TEMP_temp181 2 = ; 
: int !VAR_TEMP_temp182 ; 
: !VAR_TEMP_temp181 !VAR_USER_V2 *  = !VAR_TEMP_temp182 ; 
: int !VAR_TEMP_temp183 ; 
: !VAR_USER_V !VAR_TEMP_temp182 -  = !VAR_TEMP_temp183 ; 
: !VAR_USER_bit !VAR_TEMP_temp183 =  ; 

orig: 
if ( !VAR_USER_bit == !VAR_TEMP_temp184 ) 
post: 
!VAR_USER_bit !VAR_TEMP_temp184 == if 

line = 			if ( !VAR_USER_bit == 1 ) {
: int !VAR_TEMP_temp184 ; 
: !VAR_TEMP_temp184 1 = ; 
: !VAR_USER_bit !VAR_TEMP_temp184 == = !VAR_TEMP_temp185 ; 
: !VAR_TEMP_temp185 if  { 

orig: 
!FUNC_LIB_setMemBitOne ( ) 
post: 
!FUNC_LIB_setMemBitOne 

line = 				!FUNC_LIB_setMemBitOne ( ) ;
: !FUNC_LIB_setMemBitOne  ; 

line = 			}
: 			}

line = 			else {
: 			else {

orig: 
!FUNC_LIB_setMemBitZero ( ) 
post: 
!FUNC_LIB_setMemBitZero 

line = 				!FUNC_LIB_setMemBitZero ( ) ;
: !FUNC_LIB_setMemBitZero  ; 

line = 			}
: 			}

orig: 
!VAR_USER_V = !VAR_USER_V2 
post: 
!VAR_USER_V !VAR_USER_V2 = 

line = 			!VAR_USER_V = !VAR_USER_V2 ;
: !VAR_USER_V !VAR_USER_V2 =  ; 

line = 		}
: 		}

orig: 
!VAR_USER_valIndex += !VAR_TEMP_temp186 
post: 
!VAR_USER_valIndex !VAR_TEMP_temp186 += 

line = 		!VAR_USER_valIndex += 1 ;
: int !VAR_TEMP_temp186 ; 
: !VAR_TEMP_temp186 1 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp186 +=  ; 

line = 	}
: 	}

line = 	int !VAR_USER_desiredBitIndex ;
: 	int !VAR_USER_desiredBitIndex ;

orig: 
!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex 
post: 
!VAR_USER_desiredBitIndex !VAR_USER_index !VAR_USER_valIndex + !VAR_USER_index !VAR_USER_valIndex + * !VAR_USER_valIndex + = 

line = 	!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
: int !VAR_TEMP_temp187 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp187 ; 
: int !VAR_TEMP_temp188 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp188 ; 
: int !VAR_TEMP_temp189 ; 
: !VAR_TEMP_temp187 !VAR_TEMP_temp188 *  = !VAR_TEMP_temp189 ; 
: int !VAR_TEMP_temp190 ; 
: !VAR_TEMP_temp189 !VAR_USER_valIndex +  = !VAR_TEMP_temp190 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp190 =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < ! if 

line = 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp191 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp191 ; 
: !VAR_TEMP_temp191 ! = !VAR_TEMP_temp192 ; 
: !VAR_TEMP_temp192 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

orig: 
!VAR_USER_currBitIndex += !VAR_TEMP_temp193 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp193 += 

line = 		!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp193 ; 
: !VAR_TEMP_temp193 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp193 +=  ; 

orig: 
!FUNC_LIB_moveMemHeadRight ( ) 
post: 
!FUNC_LIB_moveMemHeadRight 

line = 		!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 	}
: 	}

orig: 
!FUNC_LIB_setMemBitBlank ( ) 
post: 
!FUNC_LIB_setMemBitBlank 

line = 	!FUNC_LIB_setMemBitBlank ( ) ;
: !FUNC_LIB_setMemBitBlank  ; 

orig: 
!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) 
post: 
!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex 

line = 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
: !VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex  ; 

orig: 
return 
post: 
return 

line = 	return ;
: return  ; 

line = }
: }

line = int !FUNC_LIB_memget ( int !VAR_USER_index ) {
: int !FUNC_LIB_memget ( int !VAR_USER_index ) {

line = 	int !VAR_USER_ans ;
: 	int !VAR_USER_ans ;

orig: 
!VAR_USER_ans = !VAR_TEMP_temp194 
post: 
!VAR_USER_ans !VAR_TEMP_temp194 = 

line = 	!VAR_USER_ans = 0 ;
: int !VAR_TEMP_temp194 ; 
: !VAR_TEMP_temp194 0 = ; 
: !VAR_USER_ans !VAR_TEMP_temp194 =  ; 

line = 	int !VAR_USER_currBitIndex ;
: 	int !VAR_USER_currBitIndex ;

orig: 
!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) 
post: 
!VAR_USER_currBitIndex !FUNC_LIB_getMemBitIndex = 

line = 	!VAR_USER_currBitIndex = !FUNC_LIB_getMemBitIndex ( ) ;
: int !VAR_TEMP_temp195 ; 
: !FUNC_LIB_getMemBitIndex  = !VAR_TEMP_temp195 ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp195 =  ; 

line = 	int !VAR_USER_desiredBitIndex ;
: 	int !VAR_USER_desiredBitIndex ;

orig: 
!VAR_USER_desiredBitIndex = !VAR_USER_index * !VAR_USER_index 
post: 
!VAR_USER_desiredBitIndex !VAR_USER_index !VAR_USER_index * = 

line = 	!VAR_USER_desiredBitIndex = !VAR_USER_index * !VAR_USER_index ;
: int !VAR_TEMP_temp196 ; 
: !VAR_USER_index !VAR_USER_index *  = !VAR_TEMP_temp196 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp196 =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > ! if 

line = 		if ( ! ( !VAR_USER_currBitIndex > !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp197 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex >  = !VAR_TEMP_temp197 ; 
: !VAR_TEMP_temp197 ! = !VAR_TEMP_temp198 ; 
: !VAR_TEMP_temp198 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

orig: 
!VAR_USER_currBitIndex -= !VAR_TEMP_temp199 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp199 -= 

line = 		!VAR_USER_currBitIndex -= 1 ;
: int !VAR_TEMP_temp199 ; 
: !VAR_TEMP_temp199 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp199 -=  ; 

orig: 
!FUNC_LIB_moveMemHeadLeft ( ) 
post: 
!FUNC_LIB_moveMemHeadLeft 

line = 		!FUNC_LIB_moveMemHeadLeft ( ) ;
: !FUNC_LIB_moveMemHeadLeft  ; 

line = 	}
: 	}

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < ! if 

line = 		if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp200 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp200 ; 
: !VAR_TEMP_temp200 ! = !VAR_TEMP_temp201 ; 
: !VAR_TEMP_temp201 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

orig: 
!VAR_USER_currBitIndex += !VAR_TEMP_temp202 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp202 += 

line = 		!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp202 ; 
: !VAR_TEMP_temp202 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp202 +=  ; 

orig: 
!FUNC_LIB_moveMemHeadRight ( ) 
post: 
!FUNC_LIB_moveMemHeadRight 

line = 		!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 	}
: 	}

line = 	int !VAR_USER_valIndex ;
: 	int !VAR_USER_valIndex ;

orig: 
!VAR_USER_valIndex = !VAR_TEMP_temp203 
post: 
!VAR_USER_valIndex !VAR_TEMP_temp203 = 

line = 	!VAR_USER_valIndex = 0 ;
: int !VAR_TEMP_temp203 ; 
: !VAR_TEMP_temp203 0 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp203 =  ; 

line = 	bool !VAR_USER_shouldBeNegative ;
: 	bool !VAR_USER_shouldBeNegative ;

orig: 
!VAR_USER_shouldBeNegative = !VAR_TEMP_temp204 
post: 
!VAR_USER_shouldBeNegative !VAR_TEMP_temp204 = 

line = 	!VAR_USER_shouldBeNegative = false ;
: bool !VAR_TEMP_temp204 ; 
: !VAR_TEMP_temp204 false = ; 
: !VAR_USER_shouldBeNegative !VAR_TEMP_temp204 =  ; 

line = 	int !VAR_USER_pow2 ;
: 	int !VAR_USER_pow2 ;

orig: 
!VAR_USER_pow2 = !VAR_TEMP_temp205 
post: 
!VAR_USER_pow2 !VAR_TEMP_temp205 = 

line = 	!VAR_USER_pow2 = 0 ;
: int !VAR_TEMP_temp205 ; 
: !VAR_TEMP_temp205 0 = ; 
: !VAR_USER_pow2 !VAR_TEMP_temp205 =  ; 

line = 	while ( true ) {
: 	while ( true ) {

orig: 
if ( ! ( ! !FUNC_LIB_memBitIsBlank ( ) ) ) 
post: 
!FUNC_LIB_memBitIsBlank ! ! if 

line = 		if ( ! ( ! !FUNC_LIB_memBitIsBlank ( ) ) ) {
: bool !VAR_TEMP_temp206 ; 
: !FUNC_LIB_memBitIsBlank  = !VAR_TEMP_temp206 ; 
: bool !VAR_TEMP_temp207 ; 
: !VAR_TEMP_temp206 !  = !VAR_TEMP_temp207 ; 
: !VAR_TEMP_temp207 ! = !VAR_TEMP_temp208 ; 
: !VAR_TEMP_temp208 if  { 

line = 			break ;
: 			break ;

line = 		}
: 		}

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_valIndex ) ) 
post: 
!VAR_USER_valIndex !FUNC_LIB_isZero if 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_valIndex ) ) {
: !VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp209 ; 
: !VAR_TEMP_temp209 if  { 

orig: 
if ( !FUNC_LIB_memBitIsOne ( ) ) 
post: 
!FUNC_LIB_memBitIsOne if 

line = 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
: !FUNC_LIB_memBitIsOne if  { 

orig: 
!VAR_USER_shouldBeNegative = !VAR_TEMP_temp210 
post: 
!VAR_USER_shouldBeNegative !VAR_TEMP_temp210 = 

line = 				!VAR_USER_shouldBeNegative = true ;
: bool !VAR_TEMP_temp210 ; 
: !VAR_TEMP_temp210 true = ; 
: !VAR_USER_shouldBeNegative !VAR_TEMP_temp210 =  ; 

line = 			}
: 			}

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
if ( !FUNC_LIB_memBitIsOne ( ) ) 
post: 
!FUNC_LIB_memBitIsOne if 

line = 			if ( !FUNC_LIB_memBitIsOne ( ) ) {
: !FUNC_LIB_memBitIsOne if  { 

orig: 
!VAR_USER_ans += !VAR_USER_pow2 
post: 
!VAR_USER_ans !VAR_USER_pow2 += 

line = 				!VAR_USER_ans += !VAR_USER_pow2 ;
: !VAR_USER_ans !VAR_USER_pow2 +=  ; 

line = 			}
: 			}

line = 		}
: 		}

orig: 
!VAR_USER_valIndex += !VAR_TEMP_temp211 
post: 
!VAR_USER_valIndex !VAR_TEMP_temp211 += 

line = 		!VAR_USER_valIndex += 1 ;
: int !VAR_TEMP_temp211 ; 
: !VAR_TEMP_temp211 1 = ; 
: !VAR_USER_valIndex !VAR_TEMP_temp211 +=  ; 

orig: 
if ( !FUNC_LIB_isZero ( !VAR_USER_pow2 ) ) 
post: 
!VAR_USER_pow2 !FUNC_LIB_isZero if 

line = 		if ( !FUNC_LIB_isZero ( !VAR_USER_pow2 ) ) {
: !VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp212 ; 
: !VAR_TEMP_temp212 if  { 

orig: 
!VAR_USER_pow2 = !VAR_TEMP_temp213 
post: 
!VAR_USER_pow2 !VAR_TEMP_temp213 = 

line = 			!VAR_USER_pow2 = 1 ;
: int !VAR_TEMP_temp213 ; 
: !VAR_TEMP_temp213 1 = ; 
: !VAR_USER_pow2 !VAR_TEMP_temp213 =  ; 

line = 		}
: 		}

line = 		else {
: 		else {

orig: 
!VAR_USER_pow2 += !VAR_USER_pow2 
post: 
!VAR_USER_pow2 !VAR_USER_pow2 += 

line = 			!VAR_USER_pow2 += !VAR_USER_pow2 ;
: !VAR_USER_pow2 !VAR_USER_pow2 +=  ; 

line = 		}
: 		}

orig: 
!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex 
post: 
!VAR_USER_desiredBitIndex !VAR_USER_index !VAR_USER_valIndex + !VAR_USER_index !VAR_USER_valIndex + * !VAR_USER_valIndex + = 

line = 		!VAR_USER_desiredBitIndex = ( !VAR_USER_index + !VAR_USER_valIndex ) * ( !VAR_USER_index + !VAR_USER_valIndex ) + !VAR_USER_valIndex ;
: int !VAR_TEMP_temp214 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp214 ; 
: int !VAR_TEMP_temp215 ; 
: !VAR_USER_index !VAR_USER_valIndex +  = !VAR_TEMP_temp215 ; 
: int !VAR_TEMP_temp216 ; 
: !VAR_TEMP_temp214 !VAR_TEMP_temp215 *  = !VAR_TEMP_temp216 ; 
: int !VAR_TEMP_temp217 ; 
: !VAR_TEMP_temp216 !VAR_USER_valIndex +  = !VAR_TEMP_temp217 ; 
: !VAR_USER_desiredBitIndex !VAR_TEMP_temp217 =  ; 

line = 		while ( true ) {
: 		while ( true ) {

orig: 
if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) 
post: 
!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < ! if 

line = 			if ( ! ( !VAR_USER_currBitIndex < !VAR_USER_desiredBitIndex ) ) {
: bool !VAR_TEMP_temp218 ; 
: !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex <  = !VAR_TEMP_temp218 ; 
: !VAR_TEMP_temp218 ! = !VAR_TEMP_temp219 ; 
: !VAR_TEMP_temp219 if  { 

line = 				break ;
: 				break ;

line = 			}
: 			}

orig: 
!VAR_USER_currBitIndex += !VAR_TEMP_temp220 
post: 
!VAR_USER_currBitIndex !VAR_TEMP_temp220 += 

line = 			!VAR_USER_currBitIndex += 1 ;
: int !VAR_TEMP_temp220 ; 
: !VAR_TEMP_temp220 1 = ; 
: !VAR_USER_currBitIndex !VAR_TEMP_temp220 +=  ; 

orig: 
!FUNC_LIB_moveMemHeadRight ( ) 
post: 
!FUNC_LIB_moveMemHeadRight 

line = 			!FUNC_LIB_moveMemHeadRight ( ) ;
: !FUNC_LIB_moveMemHeadRight  ; 

line = 		}
: 		}

line = 	}
: 	}

orig: 
if ( !VAR_USER_shouldBeNegative ) 
post: 
!VAR_USER_shouldBeNegative if 

line = 	if ( !VAR_USER_shouldBeNegative ) {
: !VAR_USER_shouldBeNegative if  { 

orig: 
!VAR_USER_ans = - !VAR_USER_ans 
post: 
!VAR_USER_ans !VAR_USER_ans u- = 

line = 		!VAR_USER_ans = - !VAR_USER_ans ;
: int !VAR_TEMP_temp221 ; 
: !VAR_USER_ans u-  = !VAR_TEMP_temp221 ; 
: !VAR_USER_ans !VAR_TEMP_temp221 =  ; 

line = 	}
: 	}

orig: 
!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) 
post: 
!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex 

line = 	!FUNC_LIB_setMemBitIndex ( !VAR_USER_currBitIndex ) ;
: !VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex  ; 

orig: 
return ( !VAR_USER_ans ) 
post: 
!VAR_USER_ans return 

line = 	return ( !VAR_USER_ans ) ;
: !VAR_USER_ans return  ; 

line = }
: }

line = void !FUNC_USER_what ( int !VAR_USER_x ) {
: void !FUNC_USER_what ( int !VAR_USER_x ) {

orig: 
return 
post: 
return 

line = 	return ;
: return  ; 

line = }
: }

line = int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {

line = 	int !VAR_USER_temp ;
: 	int !VAR_USER_temp ;

orig: 
!VAR_USER_temp = !VAR_USER_a * !VAR_USER_b / !VAR_USER_c 
post: 
!VAR_USER_temp !VAR_USER_a !VAR_USER_b * !VAR_USER_c / = 

line = 	!VAR_USER_temp = !VAR_USER_a * !VAR_USER_b / !VAR_USER_c ;
: int !VAR_TEMP_temp222 ; 
: !VAR_USER_a !VAR_USER_b *  = !VAR_TEMP_temp222 ; 
: int !VAR_TEMP_temp223 ; 
: !VAR_TEMP_temp222 !VAR_USER_c /  = !VAR_TEMP_temp223 ; 
: !VAR_USER_temp !VAR_TEMP_temp223 =  ; 

line = 	int !VAR_USER_x ;
: 	int !VAR_USER_x ;

orig: 
!VAR_USER_x = !VAR_USER_a - - !VAR_TEMP_temp224 
post: 
!VAR_USER_x !VAR_USER_a !VAR_TEMP_temp224 u- - = 

line = 	!VAR_USER_x = !VAR_USER_a - - 1 ;
: int !VAR_TEMP_temp224 ; 
: !VAR_TEMP_temp224 1 = ; 
: int !VAR_TEMP_temp225 ; 
: !VAR_TEMP_temp224 u-  = !VAR_TEMP_temp225 ; 
: int !VAR_TEMP_temp226 ; 
: !VAR_USER_a !VAR_TEMP_temp225 -  = !VAR_TEMP_temp226 ; 
: !VAR_USER_x !VAR_TEMP_temp226 =  ; 

orig: 
return ( !VAR_USER_temp ) 
post: 
!VAR_USER_temp return 

line = 	return ( !VAR_USER_temp ) ;
: !VAR_USER_temp return  ; 

line = }
: }

line = int !FUNC_USER_main ( ) {
: int !FUNC_USER_main ( ) {

line = 	int !VAR_USER_x ;
: 	int !VAR_USER_x ;

orig: 
!VAR_USER_x = !FUNC_LIB_nextInt ( ) 
post: 
!VAR_USER_x !FUNC_LIB_nextInt = 

line = 	!VAR_USER_x = !FUNC_LIB_nextInt ( ) ;
: int !VAR_TEMP_temp227 ; 
: !FUNC_LIB_nextInt  = !VAR_TEMP_temp227 ; 
: !VAR_USER_x !VAR_TEMP_temp227 =  ; 

line = 	int !VAR_USER_y ;
: 	int !VAR_USER_y ;

orig: 
!VAR_USER_y = !VAR_USER_x + !VAR_TEMP_temp228 
post: 
!VAR_USER_y !VAR_USER_x !VAR_TEMP_temp228 + = 

line = 	!VAR_USER_y = !VAR_USER_x + 1 ;
: int !VAR_TEMP_temp228 ; 
: !VAR_TEMP_temp228 1 = ; 
: int !VAR_TEMP_temp229 ; 
: !VAR_USER_x !VAR_TEMP_temp228 +  = !VAR_TEMP_temp229 ; 
: !VAR_USER_y !VAR_TEMP_temp229 =  ; 

orig: 
return ( !VAR_USER_x + !VAR_USER_y ) 
post: 
!VAR_USER_x !VAR_USER_y + return 

line = 	return ( !VAR_USER_x + !VAR_USER_y ) ;
: !VAR_USER_x !VAR_USER_y + = !VAR_TEMP_temp230 ; 
: !VAR_TEMP_temp230 return  ; 

line = }
: }

After simplifyExpressions, 
  0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
  1: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
  2: 	!VAR_TEMP_temp0 if {
  3: 		!VAR_USER_y return ;
  4: 	}
  5: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ;
  6: 	!VAR_TEMP_temp1 if {
  7: 		!VAR_USER_x return ;
  8: 	}
  9: 	bool !VAR_TEMP_temp2 ;
 10: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp2 ;
 11: 	!VAR_TEMP_temp2 if {
 12: 		bool !VAR_TEMP_temp3 ;
 13: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp3 ;
 14: 		!VAR_TEMP_temp4 !VAR_TEMP_temp3 = ;
 15: 	}
 16: 	else {
 17: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 = ;
 18: 	}
 19: 	!VAR_TEMP_temp4 if {
 20: 		int !VAR_TEMP_temp5 ;
 21: 		!VAR_USER_x u- = !VAR_TEMP_temp5 ;
 22: 		!VAR_TEMP_temp5 !VAR_USER_y == = !VAR_TEMP_temp6 ;
 23: 		!VAR_TEMP_temp6 if {
 24: 			int !VAR_TEMP_temp7 ;
 25: 			!VAR_TEMP_temp7 0 = ;
 26: 			!VAR_TEMP_temp7 return ;
 27: 		}
 28: 		else {
 29: 			int !VAR_TEMP_temp8 ;
 30: 			!VAR_USER_x u- = !VAR_TEMP_temp8 ;
 31: 			!VAR_TEMP_temp8 !VAR_USER_y < = !VAR_TEMP_temp9 ;
 32: 			!VAR_TEMP_temp9 if {
 33: 				int !VAR_TEMP_temp10 ;
 34: 				!VAR_USER_x u- = !VAR_TEMP_temp10 ;
 35: 				!VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ;
 36: 				!VAR_TEMP_temp11 return ;
 37: 			}
 38: 			else {
 39: 				int !VAR_TEMP_temp12 ;
 40: 				!VAR_USER_x u- = !VAR_TEMP_temp12 ;
 41: 				int !VAR_TEMP_temp13 ;
 42: 				!VAR_USER_y !FUNC_LIB_basic_sub = !VAR_TEMP_temp13 ;
 43: 				!VAR_TEMP_temp12 !VAR_TEMP_temp13 u- = !VAR_TEMP_temp14 ;
 44: 				!VAR_TEMP_temp14 return ;
 45: 			}
 46: 		}
 47: 	}
 48: 	else {
 49: 		bool !VAR_TEMP_temp15 ;
 50: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp15 ;
 51: 		!VAR_TEMP_temp15 if {
 52: 			bool !VAR_TEMP_temp16 ;
 53: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp16 ;
 54: 			!VAR_TEMP_temp17 !VAR_TEMP_temp16 = ;
 55: 		}
 56: 		else {
 57: 			!VAR_TEMP_temp17 !VAR_TEMP_temp15 = ;
 58: 		}
 59: 		!VAR_TEMP_temp17 if {
 60: 			int !VAR_TEMP_temp18 ;
 61: 			!VAR_USER_y u- = !VAR_TEMP_temp18 ;
 62: 			!VAR_TEMP_temp18 !VAR_USER_x == = !VAR_TEMP_temp19 ;
 63: 			!VAR_TEMP_temp19 if {
 64: 				int !VAR_TEMP_temp20 ;
 65: 				!VAR_TEMP_temp20 0 = ;
 66: 				!VAR_TEMP_temp20 return ;
 67: 			}
 68: 			else {
 69: 				int !VAR_TEMP_temp21 ;
 70: 				!VAR_USER_y u- = !VAR_TEMP_temp21 ;
 71: 				!VAR_TEMP_temp21 !VAR_USER_x < = !VAR_TEMP_temp22 ;
 72: 				!VAR_TEMP_temp22 if {
 73: 					int !VAR_TEMP_temp23 ;
 74: 					!VAR_USER_y u- = !VAR_TEMP_temp23 ;
 75: 					!VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ;
 76: 					!VAR_TEMP_temp24 return ;
 77: 				}
 78: 				else {
 79: 					int !VAR_TEMP_temp25 ;
 80: 					!VAR_USER_y u- = !VAR_TEMP_temp25 ;
 81: 					int !VAR_TEMP_temp26 ;
 82: 					!VAR_USER_x !FUNC_LIB_basic_sub = !VAR_TEMP_temp26 ;
 83: 					!VAR_TEMP_temp25 !VAR_TEMP_temp26 u- = !VAR_TEMP_temp27 ;
 84: 					!VAR_TEMP_temp27 return ;
 85: 				}
 86: 			}
 87: 		}
 88: 		else {
 89: 			bool !VAR_TEMP_temp28 ;
 90: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp28 ;
 91: 			!VAR_TEMP_temp28 if {
 92: 				bool !VAR_TEMP_temp29 ;
 93: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp29 ;
 94: 				!VAR_TEMP_temp30 !VAR_TEMP_temp29 = ;
 95: 			}
 96: 			else {
 97: 				!VAR_TEMP_temp30 !VAR_TEMP_temp28 = ;
 98: 			}
 99: 			!VAR_TEMP_temp30 if {
100: 				int !VAR_TEMP_temp31 ;
101: 				!VAR_USER_x u- = !VAR_TEMP_temp31 ;
102: 				int !VAR_TEMP_temp32 ;
103: 				!VAR_USER_y u- = !VAR_TEMP_temp32 ;
104: 				int !VAR_TEMP_temp33 ;
105: 				!VAR_TEMP_temp32 !FUNC_LIB_basic_add = !VAR_TEMP_temp33 ;
106: 				!VAR_TEMP_temp31 !VAR_TEMP_temp33 u- = !VAR_TEMP_temp34 ;
107: 				!VAR_TEMP_temp34 return ;
108: 			}
109: 			else {
110: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ;
111: 				!VAR_TEMP_temp35 return ;
112: 			}
113: 		}
114: 	}
115: }
116: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
117: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ;
118: 	!VAR_TEMP_temp36 if {
119: 		!VAR_USER_y u- = !VAR_TEMP_temp37 ;
120: 		!VAR_TEMP_temp37 return ;
121: 	}
122: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ;
123: 	!VAR_TEMP_temp38 if {
124: 		!VAR_USER_x return ;
125: 	}
126: 	bool !VAR_TEMP_temp39 ;
127: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp39 ;
128: 	!VAR_TEMP_temp39 if {
129: 		bool !VAR_TEMP_temp40 ;
130: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp40 ;
131: 		!VAR_TEMP_temp41 !VAR_TEMP_temp40 = ;
132: 	}
133: 	else {
134: 		!VAR_TEMP_temp41 !VAR_TEMP_temp39 = ;
135: 	}
136: 	!VAR_TEMP_temp41 if {
137: 		int !VAR_TEMP_temp42 ;
138: 		!VAR_USER_y u- = !VAR_TEMP_temp42 ;
139: 		!VAR_USER_x !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ;
140: 		!VAR_TEMP_temp43 return ;
141: 	}
142: 	else {
143: 		bool !VAR_TEMP_temp44 ;
144: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp44 ;
145: 		!VAR_TEMP_temp44 if {
146: 			bool !VAR_TEMP_temp45 ;
147: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp45 ;
148: 			!VAR_TEMP_temp46 !VAR_TEMP_temp45 = ;
149: 		}
150: 		else {
151: 			!VAR_TEMP_temp46 !VAR_TEMP_temp44 = ;
152: 		}
153: 		!VAR_TEMP_temp46 if {
154: 			int !VAR_TEMP_temp47 ;
155: 			!VAR_USER_x u- = !VAR_TEMP_temp47 ;
156: 			int !VAR_TEMP_temp48 ;
157: 			!VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp48 ;
158: 			!VAR_TEMP_temp47 !VAR_TEMP_temp48 u- = !VAR_TEMP_temp49 ;
159: 			!VAR_TEMP_temp49 return ;
160: 		}
161: 		else {
162: 			bool !VAR_TEMP_temp50 ;
163: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp50 ;
164: 			!VAR_TEMP_temp50 if {
165: 				bool !VAR_TEMP_temp51 ;
166: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp51 ;
167: 				!VAR_TEMP_temp52 !VAR_TEMP_temp51 = ;
168: 			}
169: 			else {
170: 				!VAR_TEMP_temp52 !VAR_TEMP_temp50 = ;
171: 			}
172: 			!VAR_TEMP_temp52 if {
173: 				int !VAR_TEMP_temp53 ;
174: 				!VAR_USER_y u- = !VAR_TEMP_temp53 ;
175: 				!VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ;
176: 				!VAR_TEMP_temp54 return ;
177: 			}
178: 			else {
179: 				int !VAR_TEMP_temp55 ;
180: 				!VAR_USER_y u- = !VAR_TEMP_temp55 ;
181: 				!VAR_USER_x !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ;
182: 				!VAR_TEMP_temp56 return ;
183: 			}
184: 		}
185: 	}
186: }
187: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
188: 	bool !VAR_TEMP_temp57 ;
189: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp57 ;
190: 	!VAR_TEMP_temp57 if {
191: 		!VAR_TEMP_temp59 !VAR_TEMP_temp57 = ;
192: 	}
193: 	else {
194: 		bool !VAR_TEMP_temp58 ;
195: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp58 ;
196: 		!VAR_TEMP_temp59 !VAR_TEMP_temp58 = ;
197: 	}
198: 	!VAR_TEMP_temp59 if {
199: 		int !VAR_TEMP_temp60 ;
200: 		!VAR_TEMP_temp60 0 = ;
201: 		!VAR_TEMP_temp60 return ;
202: 	}
203: 	bool !VAR_USER_ansNeg ;
204: 	bool !VAR_TEMP_temp61 ;
205: 	!VAR_TEMP_temp61 false = ;
206: 	!VAR_USER_ansNeg !VAR_TEMP_temp61 = ;
207: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ;
208: 	!VAR_TEMP_temp62 if {
209: 		int !VAR_TEMP_temp63 ;
210: 		!VAR_USER_x u- = !VAR_TEMP_temp63 ;
211: 		!VAR_USER_x !VAR_TEMP_temp63 = ;
212: 		bool !VAR_TEMP_temp64 ;
213: 		!VAR_TEMP_temp64 true = ;
214: 		!VAR_USER_ansNeg !VAR_TEMP_temp64 = ;
215: 	}
216: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ;
217: 	!VAR_TEMP_temp65 if {
218: 		int !VAR_TEMP_temp66 ;
219: 		!VAR_USER_y u- = !VAR_TEMP_temp66 ;
220: 		!VAR_USER_y !VAR_TEMP_temp66 = ;
221: 		bool !VAR_TEMP_temp67 ;
222: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp67 ;
223: 		!VAR_USER_ansNeg !VAR_TEMP_temp67 = ;
224: 	}
225: 	int !VAR_USER_ans ;
226: 	int !VAR_TEMP_temp68 ;
227: 	!VAR_TEMP_temp68 0 = ;
228: 	!VAR_USER_ans !VAR_TEMP_temp68 = ;
229: 	int !VAR_USER_y0 ;
230: 	!VAR_USER_y0 !VAR_USER_y = ;
231: 	while ( true ) {
232: 		int !VAR_TEMP_temp69 ;
233: 		!VAR_TEMP_temp69 0 = ;
234: 		bool !VAR_TEMP_temp70 ;
235: 		!VAR_USER_y0 !VAR_TEMP_temp69 > = !VAR_TEMP_temp70 ;
236: 		!VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ;
237: 		!VAR_TEMP_temp71 if {
238: 			break ;
239: 		}
240: 		int !VAR_USER_y1 ;
241: 		int !VAR_TEMP_temp72 ;
242: 		!VAR_TEMP_temp72 1 = ;
243: 		!VAR_USER_y1 !VAR_TEMP_temp72 = ;
244: 		int !VAR_USER_y2 ;
245: 		int !VAR_TEMP_temp73 ;
246: 		!VAR_TEMP_temp73 2 = ;
247: 		!VAR_USER_y2 !VAR_TEMP_temp73 = ;
248: 		int !VAR_USER_val1 ;
249: 		!VAR_USER_val1 !VAR_USER_x = ;
250: 		int !VAR_USER_val2 ;
251: 		int !VAR_TEMP_temp74 ;
252: 		!VAR_USER_x !VAR_USER_x + = !VAR_TEMP_temp74 ;
253: 		!VAR_USER_val2 !VAR_TEMP_temp74 = ;
254: 		while ( true ) {
255: 			bool !VAR_TEMP_temp75 ;
256: 			!VAR_USER_val2 !VAR_USER_y0 <= = !VAR_TEMP_temp75 ;
257: 			!VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ;
258: 			!VAR_TEMP_temp76 if {
259: 				break ;
260: 			}
261: 			!VAR_USER_y1 !VAR_USER_y2 = ;
262: 			!VAR_USER_val1 !VAR_USER_val2 = ;
263: 			!VAR_USER_y2 !VAR_USER_y2 += ;
264: 			!VAR_USER_val2 !VAR_USER_val2 += ;
265: 		}
266: 		!VAR_USER_ans !VAR_USER_val1 += ;
267: 		!VAR_USER_y0 !VAR_USER_y1 -= ;
268: 	}
269: 	!VAR_USER_ansNeg if {
270: 		int !VAR_TEMP_temp77 ;
271: 		!VAR_USER_ans u- = !VAR_TEMP_temp77 ;
272: 		!VAR_USER_ans !VAR_TEMP_temp77 = ;
273: 	}
274: 	!VAR_USER_ans return ;
275: }
276: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
277: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ;
278: 	!VAR_TEMP_temp78 if {
279: 		int !VAR_TEMP_temp79 ;
280: 		!VAR_TEMP_temp79 0 = ;
281: 		!VAR_TEMP_temp79 return ;
282: 	}
283: 	int !VAR_TEMP_temp80 ;
284: 	!VAR_TEMP_temp80 0 = ;
285: 	int !VAR_TEMP_temp81 ;
286: 	!VAR_TEMP_temp81 0 = ;
287: 	bool !VAR_TEMP_temp82 ;
288: 	!VAR_USER_x !VAR_TEMP_temp80 < = !VAR_TEMP_temp82 ;
289: 	!VAR_TEMP_temp82 if {
290: 		bool !VAR_TEMP_temp83 ;
291: 		!VAR_USER_y !VAR_TEMP_temp81 < = !VAR_TEMP_temp83 ;
292: 		!VAR_TEMP_temp84 !VAR_TEMP_temp83 = ;
293: 	}
294: 	else {
295: 		!VAR_TEMP_temp84 !VAR_TEMP_temp82 = ;
296: 	}
297: 	!VAR_TEMP_temp84 if {
298: 		int !VAR_TEMP_temp85 ;
299: 		!VAR_USER_x u- = !VAR_TEMP_temp85 ;
300: 		int !VAR_TEMP_temp86 ;
301: 		!VAR_USER_y u- = !VAR_TEMP_temp86 ;
302: 		!VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ;
303: 		!VAR_TEMP_temp87 return ;
304: 	}
305: 	int !VAR_TEMP_temp88 ;
306: 	!VAR_TEMP_temp88 0 = ;
307: 	!VAR_USER_x !VAR_TEMP_temp88 < = !VAR_TEMP_temp89 ;
308: 	!VAR_TEMP_temp89 if {
309: 		int !VAR_TEMP_temp90 ;
310: 		!VAR_USER_x u- = !VAR_TEMP_temp90 ;
311: 		int !VAR_TEMP_temp91 ;
312: 		!VAR_TEMP_temp90 !VAR_USER_y !FUNC_LIB_div = !VAR_TEMP_temp91 ;
313: 		!VAR_TEMP_temp91 u- = !VAR_TEMP_temp92 ;
314: 		!VAR_TEMP_temp92 return ;
315: 	}
316: 	int !VAR_TEMP_temp93 ;
317: 	!VAR_TEMP_temp93 0 = ;
318: 	!VAR_USER_y !VAR_TEMP_temp93 < = !VAR_TEMP_temp94 ;
319: 	!VAR_TEMP_temp94 if {
320: 		int !VAR_TEMP_temp95 ;
321: 		!VAR_USER_y u- = !VAR_TEMP_temp95 ;
322: 		int !VAR_TEMP_temp96 ;
323: 		!VAR_USER_x !VAR_TEMP_temp95 !FUNC_LIB_div = !VAR_TEMP_temp96 ;
324: 		!VAR_TEMP_temp96 u- = !VAR_TEMP_temp97 ;
325: 		!VAR_TEMP_temp97 return ;
326: 	}
327: 	int !VAR_USER_ans ;
328: 	int !VAR_TEMP_temp98 ;
329: 	!VAR_TEMP_temp98 0 = ;
330: 	!VAR_USER_ans !VAR_TEMP_temp98 = ;
331: 	int !VAR_USER_n ;
332: 	!VAR_USER_n !VAR_USER_x = ;
333: 	while ( true ) {
334: 		bool !VAR_TEMP_temp99 ;
335: 		!VAR_USER_n !VAR_USER_y >= = !VAR_TEMP_temp99 ;
336: 		!VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ;
337: 		!VAR_TEMP_temp100 if {
338: 			break ;
339: 		}
340: 		int !VAR_USER_prevJump ;
341: 		int !VAR_TEMP_temp101 ;
342: 		!VAR_TEMP_temp101 0 = ;
343: 		!VAR_USER_prevJump !VAR_TEMP_temp101 = ;
344: 		int !VAR_USER_jump ;
345: 		int !VAR_TEMP_temp102 ;
346: 		!VAR_TEMP_temp102 1 = ;
347: 		!VAR_USER_jump !VAR_TEMP_temp102 = ;
348: 		while ( true ) {
349: 			int !VAR_TEMP_temp103 ;
350: 			!VAR_USER_ans !VAR_USER_jump + = !VAR_TEMP_temp103 ;
351: 			int !VAR_TEMP_temp104 ;
352: 			!VAR_USER_y !VAR_TEMP_temp103 * = !VAR_TEMP_temp104 ;
353: 			bool !VAR_TEMP_temp105 ;
354: 			!VAR_TEMP_temp104 !VAR_USER_x <= = !VAR_TEMP_temp105 ;
355: 			!VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ;
356: 			!VAR_TEMP_temp106 if {
357: 				break ;
358: 			}
359: 			!VAR_USER_prevJump !VAR_USER_jump = ;
360: 			!VAR_USER_jump !VAR_USER_jump += ;
361: 		}
362: 		!VAR_USER_ans !VAR_USER_prevJump += ;
363: 		int !VAR_TEMP_temp107 ;
364: 		!VAR_USER_y !VAR_USER_ans * = !VAR_TEMP_temp107 ;
365: 		int !VAR_TEMP_temp108 ;
366: 		!VAR_USER_x !VAR_TEMP_temp107 - = !VAR_TEMP_temp108 ;
367: 		!VAR_USER_n !VAR_TEMP_temp108 = ;
368: 	}
369: 	!VAR_USER_ans return ;
370: }
371: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
372: 	int !VAR_USER_d ;
373: 	int !VAR_TEMP_temp109 ;
374: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_div = !VAR_TEMP_temp109 ;
375: 	!VAR_USER_d !VAR_TEMP_temp109 = ;
376: 	int !VAR_TEMP_temp110 ;
377: 	!VAR_USER_y !VAR_USER_d * = !VAR_TEMP_temp110 ;
378: 	!VAR_USER_x !VAR_TEMP_temp110 - = !VAR_TEMP_temp111 ;
379: 	!VAR_TEMP_temp111 return ;
380: }
381: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
382: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ;
383: 	!VAR_TEMP_temp112 if {
384: 		int !VAR_TEMP_temp113 ;
385: 		!VAR_TEMP_temp113 0 = ;
386: 		!VAR_TEMP_temp113 return ;
387: 	}
388: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ;
389: 	!VAR_TEMP_temp114 return ;
390: }
391: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
392: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ;
393: 	!VAR_TEMP_temp115 if {
394: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ;
395: 		!VAR_TEMP_temp116 if {
396: 			int !VAR_TEMP_temp117 ;
397: 			!VAR_USER_y u- = !VAR_TEMP_temp117 ;
398: 			int !VAR_TEMP_temp118 ;
399: 			!VAR_USER_x u- = !VAR_TEMP_temp118 ;
400: 			!VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ;
401: 			!VAR_TEMP_temp119 return ;
402: 		}
403: 		else {
404: 			bool !VAR_TEMP_temp120 ;
405: 			!VAR_TEMP_temp120 true = ;
406: 			!VAR_TEMP_temp120 return ;
407: 		}
408: 	}
409: 	else {
410: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ;
411: 		!VAR_TEMP_temp121 if {
412: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ;
413: 			!VAR_TEMP_temp122 if {
414: 				bool !VAR_TEMP_temp123 ;
415: 				!VAR_TEMP_temp123 false = ;
416: 				!VAR_TEMP_temp123 return ;
417: 			}
418: 			else {
419: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ;
420: 				!VAR_TEMP_temp124 if {
421: 					bool !VAR_TEMP_temp125 ;
422: 					!VAR_TEMP_temp125 false = ;
423: 					!VAR_TEMP_temp125 return ;
424: 				}
425: 				else {
426: 					bool !VAR_TEMP_temp126 ;
427: 					!VAR_TEMP_temp126 true = ;
428: 					!VAR_TEMP_temp126 return ;
429: 				}
430: 			}
431: 		}
432: 		else {
433: 			bool !VAR_TEMP_temp127 ;
434: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp127 ;
435: 			!VAR_TEMP_temp127 if {
436: 				!VAR_TEMP_temp129 !VAR_TEMP_temp127 = ;
437: 			}
438: 			else {
439: 				bool !VAR_TEMP_temp128 ;
440: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp128 ;
441: 				!VAR_TEMP_temp129 !VAR_TEMP_temp128 = ;
442: 			}
443: 			!VAR_TEMP_temp129 if {
444: 				bool !VAR_TEMP_temp130 ;
445: 				!VAR_TEMP_temp130 false = ;
446: 				!VAR_TEMP_temp130 return ;
447: 			}
448: 			else {
449: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ;
450: 				!VAR_TEMP_temp131 return ;
451: 			}
452: 		}
453: 	}
454: }
455: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
456: 	bool !VAR_TEMP_temp132 ;
457: 	!VAR_USER_x !VAR_USER_y == = !VAR_TEMP_temp132 ;
458: 	!VAR_TEMP_temp132 if {
459: 		!VAR_TEMP_temp134 !VAR_TEMP_temp132 = ;
460: 	}
461: 	else {
462: 		bool !VAR_TEMP_temp133 ;
463: 		!VAR_USER_x !VAR_USER_y < = !VAR_TEMP_temp133 ;
464: 		!VAR_TEMP_temp134 !VAR_TEMP_temp133 = ;
465: 	}
466: 	!VAR_TEMP_temp134 return ;
467: }
468: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
469: 	bool !VAR_TEMP_temp135 ;
470: 	!VAR_USER_x !VAR_USER_y <= = !VAR_TEMP_temp135 ;
471: 	!VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ;
472: 	!VAR_TEMP_temp136 return ;
473: }
474: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
475: 	bool !VAR_TEMP_temp137 ;
476: 	!VAR_USER_x !VAR_USER_y < = !VAR_TEMP_temp137 ;
477: 	!VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ;
478: 	!VAR_TEMP_temp138 return ;
479: }
480: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
481: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ;
482: 	!VAR_TEMP_temp139 if {
483: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ;
484: 		!VAR_TEMP_temp140 if {
485: 			bool !VAR_TEMP_temp141 ;
486: 			!VAR_TEMP_temp141 true = ;
487: 			!VAR_TEMP_temp141 return ;
488: 		}
489: 		bool !VAR_TEMP_temp142 ;
490: 		!VAR_TEMP_temp142 false = ;
491: 		!VAR_TEMP_temp142 return ;
492: 	}
493: 	else {
494: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ;
495: 		!VAR_TEMP_temp143 if {
496: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ;
497: 			!VAR_TEMP_temp144 if {
498: 				int !VAR_TEMP_temp145 ;
499: 				!VAR_USER_x u- = !VAR_TEMP_temp145 ;
500: 				int !VAR_TEMP_temp146 ;
501: 				!VAR_USER_y u- = !VAR_TEMP_temp146 ;
502: 				!VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ;
503: 				!VAR_TEMP_temp147 return ;
504: 			}
505: 			bool !VAR_TEMP_temp148 ;
506: 			!VAR_TEMP_temp148 false = ;
507: 			!VAR_TEMP_temp148 return ;
508: 		}
509: 		else {
510: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ;
511: 			!VAR_TEMP_temp149 if {
512: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ;
513: 				!VAR_TEMP_temp150 return ;
514: 			}
515: 			bool !VAR_TEMP_temp151 ;
516: 			!VAR_TEMP_temp151 false = ;
517: 			!VAR_TEMP_temp151 return ;
518: 		}
519: 	}
520: }
521: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
522: 	bool !VAR_TEMP_temp152 ;
523: 	!VAR_USER_x !VAR_USER_y == = !VAR_TEMP_temp152 ;
524: 	!VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ;
525: 	!VAR_TEMP_temp153 return ;
526: }
527: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
528: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ;
529: 	!VAR_TEMP_temp154 if {
530: 		!VAR_USER_y return ;
531: 	}
532: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ;
533: 	!VAR_TEMP_temp155 if {
534: 		!VAR_USER_x return ;
535: 	}
536: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ;
537: 	!VAR_TEMP_temp156 return ;
538: }
539: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
540: 	int !VAR_USER_currBitIndex ;
541: 	int !VAR_TEMP_temp157 ;
542: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp157 ;
543: 	!VAR_USER_currBitIndex !VAR_TEMP_temp157 = ;
544: 	bool !VAR_USER_handledSign ;
545: 	bool !VAR_TEMP_temp158 ;
546: 	!VAR_TEMP_temp158 false = ;
547: 	!VAR_USER_handledSign !VAR_TEMP_temp158 = ;
548: 	int !VAR_USER_valIndex ;
549: 	int !VAR_TEMP_temp159 ;
550: 	!VAR_TEMP_temp159 0 = ;
551: 	!VAR_USER_valIndex !VAR_TEMP_temp159 = ;
552: 	int !VAR_USER_V ;
553: 	!VAR_USER_V !VAR_USER_val = ;
554: 	while ( true ) {
555: 		bool !VAR_TEMP_temp160 ;
556: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp160 ;
557: 		bool !VAR_TEMP_temp161 ;
558: 		!VAR_TEMP_temp160 ! = !VAR_TEMP_temp161 ;
559: 		!VAR_TEMP_temp161 if {
560: 			!VAR_TEMP_temp163 !VAR_TEMP_temp161 = ;
561: 		}
562: 		else {
563: 			bool !VAR_TEMP_temp162 ;
564: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp162 ;
565: 			bool !VAR_TEMP_temp163 ;
566: 			!VAR_TEMP_temp163 !VAR_TEMP_temp162 = ;
567: 		}
568: 		!VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ;
569: 		!VAR_TEMP_temp164 if {
570: 			break ;
571: 		}
572: 		int !VAR_USER_desiredBitIndex ;
573: 		int !VAR_TEMP_temp165 ;
574: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp165 ;
575: 		int !VAR_TEMP_temp166 ;
576: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp166 ;
577: 		int !VAR_TEMP_temp167 ;
578: 		!VAR_TEMP_temp165 !VAR_TEMP_temp166 * = !VAR_TEMP_temp167 ;
579: 		int !VAR_TEMP_temp168 ;
580: 		!VAR_TEMP_temp167 !VAR_USER_valIndex + = !VAR_TEMP_temp168 ;
581: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp168 = ;
582: 		while ( true ) {
583: 			bool !VAR_TEMP_temp169 ;
584: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > = !VAR_TEMP_temp169 ;
585: 			!VAR_TEMP_temp169 ! = !VAR_TEMP_temp170 ;
586: 			!VAR_TEMP_temp170 if {
587: 				break ;
588: 			}
589: 			int !VAR_TEMP_temp171 ;
590: 			!VAR_TEMP_temp171 1 = ;
591: 			!VAR_USER_currBitIndex !VAR_TEMP_temp171 -= ;
592: 			!FUNC_LIB_moveMemHeadLeft ;
593: 		}
594: 		while ( true ) {
595: 			bool !VAR_TEMP_temp172 ;
596: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp172 ;
597: 			!VAR_TEMP_temp172 ! = !VAR_TEMP_temp173 ;
598: 			!VAR_TEMP_temp173 if {
599: 				break ;
600: 			}
601: 			int !VAR_TEMP_temp174 ;
602: 			!VAR_TEMP_temp174 1 = ;
603: 			!VAR_USER_currBitIndex !VAR_TEMP_temp174 += ;
604: 			!FUNC_LIB_moveMemHeadRight ;
605: 		}
606: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp175 ;
607: 		!VAR_TEMP_temp175 if {
608: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp176 ;
609: 			!VAR_TEMP_temp176 if {
610: 				!FUNC_LIB_setMemBitOne ;
611: 				int !VAR_TEMP_temp177 ;
612: 				!VAR_USER_V u- = !VAR_TEMP_temp177 ;
613: 				!VAR_USER_V !VAR_TEMP_temp177 = ;
614: 			}
615: 			else {
616: 				!FUNC_LIB_setMemBitZero ;
617: 			}
618: 			bool !VAR_TEMP_temp178 ;
619: 			!VAR_TEMP_temp178 true = ;
620: 			!VAR_USER_handledSign !VAR_TEMP_temp178 = ;
621: 		}
622: 		else {
623: 			int !VAR_USER_V2 ;
624: 			int !VAR_TEMP_temp179 ;
625: 			!VAR_TEMP_temp179 2 = ;
626: 			int !VAR_TEMP_temp180 ;
627: 			!VAR_USER_V !VAR_TEMP_temp179 / = !VAR_TEMP_temp180 ;
628: 			!VAR_USER_V2 !VAR_TEMP_temp180 = ;
629: 			int !VAR_USER_bit ;
630: 			int !VAR_TEMP_temp181 ;
631: 			!VAR_TEMP_temp181 2 = ;
632: 			int !VAR_TEMP_temp182 ;
633: 			!VAR_TEMP_temp181 !VAR_USER_V2 * = !VAR_TEMP_temp182 ;
634: 			int !VAR_TEMP_temp183 ;
635: 			!VAR_USER_V !VAR_TEMP_temp182 - = !VAR_TEMP_temp183 ;
636: 			!VAR_USER_bit !VAR_TEMP_temp183 = ;
637: 			int !VAR_TEMP_temp184 ;
638: 			!VAR_TEMP_temp184 1 = ;
639: 			!VAR_USER_bit !VAR_TEMP_temp184 == = !VAR_TEMP_temp185 ;
640: 			!VAR_TEMP_temp185 if {
641: 				!FUNC_LIB_setMemBitOne ;
642: 			}
643: 			else {
644: 				!FUNC_LIB_setMemBitZero ;
645: 			}
646: 			!VAR_USER_V !VAR_USER_V2 = ;
647: 		}
648: 		int !VAR_TEMP_temp186 ;
649: 		!VAR_TEMP_temp186 1 = ;
650: 		!VAR_USER_valIndex !VAR_TEMP_temp186 += ;
651: 	}
652: 	int !VAR_USER_desiredBitIndex ;
653: 	int !VAR_TEMP_temp187 ;
654: 	!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp187 ;
655: 	int !VAR_TEMP_temp188 ;
656: 	!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp188 ;
657: 	int !VAR_TEMP_temp189 ;
658: 	!VAR_TEMP_temp187 !VAR_TEMP_temp188 * = !VAR_TEMP_temp189 ;
659: 	int !VAR_TEMP_temp190 ;
660: 	!VAR_TEMP_temp189 !VAR_USER_valIndex + = !VAR_TEMP_temp190 ;
661: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp190 = ;
662: 	while ( true ) {
663: 		bool !VAR_TEMP_temp191 ;
664: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp191 ;
665: 		!VAR_TEMP_temp191 ! = !VAR_TEMP_temp192 ;
666: 		!VAR_TEMP_temp192 if {
667: 			break ;
668: 		}
669: 		int !VAR_TEMP_temp193 ;
670: 		!VAR_TEMP_temp193 1 = ;
671: 		!VAR_USER_currBitIndex !VAR_TEMP_temp193 += ;
672: 		!FUNC_LIB_moveMemHeadRight ;
673: 	}
674: 	!FUNC_LIB_setMemBitBlank ;
675: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
676: 	return ;
677: }
678: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
679: 	int !VAR_USER_ans ;
680: 	int !VAR_TEMP_temp194 ;
681: 	!VAR_TEMP_temp194 0 = ;
682: 	!VAR_USER_ans !VAR_TEMP_temp194 = ;
683: 	int !VAR_USER_currBitIndex ;
684: 	int !VAR_TEMP_temp195 ;
685: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp195 ;
686: 	!VAR_USER_currBitIndex !VAR_TEMP_temp195 = ;
687: 	int !VAR_USER_desiredBitIndex ;
688: 	int !VAR_TEMP_temp196 ;
689: 	!VAR_USER_index !VAR_USER_index * = !VAR_TEMP_temp196 ;
690: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp196 = ;
691: 	while ( true ) {
692: 		bool !VAR_TEMP_temp197 ;
693: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex > = !VAR_TEMP_temp197 ;
694: 		!VAR_TEMP_temp197 ! = !VAR_TEMP_temp198 ;
695: 		!VAR_TEMP_temp198 if {
696: 			break ;
697: 		}
698: 		int !VAR_TEMP_temp199 ;
699: 		!VAR_TEMP_temp199 1 = ;
700: 		!VAR_USER_currBitIndex !VAR_TEMP_temp199 -= ;
701: 		!FUNC_LIB_moveMemHeadLeft ;
702: 	}
703: 	while ( true ) {
704: 		bool !VAR_TEMP_temp200 ;
705: 		!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp200 ;
706: 		!VAR_TEMP_temp200 ! = !VAR_TEMP_temp201 ;
707: 		!VAR_TEMP_temp201 if {
708: 			break ;
709: 		}
710: 		int !VAR_TEMP_temp202 ;
711: 		!VAR_TEMP_temp202 1 = ;
712: 		!VAR_USER_currBitIndex !VAR_TEMP_temp202 += ;
713: 		!FUNC_LIB_moveMemHeadRight ;
714: 	}
715: 	int !VAR_USER_valIndex ;
716: 	int !VAR_TEMP_temp203 ;
717: 	!VAR_TEMP_temp203 0 = ;
718: 	!VAR_USER_valIndex !VAR_TEMP_temp203 = ;
719: 	bool !VAR_USER_shouldBeNegative ;
720: 	bool !VAR_TEMP_temp204 ;
721: 	!VAR_TEMP_temp204 false = ;
722: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp204 = ;
723: 	int !VAR_USER_pow2 ;
724: 	int !VAR_TEMP_temp205 ;
725: 	!VAR_TEMP_temp205 0 = ;
726: 	!VAR_USER_pow2 !VAR_TEMP_temp205 = ;
727: 	while ( true ) {
728: 		bool !VAR_TEMP_temp206 ;
729: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp206 ;
730: 		bool !VAR_TEMP_temp207 ;
731: 		!VAR_TEMP_temp206 ! = !VAR_TEMP_temp207 ;
732: 		!VAR_TEMP_temp207 ! = !VAR_TEMP_temp208 ;
733: 		!VAR_TEMP_temp208 if {
734: 			break ;
735: 		}
736: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp209 ;
737: 		!VAR_TEMP_temp209 if {
738: 			!FUNC_LIB_memBitIsOne if {
739: 				bool !VAR_TEMP_temp210 ;
740: 				!VAR_TEMP_temp210 true = ;
741: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp210 = ;
742: 			}
743: 		}
744: 		else {
745: 			!FUNC_LIB_memBitIsOne if {
746: 				!VAR_USER_ans !VAR_USER_pow2 += ;
747: 			}
748: 		}
749: 		int !VAR_TEMP_temp211 ;
750: 		!VAR_TEMP_temp211 1 = ;
751: 		!VAR_USER_valIndex !VAR_TEMP_temp211 += ;
752: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp212 ;
753: 		!VAR_TEMP_temp212 if {
754: 			int !VAR_TEMP_temp213 ;
755: 			!VAR_TEMP_temp213 1 = ;
756: 			!VAR_USER_pow2 !VAR_TEMP_temp213 = ;
757: 		}
758: 		else {
759: 			!VAR_USER_pow2 !VAR_USER_pow2 += ;
760: 		}
761: 		int !VAR_TEMP_temp214 ;
762: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp214 ;
763: 		int !VAR_TEMP_temp215 ;
764: 		!VAR_USER_index !VAR_USER_valIndex + = !VAR_TEMP_temp215 ;
765: 		int !VAR_TEMP_temp216 ;
766: 		!VAR_TEMP_temp214 !VAR_TEMP_temp215 * = !VAR_TEMP_temp216 ;
767: 		int !VAR_TEMP_temp217 ;
768: 		!VAR_TEMP_temp216 !VAR_USER_valIndex + = !VAR_TEMP_temp217 ;
769: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp217 = ;
770: 		while ( true ) {
771: 			bool !VAR_TEMP_temp218 ;
772: 			!VAR_USER_currBitIndex !VAR_USER_desiredBitIndex < = !VAR_TEMP_temp218 ;
773: 			!VAR_TEMP_temp218 ! = !VAR_TEMP_temp219 ;
774: 			!VAR_TEMP_temp219 if {
775: 				break ;
776: 			}
777: 			int !VAR_TEMP_temp220 ;
778: 			!VAR_TEMP_temp220 1 = ;
779: 			!VAR_USER_currBitIndex !VAR_TEMP_temp220 += ;
780: 			!FUNC_LIB_moveMemHeadRight ;
781: 		}
782: 	}
783: 	!VAR_USER_shouldBeNegative if {
784: 		int !VAR_TEMP_temp221 ;
785: 		!VAR_USER_ans u- = !VAR_TEMP_temp221 ;
786: 		!VAR_USER_ans !VAR_TEMP_temp221 = ;
787: 	}
788: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
789: 	!VAR_USER_ans return ;
790: }
791: void !FUNC_USER_what ( int !VAR_USER_x ) {
792: 	return ;
793: }
794: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
795: 	int !VAR_USER_temp ;
796: 	int !VAR_TEMP_temp222 ;
797: 	!VAR_USER_a !VAR_USER_b * = !VAR_TEMP_temp222 ;
798: 	int !VAR_TEMP_temp223 ;
799: 	!VAR_TEMP_temp222 !VAR_USER_c / = !VAR_TEMP_temp223 ;
800: 	!VAR_USER_temp !VAR_TEMP_temp223 = ;
801: 	int !VAR_USER_x ;
802: 	int !VAR_TEMP_temp224 ;
803: 	!VAR_TEMP_temp224 1 = ;
804: 	int !VAR_TEMP_temp225 ;
805: 	!VAR_TEMP_temp224 u- = !VAR_TEMP_temp225 ;
806: 	int !VAR_TEMP_temp226 ;
807: 	!VAR_USER_a !VAR_TEMP_temp225 - = !VAR_TEMP_temp226 ;
808: 	!VAR_USER_x !VAR_TEMP_temp226 = ;
809: 	!VAR_USER_temp return ;
810: }
811: int !FUNC_USER_main ( ) {
812: 	int !VAR_USER_x ;
813: 	int !VAR_TEMP_temp227 ;
814: 	!FUNC_LIB_nextInt = !VAR_TEMP_temp227 ;
815: 	!VAR_USER_x !VAR_TEMP_temp227 = ;
816: 	int !VAR_USER_y ;
817: 	int !VAR_TEMP_temp228 ;
818: 	!VAR_TEMP_temp228 1 = ;
819: 	int !VAR_TEMP_temp229 ;
820: 	!VAR_USER_x !VAR_TEMP_temp228 + = !VAR_TEMP_temp229 ;
821: 	!VAR_USER_y !VAR_TEMP_temp229 = ;
822: 	!VAR_USER_x !VAR_USER_y + = !VAR_TEMP_temp230 ;
823: 	!VAR_TEMP_temp230 return ;
824: }

After paramsToTemp, 
   0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
   1: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
   2: 	!VAR_TEMP_temp0 if {
   3: 		!VAR_USER_y return ;
   4: 	}
   5: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp1 ;
   6: 	!VAR_TEMP_temp1 if {
   7: 		!VAR_USER_x return ;
   8: 	}
   9: 	bool !VAR_TEMP_temp2 ;
  10: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp2 ;
  11: 	!VAR_TEMP_temp2 if {
  12: 		bool !VAR_TEMP_temp3 ;
  13: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp3 ;
  14: 		!VAR_TEMP_temp4 !VAR_TEMP_temp3 = ;
  15: 	}
  16: 	else {
  17: 		!VAR_TEMP_temp4 !VAR_TEMP_temp2 = ;
  18: 	}
  19: 	!VAR_TEMP_temp4 if {
  20: 		int !VAR_TEMP_temp5 ;
  21: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp5 ;
  22: 		int !VAR_TEMP_temp247 ;
  23: 		!VAR_TEMP_temp247 !VAR_USER_y = ;
  24: 		!VAR_TEMP_temp5 !VAR_TEMP_temp247 !FUNC_LIB_eq = !VAR_TEMP_temp6 ;
  25: 		!VAR_TEMP_temp6 if {
  26: 			int !VAR_TEMP_temp7 ;
  27: 			!VAR_TEMP_temp7 0 = ;
  28: 			!VAR_TEMP_temp7 return ;
  29: 		}
  30: 		else {
  31: 			int !VAR_TEMP_temp8 ;
  32: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp8 ;
  33: 			int !VAR_TEMP_temp248 ;
  34: 			!VAR_TEMP_temp248 !VAR_USER_y = ;
  35: 			!VAR_TEMP_temp8 !VAR_TEMP_temp248 !FUNC_LIB_lt = !VAR_TEMP_temp9 ;
  36: 			!VAR_TEMP_temp9 if {
  37: 				int !VAR_TEMP_temp10 ;
  38: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp10 ;
  39: 				!VAR_USER_y !VAR_TEMP_temp10 !FUNC_LIB_basic_sub = !VAR_TEMP_temp11 ;
  40: 				!VAR_TEMP_temp11 return ;
  41: 			}
  42: 			else {
  43: 				int !VAR_TEMP_temp12 ;
  44: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp12 ;
  45: 				int !VAR_TEMP_temp13 ;
  46: 				!VAR_USER_y !FUNC_LIB_basic_sub = !VAR_TEMP_temp13 ;
  47: 				!VAR_TEMP_temp12 !VAR_TEMP_temp13 !FUNC_LIB_neg = !VAR_TEMP_temp14 ;
  48: 				!VAR_TEMP_temp14 return ;
  49: 			}
  50: 		}
  51: 	}
  52: 	else {
  53: 		bool !VAR_TEMP_temp15 ;
  54: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp15 ;
  55: 		!VAR_TEMP_temp15 if {
  56: 			bool !VAR_TEMP_temp16 ;
  57: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp16 ;
  58: 			!VAR_TEMP_temp17 !VAR_TEMP_temp16 = ;
  59: 		}
  60: 		else {
  61: 			!VAR_TEMP_temp17 !VAR_TEMP_temp15 = ;
  62: 		}
  63: 		!VAR_TEMP_temp17 if {
  64: 			int !VAR_TEMP_temp18 ;
  65: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp18 ;
  66: 			int !VAR_TEMP_temp249 ;
  67: 			!VAR_TEMP_temp249 !VAR_USER_x = ;
  68: 			!VAR_TEMP_temp18 !VAR_TEMP_temp249 !FUNC_LIB_eq = !VAR_TEMP_temp19 ;
  69: 			!VAR_TEMP_temp19 if {
  70: 				int !VAR_TEMP_temp20 ;
  71: 				!VAR_TEMP_temp20 0 = ;
  72: 				!VAR_TEMP_temp20 return ;
  73: 			}
  74: 			else {
  75: 				int !VAR_TEMP_temp21 ;
  76: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp21 ;
  77: 				int !VAR_TEMP_temp250 ;
  78: 				!VAR_TEMP_temp250 !VAR_USER_x = ;
  79: 				!VAR_TEMP_temp21 !VAR_TEMP_temp250 !FUNC_LIB_lt = !VAR_TEMP_temp22 ;
  80: 				!VAR_TEMP_temp22 if {
  81: 					int !VAR_TEMP_temp23 ;
  82: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp23 ;
  83: 					!VAR_USER_x !VAR_TEMP_temp23 !FUNC_LIB_basic_sub = !VAR_TEMP_temp24 ;
  84: 					!VAR_TEMP_temp24 return ;
  85: 				}
  86: 				else {
  87: 					int !VAR_TEMP_temp25 ;
  88: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp25 ;
  89: 					int !VAR_TEMP_temp26 ;
  90: 					!VAR_USER_x !FUNC_LIB_basic_sub = !VAR_TEMP_temp26 ;
  91: 					!VAR_TEMP_temp25 !VAR_TEMP_temp26 !FUNC_LIB_neg = !VAR_TEMP_temp27 ;
  92: 					!VAR_TEMP_temp27 return ;
  93: 				}
  94: 			}
  95: 		}
  96: 		else {
  97: 			bool !VAR_TEMP_temp28 ;
  98: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp28 ;
  99: 			!VAR_TEMP_temp28 if {
 100: 				bool !VAR_TEMP_temp29 ;
 101: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp29 ;
 102: 				!VAR_TEMP_temp30 !VAR_TEMP_temp29 = ;
 103: 			}
 104: 			else {
 105: 				!VAR_TEMP_temp30 !VAR_TEMP_temp28 = ;
 106: 			}
 107: 			!VAR_TEMP_temp30 if {
 108: 				int !VAR_TEMP_temp31 ;
 109: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp31 ;
 110: 				int !VAR_TEMP_temp32 ;
 111: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp32 ;
 112: 				int !VAR_TEMP_temp33 ;
 113: 				!VAR_TEMP_temp32 !FUNC_LIB_basic_add = !VAR_TEMP_temp33 ;
 114: 				!VAR_TEMP_temp31 !VAR_TEMP_temp33 !FUNC_LIB_neg = !VAR_TEMP_temp34 ;
 115: 				!VAR_TEMP_temp34 return ;
 116: 			}
 117: 			else {
 118: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp35 ;
 119: 				!VAR_TEMP_temp35 return ;
 120: 			}
 121: 		}
 122: 	}
 123: }
 124: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
 125: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp36 ;
 126: 	!VAR_TEMP_temp36 if {
 127: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp37 ;
 128: 		!VAR_TEMP_temp37 return ;
 129: 	}
 130: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp38 ;
 131: 	!VAR_TEMP_temp38 if {
 132: 		!VAR_USER_x return ;
 133: 	}
 134: 	bool !VAR_TEMP_temp39 ;
 135: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp39 ;
 136: 	!VAR_TEMP_temp39 if {
 137: 		bool !VAR_TEMP_temp40 ;
 138: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp40 ;
 139: 		!VAR_TEMP_temp41 !VAR_TEMP_temp40 = ;
 140: 	}
 141: 	else {
 142: 		!VAR_TEMP_temp41 !VAR_TEMP_temp39 = ;
 143: 	}
 144: 	!VAR_TEMP_temp41 if {
 145: 		int !VAR_TEMP_temp42 ;
 146: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp42 ;
 147: 		int !VAR_TEMP_temp251 ;
 148: 		!VAR_TEMP_temp251 !VAR_USER_x = ;
 149: 		!VAR_TEMP_temp251 !VAR_TEMP_temp42 !FUNC_LIB_add = !VAR_TEMP_temp43 ;
 150: 		!VAR_TEMP_temp43 return ;
 151: 	}
 152: 	else {
 153: 		bool !VAR_TEMP_temp44 ;
 154: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp44 ;
 155: 		!VAR_TEMP_temp44 if {
 156: 			bool !VAR_TEMP_temp45 ;
 157: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp45 ;
 158: 			!VAR_TEMP_temp46 !VAR_TEMP_temp45 = ;
 159: 		}
 160: 		else {
 161: 			!VAR_TEMP_temp46 !VAR_TEMP_temp44 = ;
 162: 		}
 163: 		!VAR_TEMP_temp46 if {
 164: 			int !VAR_TEMP_temp47 ;
 165: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp47 ;
 166: 			int !VAR_TEMP_temp48 ;
 167: 			!VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp48 ;
 168: 			!VAR_TEMP_temp47 !VAR_TEMP_temp48 !FUNC_LIB_neg = !VAR_TEMP_temp49 ;
 169: 			!VAR_TEMP_temp49 return ;
 170: 		}
 171: 		else {
 172: 			bool !VAR_TEMP_temp50 ;
 173: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp50 ;
 174: 			!VAR_TEMP_temp50 if {
 175: 				bool !VAR_TEMP_temp51 ;
 176: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp51 ;
 177: 				!VAR_TEMP_temp52 !VAR_TEMP_temp51 = ;
 178: 			}
 179: 			else {
 180: 				!VAR_TEMP_temp52 !VAR_TEMP_temp50 = ;
 181: 			}
 182: 			!VAR_TEMP_temp52 if {
 183: 				int !VAR_TEMP_temp53 ;
 184: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp53 ;
 185: 				!VAR_USER_x !VAR_TEMP_temp53 !FUNC_LIB_basic_add = !VAR_TEMP_temp54 ;
 186: 				!VAR_TEMP_temp54 return ;
 187: 			}
 188: 			else {
 189: 				int !VAR_TEMP_temp55 ;
 190: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp55 ;
 191: 				int !VAR_TEMP_temp252 ;
 192: 				!VAR_TEMP_temp252 !VAR_USER_x = ;
 193: 				!VAR_TEMP_temp252 !VAR_TEMP_temp55 !FUNC_LIB_add = !VAR_TEMP_temp56 ;
 194: 				!VAR_TEMP_temp56 return ;
 195: 			}
 196: 		}
 197: 	}
 198: }
 199: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
 200: 	bool !VAR_TEMP_temp57 ;
 201: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp57 ;
 202: 	!VAR_TEMP_temp57 if {
 203: 		!VAR_TEMP_temp59 !VAR_TEMP_temp57 = ;
 204: 	}
 205: 	else {
 206: 		bool !VAR_TEMP_temp58 ;
 207: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp58 ;
 208: 		!VAR_TEMP_temp59 !VAR_TEMP_temp58 = ;
 209: 	}
 210: 	!VAR_TEMP_temp59 if {
 211: 		int !VAR_TEMP_temp60 ;
 212: 		!VAR_TEMP_temp60 0 = ;
 213: 		!VAR_TEMP_temp60 return ;
 214: 	}
 215: 	bool !VAR_USER_ansNeg ;
 216: 	bool !VAR_TEMP_temp61 ;
 217: 	!VAR_TEMP_temp61 false = ;
 218: 	!VAR_USER_ansNeg !VAR_TEMP_temp61 = ;
 219: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp62 ;
 220: 	!VAR_TEMP_temp62 if {
 221: 		int !VAR_TEMP_temp63 ;
 222: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp63 ;
 223: 		!VAR_USER_x !VAR_TEMP_temp63 = ;
 224: 		bool !VAR_TEMP_temp64 ;
 225: 		!VAR_TEMP_temp64 true = ;
 226: 		!VAR_USER_ansNeg !VAR_TEMP_temp64 = ;
 227: 	}
 228: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp65 ;
 229: 	!VAR_TEMP_temp65 if {
 230: 		int !VAR_TEMP_temp66 ;
 231: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp66 ;
 232: 		!VAR_USER_y !VAR_TEMP_temp66 = ;
 233: 		bool !VAR_TEMP_temp67 ;
 234: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp67 ;
 235: 		!VAR_USER_ansNeg !VAR_TEMP_temp67 = ;
 236: 	}
 237: 	int !VAR_USER_ans ;
 238: 	int !VAR_TEMP_temp68 ;
 239: 	!VAR_TEMP_temp68 0 = ;
 240: 	!VAR_USER_ans !VAR_TEMP_temp68 = ;
 241: 	int !VAR_USER_y0 ;
 242: 	!VAR_USER_y0 !VAR_USER_y = ;
 243: 	while ( true ) {
 244: 		int !VAR_TEMP_temp69 ;
 245: 		!VAR_TEMP_temp69 0 = ;
 246: 		bool !VAR_TEMP_temp70 ;
 247: 		int !VAR_TEMP_temp253 ;
 248: 		!VAR_TEMP_temp253 !VAR_USER_y0 = ;
 249: 		!VAR_TEMP_temp253 !VAR_TEMP_temp69 !FUNC_LIB_gt = !VAR_TEMP_temp70 ;
 250: 		!VAR_TEMP_temp70 ! = !VAR_TEMP_temp71 ;
 251: 		!VAR_TEMP_temp71 if {
 252: 			break ;
 253: 		}
 254: 		int !VAR_USER_y1 ;
 255: 		int !VAR_TEMP_temp72 ;
 256: 		!VAR_TEMP_temp72 1 = ;
 257: 		!VAR_USER_y1 !VAR_TEMP_temp72 = ;
 258: 		int !VAR_USER_y2 ;
 259: 		int !VAR_TEMP_temp73 ;
 260: 		!VAR_TEMP_temp73 2 = ;
 261: 		!VAR_USER_y2 !VAR_TEMP_temp73 = ;
 262: 		int !VAR_USER_val1 ;
 263: 		!VAR_USER_val1 !VAR_USER_x = ;
 264: 		int !VAR_USER_val2 ;
 265: 		int !VAR_TEMP_temp74 ;
 266: 		int !VAR_TEMP_temp254 ;
 267: 		!VAR_TEMP_temp254 !VAR_USER_x = ;
 268: 		int !VAR_TEMP_temp255 ;
 269: 		!VAR_TEMP_temp255 !VAR_USER_x = ;
 270: 		!VAR_TEMP_temp254 !VAR_TEMP_temp255 !FUNC_LIB_add = !VAR_TEMP_temp74 ;
 271: 		!VAR_USER_val2 !VAR_TEMP_temp74 = ;
 272: 		while ( true ) {
 273: 			bool !VAR_TEMP_temp75 ;
 274: 			int !VAR_TEMP_temp256 ;
 275: 			!VAR_TEMP_temp256 !VAR_USER_val2 = ;
 276: 			int !VAR_TEMP_temp257 ;
 277: 			!VAR_TEMP_temp257 !VAR_USER_y0 = ;
 278: 			!VAR_TEMP_temp256 !VAR_TEMP_temp257 !FUNC_LIB_leq = !VAR_TEMP_temp75 ;
 279: 			!VAR_TEMP_temp75 ! = !VAR_TEMP_temp76 ;
 280: 			!VAR_TEMP_temp76 if {
 281: 				break ;
 282: 			}
 283: 			!VAR_USER_y1 !VAR_USER_y2 = ;
 284: 			!VAR_USER_val1 !VAR_USER_val2 = ;
 285: 			int !VAR_TEMP_temp246 ;
 286: 			int !VAR_TEMP_temp258 ;
 287: 			!VAR_TEMP_temp258 !VAR_USER_y2 = ;
 288: 			int !VAR_TEMP_temp259 ;
 289: 			!VAR_TEMP_temp259 !VAR_USER_y2 = ;
 290: 			!VAR_TEMP_temp258 !VAR_TEMP_temp259 !FUNC_LIB_add = !VAR_TEMP_temp246 ;
 291: 			!VAR_USER_y2 !VAR_TEMP_temp246 = ;
 292: 			int !VAR_TEMP_temp245 ;
 293: 			int !VAR_TEMP_temp260 ;
 294: 			!VAR_TEMP_temp260 !VAR_USER_val2 = ;
 295: 			int !VAR_TEMP_temp261 ;
 296: 			!VAR_TEMP_temp261 !VAR_USER_val2 = ;
 297: 			!VAR_TEMP_temp260 !VAR_TEMP_temp261 !FUNC_LIB_add = !VAR_TEMP_temp245 ;
 298: 			!VAR_USER_val2 !VAR_TEMP_temp245 = ;
 299: 		}
 300: 		int !VAR_TEMP_temp244 ;
 301: 		int !VAR_TEMP_temp262 ;
 302: 		!VAR_TEMP_temp262 !VAR_USER_ans = ;
 303: 		int !VAR_TEMP_temp263 ;
 304: 		!VAR_TEMP_temp263 !VAR_USER_val1 = ;
 305: 		!VAR_TEMP_temp262 !VAR_TEMP_temp263 !FUNC_LIB_add = !VAR_TEMP_temp244 ;
 306: 		!VAR_USER_ans !VAR_TEMP_temp244 = ;
 307: 		int !VAR_TEMP_temp243 ;
 308: 		int !VAR_TEMP_temp264 ;
 309: 		!VAR_TEMP_temp264 !VAR_USER_y0 = ;
 310: 		int !VAR_TEMP_temp265 ;
 311: 		!VAR_TEMP_temp265 !VAR_USER_y1 = ;
 312: 		!VAR_TEMP_temp264 !VAR_TEMP_temp265 !FUNC_LIB_sub = !VAR_TEMP_temp243 ;
 313: 		!VAR_USER_y0 !VAR_TEMP_temp243 = ;
 314: 	}
 315: 	!VAR_USER_ansNeg if {
 316: 		int !VAR_TEMP_temp77 ;
 317: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp77 ;
 318: 		!VAR_USER_ans !VAR_TEMP_temp77 = ;
 319: 	}
 320: 	!VAR_USER_ans return ;
 321: }
 322: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
 323: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp78 ;
 324: 	!VAR_TEMP_temp78 if {
 325: 		int !VAR_TEMP_temp79 ;
 326: 		!VAR_TEMP_temp79 0 = ;
 327: 		!VAR_TEMP_temp79 return ;
 328: 	}
 329: 	int !VAR_TEMP_temp80 ;
 330: 	!VAR_TEMP_temp80 0 = ;
 331: 	int !VAR_TEMP_temp81 ;
 332: 	!VAR_TEMP_temp81 0 = ;
 333: 	bool !VAR_TEMP_temp82 ;
 334: 	int !VAR_TEMP_temp266 ;
 335: 	!VAR_TEMP_temp266 !VAR_USER_x = ;
 336: 	!VAR_TEMP_temp266 !VAR_TEMP_temp80 !FUNC_LIB_lt = !VAR_TEMP_temp82 ;
 337: 	!VAR_TEMP_temp82 if {
 338: 		bool !VAR_TEMP_temp83 ;
 339: 		int !VAR_TEMP_temp267 ;
 340: 		!VAR_TEMP_temp267 !VAR_USER_y = ;
 341: 		!VAR_TEMP_temp267 !VAR_TEMP_temp81 !FUNC_LIB_lt = !VAR_TEMP_temp83 ;
 342: 		!VAR_TEMP_temp84 !VAR_TEMP_temp83 = ;
 343: 	}
 344: 	else {
 345: 		!VAR_TEMP_temp84 !VAR_TEMP_temp82 = ;
 346: 	}
 347: 	!VAR_TEMP_temp84 if {
 348: 		int !VAR_TEMP_temp85 ;
 349: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp85 ;
 350: 		int !VAR_TEMP_temp86 ;
 351: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp86 ;
 352: 		!VAR_TEMP_temp85 !VAR_TEMP_temp86 !FUNC_LIB_div = !VAR_TEMP_temp87 ;
 353: 		!VAR_TEMP_temp87 return ;
 354: 	}
 355: 	int !VAR_TEMP_temp88 ;
 356: 	!VAR_TEMP_temp88 0 = ;
 357: 	int !VAR_TEMP_temp268 ;
 358: 	!VAR_TEMP_temp268 !VAR_USER_x = ;
 359: 	!VAR_TEMP_temp268 !VAR_TEMP_temp88 !FUNC_LIB_lt = !VAR_TEMP_temp89 ;
 360: 	!VAR_TEMP_temp89 if {
 361: 		int !VAR_TEMP_temp90 ;
 362: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp90 ;
 363: 		int !VAR_TEMP_temp91 ;
 364: 		int !VAR_TEMP_temp269 ;
 365: 		!VAR_TEMP_temp269 !VAR_USER_y = ;
 366: 		!VAR_TEMP_temp90 !VAR_TEMP_temp269 !FUNC_LIB_div = !VAR_TEMP_temp91 ;
 367: 		!VAR_TEMP_temp91 !FUNC_LIB_neg = !VAR_TEMP_temp92 ;
 368: 		!VAR_TEMP_temp92 return ;
 369: 	}
 370: 	int !VAR_TEMP_temp93 ;
 371: 	!VAR_TEMP_temp93 0 = ;
 372: 	int !VAR_TEMP_temp270 ;
 373: 	!VAR_TEMP_temp270 !VAR_USER_y = ;
 374: 	!VAR_TEMP_temp270 !VAR_TEMP_temp93 !FUNC_LIB_lt = !VAR_TEMP_temp94 ;
 375: 	!VAR_TEMP_temp94 if {
 376: 		int !VAR_TEMP_temp95 ;
 377: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp95 ;
 378: 		int !VAR_TEMP_temp96 ;
 379: 		int !VAR_TEMP_temp271 ;
 380: 		!VAR_TEMP_temp271 !VAR_USER_x = ;
 381: 		!VAR_TEMP_temp271 !VAR_TEMP_temp95 !FUNC_LIB_div = !VAR_TEMP_temp96 ;
 382: 		!VAR_TEMP_temp96 !FUNC_LIB_neg = !VAR_TEMP_temp97 ;
 383: 		!VAR_TEMP_temp97 return ;
 384: 	}
 385: 	int !VAR_USER_ans ;
 386: 	int !VAR_TEMP_temp98 ;
 387: 	!VAR_TEMP_temp98 0 = ;
 388: 	!VAR_USER_ans !VAR_TEMP_temp98 = ;
 389: 	int !VAR_USER_n ;
 390: 	!VAR_USER_n !VAR_USER_x = ;
 391: 	while ( true ) {
 392: 		bool !VAR_TEMP_temp99 ;
 393: 		int !VAR_TEMP_temp272 ;
 394: 		!VAR_TEMP_temp272 !VAR_USER_n = ;
 395: 		int !VAR_TEMP_temp273 ;
 396: 		!VAR_TEMP_temp273 !VAR_USER_y = ;
 397: 		!VAR_TEMP_temp272 !VAR_TEMP_temp273 !FUNC_LIB_geq = !VAR_TEMP_temp99 ;
 398: 		!VAR_TEMP_temp99 ! = !VAR_TEMP_temp100 ;
 399: 		!VAR_TEMP_temp100 if {
 400: 			break ;
 401: 		}
 402: 		int !VAR_USER_prevJump ;
 403: 		int !VAR_TEMP_temp101 ;
 404: 		!VAR_TEMP_temp101 0 = ;
 405: 		!VAR_USER_prevJump !VAR_TEMP_temp101 = ;
 406: 		int !VAR_USER_jump ;
 407: 		int !VAR_TEMP_temp102 ;
 408: 		!VAR_TEMP_temp102 1 = ;
 409: 		!VAR_USER_jump !VAR_TEMP_temp102 = ;
 410: 		while ( true ) {
 411: 			int !VAR_TEMP_temp103 ;
 412: 			int !VAR_TEMP_temp274 ;
 413: 			!VAR_TEMP_temp274 !VAR_USER_ans = ;
 414: 			int !VAR_TEMP_temp275 ;
 415: 			!VAR_TEMP_temp275 !VAR_USER_jump = ;
 416: 			!VAR_TEMP_temp274 !VAR_TEMP_temp275 !FUNC_LIB_add = !VAR_TEMP_temp103 ;
 417: 			int !VAR_TEMP_temp104 ;
 418: 			int !VAR_TEMP_temp276 ;
 419: 			!VAR_TEMP_temp276 !VAR_USER_y = ;
 420: 			!VAR_TEMP_temp276 !VAR_TEMP_temp103 !FUNC_LIB_mul = !VAR_TEMP_temp104 ;
 421: 			bool !VAR_TEMP_temp105 ;
 422: 			int !VAR_TEMP_temp277 ;
 423: 			!VAR_TEMP_temp277 !VAR_USER_x = ;
 424: 			!VAR_TEMP_temp104 !VAR_TEMP_temp277 !FUNC_LIB_leq = !VAR_TEMP_temp105 ;
 425: 			!VAR_TEMP_temp105 ! = !VAR_TEMP_temp106 ;
 426: 			!VAR_TEMP_temp106 if {
 427: 				break ;
 428: 			}
 429: 			!VAR_USER_prevJump !VAR_USER_jump = ;
 430: 			int !VAR_TEMP_temp242 ;
 431: 			int !VAR_TEMP_temp278 ;
 432: 			!VAR_TEMP_temp278 !VAR_USER_jump = ;
 433: 			int !VAR_TEMP_temp279 ;
 434: 			!VAR_TEMP_temp279 !VAR_USER_jump = ;
 435: 			!VAR_TEMP_temp278 !VAR_TEMP_temp279 !FUNC_LIB_add = !VAR_TEMP_temp242 ;
 436: 			!VAR_USER_jump !VAR_TEMP_temp242 = ;
 437: 		}
 438: 		int !VAR_TEMP_temp241 ;
 439: 		int !VAR_TEMP_temp280 ;
 440: 		!VAR_TEMP_temp280 !VAR_USER_ans = ;
 441: 		int !VAR_TEMP_temp281 ;
 442: 		!VAR_TEMP_temp281 !VAR_USER_prevJump = ;
 443: 		!VAR_TEMP_temp280 !VAR_TEMP_temp281 !FUNC_LIB_add = !VAR_TEMP_temp241 ;
 444: 		!VAR_USER_ans !VAR_TEMP_temp241 = ;
 445: 		int !VAR_TEMP_temp107 ;
 446: 		int !VAR_TEMP_temp282 ;
 447: 		!VAR_TEMP_temp282 !VAR_USER_y = ;
 448: 		int !VAR_TEMP_temp283 ;
 449: 		!VAR_TEMP_temp283 !VAR_USER_ans = ;
 450: 		!VAR_TEMP_temp282 !VAR_TEMP_temp283 !FUNC_LIB_mul = !VAR_TEMP_temp107 ;
 451: 		int !VAR_TEMP_temp108 ;
 452: 		int !VAR_TEMP_temp284 ;
 453: 		!VAR_TEMP_temp284 !VAR_USER_x = ;
 454: 		!VAR_TEMP_temp284 !VAR_TEMP_temp107 !FUNC_LIB_sub = !VAR_TEMP_temp108 ;
 455: 		!VAR_USER_n !VAR_TEMP_temp108 = ;
 456: 	}
 457: 	!VAR_USER_ans return ;
 458: }
 459: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
 460: 	int !VAR_USER_d ;
 461: 	int !VAR_TEMP_temp109 ;
 462: 	int !VAR_TEMP_temp285 ;
 463: 	!VAR_TEMP_temp285 !VAR_USER_x = ;
 464: 	int !VAR_TEMP_temp286 ;
 465: 	!VAR_TEMP_temp286 !VAR_USER_y = ;
 466: 	!VAR_TEMP_temp285 !VAR_TEMP_temp286 !FUNC_LIB_div = !VAR_TEMP_temp109 ;
 467: 	!VAR_USER_d !VAR_TEMP_temp109 = ;
 468: 	int !VAR_TEMP_temp110 ;
 469: 	int !VAR_TEMP_temp287 ;
 470: 	!VAR_TEMP_temp287 !VAR_USER_y = ;
 471: 	int !VAR_TEMP_temp288 ;
 472: 	!VAR_TEMP_temp288 !VAR_USER_d = ;
 473: 	!VAR_TEMP_temp287 !VAR_TEMP_temp288 !FUNC_LIB_mul = !VAR_TEMP_temp110 ;
 474: 	int !VAR_TEMP_temp289 ;
 475: 	!VAR_TEMP_temp289 !VAR_USER_x = ;
 476: 	!VAR_TEMP_temp289 !VAR_TEMP_temp110 !FUNC_LIB_sub = !VAR_TEMP_temp111 ;
 477: 	!VAR_TEMP_temp111 return ;
 478: }
 479: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
 480: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp112 ;
 481: 	!VAR_TEMP_temp112 if {
 482: 		int !VAR_TEMP_temp113 ;
 483: 		!VAR_TEMP_temp113 0 = ;
 484: 		!VAR_TEMP_temp113 return ;
 485: 	}
 486: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp114 ;
 487: 	!VAR_TEMP_temp114 return ;
 488: }
 489: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
 490: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp115 ;
 491: 	!VAR_TEMP_temp115 if {
 492: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp116 ;
 493: 		!VAR_TEMP_temp116 if {
 494: 			int !VAR_TEMP_temp117 ;
 495: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp117 ;
 496: 			int !VAR_TEMP_temp118 ;
 497: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp118 ;
 498: 			!VAR_TEMP_temp117 !VAR_TEMP_temp118 !FUNC_LIB_lt = !VAR_TEMP_temp119 ;
 499: 			!VAR_TEMP_temp119 return ;
 500: 		}
 501: 		else {
 502: 			bool !VAR_TEMP_temp120 ;
 503: 			!VAR_TEMP_temp120 true = ;
 504: 			!VAR_TEMP_temp120 return ;
 505: 		}
 506: 	}
 507: 	else {
 508: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp121 ;
 509: 		!VAR_TEMP_temp121 if {
 510: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp122 ;
 511: 			!VAR_TEMP_temp122 if {
 512: 				bool !VAR_TEMP_temp123 ;
 513: 				!VAR_TEMP_temp123 false = ;
 514: 				!VAR_TEMP_temp123 return ;
 515: 			}
 516: 			else {
 517: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp124 ;
 518: 				!VAR_TEMP_temp124 if {
 519: 					bool !VAR_TEMP_temp125 ;
 520: 					!VAR_TEMP_temp125 false = ;
 521: 					!VAR_TEMP_temp125 return ;
 522: 				}
 523: 				else {
 524: 					bool !VAR_TEMP_temp126 ;
 525: 					!VAR_TEMP_temp126 true = ;
 526: 					!VAR_TEMP_temp126 return ;
 527: 				}
 528: 			}
 529: 		}
 530: 		else {
 531: 			bool !VAR_TEMP_temp127 ;
 532: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp127 ;
 533: 			!VAR_TEMP_temp127 if {
 534: 				!VAR_TEMP_temp129 !VAR_TEMP_temp127 = ;
 535: 			}
 536: 			else {
 537: 				bool !VAR_TEMP_temp128 ;
 538: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp128 ;
 539: 				!VAR_TEMP_temp129 !VAR_TEMP_temp128 = ;
 540: 			}
 541: 			!VAR_TEMP_temp129 if {
 542: 				bool !VAR_TEMP_temp130 ;
 543: 				!VAR_TEMP_temp130 false = ;
 544: 				!VAR_TEMP_temp130 return ;
 545: 			}
 546: 			else {
 547: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp131 ;
 548: 				!VAR_TEMP_temp131 return ;
 549: 			}
 550: 		}
 551: 	}
 552: }
 553: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
 554: 	bool !VAR_TEMP_temp132 ;
 555: 	int !VAR_TEMP_temp290 ;
 556: 	!VAR_TEMP_temp290 !VAR_USER_x = ;
 557: 	int !VAR_TEMP_temp291 ;
 558: 	!VAR_TEMP_temp291 !VAR_USER_y = ;
 559: 	!VAR_TEMP_temp290 !VAR_TEMP_temp291 !FUNC_LIB_eq = !VAR_TEMP_temp132 ;
 560: 	!VAR_TEMP_temp132 if {
 561: 		!VAR_TEMP_temp134 !VAR_TEMP_temp132 = ;
 562: 	}
 563: 	else {
 564: 		bool !VAR_TEMP_temp133 ;
 565: 		int !VAR_TEMP_temp292 ;
 566: 		!VAR_TEMP_temp292 !VAR_USER_x = ;
 567: 		int !VAR_TEMP_temp293 ;
 568: 		!VAR_TEMP_temp293 !VAR_USER_y = ;
 569: 		!VAR_TEMP_temp292 !VAR_TEMP_temp293 !FUNC_LIB_lt = !VAR_TEMP_temp133 ;
 570: 		!VAR_TEMP_temp134 !VAR_TEMP_temp133 = ;
 571: 	}
 572: 	!VAR_TEMP_temp134 return ;
 573: }
 574: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
 575: 	bool !VAR_TEMP_temp135 ;
 576: 	int !VAR_TEMP_temp294 ;
 577: 	!VAR_TEMP_temp294 !VAR_USER_x = ;
 578: 	int !VAR_TEMP_temp295 ;
 579: 	!VAR_TEMP_temp295 !VAR_USER_y = ;
 580: 	!VAR_TEMP_temp294 !VAR_TEMP_temp295 !FUNC_LIB_leq = !VAR_TEMP_temp135 ;
 581: 	!VAR_TEMP_temp135 ! = !VAR_TEMP_temp136 ;
 582: 	!VAR_TEMP_temp136 return ;
 583: }
 584: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
 585: 	bool !VAR_TEMP_temp137 ;
 586: 	int !VAR_TEMP_temp296 ;
 587: 	!VAR_TEMP_temp296 !VAR_USER_x = ;
 588: 	int !VAR_TEMP_temp297 ;
 589: 	!VAR_TEMP_temp297 !VAR_USER_y = ;
 590: 	!VAR_TEMP_temp296 !VAR_TEMP_temp297 !FUNC_LIB_lt = !VAR_TEMP_temp137 ;
 591: 	!VAR_TEMP_temp137 ! = !VAR_TEMP_temp138 ;
 592: 	!VAR_TEMP_temp138 return ;
 593: }
 594: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
 595: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp139 ;
 596: 	!VAR_TEMP_temp139 if {
 597: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp140 ;
 598: 		!VAR_TEMP_temp140 if {
 599: 			bool !VAR_TEMP_temp141 ;
 600: 			!VAR_TEMP_temp141 true = ;
 601: 			!VAR_TEMP_temp141 return ;
 602: 		}
 603: 		bool !VAR_TEMP_temp142 ;
 604: 		!VAR_TEMP_temp142 false = ;
 605: 		!VAR_TEMP_temp142 return ;
 606: 	}
 607: 	else {
 608: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp143 ;
 609: 		!VAR_TEMP_temp143 if {
 610: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp144 ;
 611: 			!VAR_TEMP_temp144 if {
 612: 				int !VAR_TEMP_temp145 ;
 613: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp145 ;
 614: 				int !VAR_TEMP_temp146 ;
 615: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp146 ;
 616: 				!VAR_TEMP_temp145 !VAR_TEMP_temp146 !FUNC_LIB_basic_eq = !VAR_TEMP_temp147 ;
 617: 				!VAR_TEMP_temp147 return ;
 618: 			}
 619: 			bool !VAR_TEMP_temp148 ;
 620: 			!VAR_TEMP_temp148 false = ;
 621: 			!VAR_TEMP_temp148 return ;
 622: 		}
 623: 		else {
 624: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp149 ;
 625: 			!VAR_TEMP_temp149 if {
 626: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp150 ;
 627: 				!VAR_TEMP_temp150 return ;
 628: 			}
 629: 			bool !VAR_TEMP_temp151 ;
 630: 			!VAR_TEMP_temp151 false = ;
 631: 			!VAR_TEMP_temp151 return ;
 632: 		}
 633: 	}
 634: }
 635: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
 636: 	bool !VAR_TEMP_temp152 ;
 637: 	int !VAR_TEMP_temp298 ;
 638: 	!VAR_TEMP_temp298 !VAR_USER_x = ;
 639: 	int !VAR_TEMP_temp299 ;
 640: 	!VAR_TEMP_temp299 !VAR_USER_y = ;
 641: 	!VAR_TEMP_temp298 !VAR_TEMP_temp299 !FUNC_LIB_eq = !VAR_TEMP_temp152 ;
 642: 	!VAR_TEMP_temp152 ! = !VAR_TEMP_temp153 ;
 643: 	!VAR_TEMP_temp153 return ;
 644: }
 645: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
 646: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp154 ;
 647: 	!VAR_TEMP_temp154 if {
 648: 		!VAR_USER_y return ;
 649: 	}
 650: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp155 ;
 651: 	!VAR_TEMP_temp155 if {
 652: 		!VAR_USER_x return ;
 653: 	}
 654: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp156 ;
 655: 	!VAR_TEMP_temp156 return ;
 656: }
 657: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
 658: 	int !VAR_USER_currBitIndex ;
 659: 	int !VAR_TEMP_temp157 ;
 660: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp157 ;
 661: 	!VAR_USER_currBitIndex !VAR_TEMP_temp157 = ;
 662: 	bool !VAR_USER_handledSign ;
 663: 	bool !VAR_TEMP_temp158 ;
 664: 	!VAR_TEMP_temp158 false = ;
 665: 	!VAR_USER_handledSign !VAR_TEMP_temp158 = ;
 666: 	int !VAR_USER_valIndex ;
 667: 	int !VAR_TEMP_temp159 ;
 668: 	!VAR_TEMP_temp159 0 = ;
 669: 	!VAR_USER_valIndex !VAR_TEMP_temp159 = ;
 670: 	int !VAR_USER_V ;
 671: 	!VAR_USER_V !VAR_USER_val = ;
 672: 	while ( true ) {
 673: 		bool !VAR_TEMP_temp160 ;
 674: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp160 ;
 675: 		bool !VAR_TEMP_temp161 ;
 676: 		!VAR_TEMP_temp160 ! = !VAR_TEMP_temp161 ;
 677: 		!VAR_TEMP_temp161 if {
 678: 			!VAR_TEMP_temp163 !VAR_TEMP_temp161 = ;
 679: 		}
 680: 		else {
 681: 			bool !VAR_TEMP_temp162 ;
 682: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp162 ;
 683: 			bool !VAR_TEMP_temp163 ;
 684: 			!VAR_TEMP_temp163 !VAR_TEMP_temp162 = ;
 685: 		}
 686: 		!VAR_TEMP_temp163 ! = !VAR_TEMP_temp164 ;
 687: 		!VAR_TEMP_temp164 if {
 688: 			break ;
 689: 		}
 690: 		int !VAR_USER_desiredBitIndex ;
 691: 		int !VAR_TEMP_temp165 ;
 692: 		!VAR_TEMP_temp300 ;
 693: 		!VAR_TEMP_temp300 !VAR_USER_index = ;
 694: 		int !VAR_TEMP_temp301 ;
 695: 		!VAR_TEMP_temp301 !VAR_USER_valIndex = ;
 696: 		!VAR_TEMP_temp300 !VAR_TEMP_temp301 !FUNC_LIB_add = !VAR_TEMP_temp165 ;
 697: 		int !VAR_TEMP_temp166 ;
 698: 		!VAR_TEMP_temp302 ;
 699: 		!VAR_TEMP_temp302 !VAR_USER_index = ;
 700: 		int !VAR_TEMP_temp303 ;
 701: 		!VAR_TEMP_temp303 !VAR_USER_valIndex = ;
 702: 		!VAR_TEMP_temp302 !VAR_TEMP_temp303 !FUNC_LIB_add = !VAR_TEMP_temp166 ;
 703: 		int !VAR_TEMP_temp167 ;
 704: 		!VAR_TEMP_temp165 !VAR_TEMP_temp166 !FUNC_LIB_mul = !VAR_TEMP_temp167 ;
 705: 		int !VAR_TEMP_temp168 ;
 706: 		int !VAR_TEMP_temp304 ;
 707: 		!VAR_TEMP_temp304 !VAR_USER_valIndex = ;
 708: 		!VAR_TEMP_temp167 !VAR_TEMP_temp304 !FUNC_LIB_add = !VAR_TEMP_temp168 ;
 709: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp168 = ;
 710: 		while ( true ) {
 711: 			bool !VAR_TEMP_temp169 ;
 712: 			int !VAR_TEMP_temp305 ;
 713: 			!VAR_TEMP_temp305 !VAR_USER_currBitIndex = ;
 714: 			int !VAR_TEMP_temp306 ;
 715: 			!VAR_TEMP_temp306 !VAR_USER_desiredBitIndex = ;
 716: 			!VAR_TEMP_temp305 !VAR_TEMP_temp306 !FUNC_LIB_gt = !VAR_TEMP_temp169 ;
 717: 			!VAR_TEMP_temp169 ! = !VAR_TEMP_temp170 ;
 718: 			!VAR_TEMP_temp170 if {
 719: 				break ;
 720: 			}
 721: 			int !VAR_TEMP_temp171 ;
 722: 			!VAR_TEMP_temp171 1 = ;
 723: 			int !VAR_TEMP_temp240 ;
 724: 			int !VAR_TEMP_temp307 ;
 725: 			!VAR_TEMP_temp307 !VAR_USER_currBitIndex = ;
 726: 			!VAR_TEMP_temp307 !VAR_TEMP_temp171 !FUNC_LIB_sub = !VAR_TEMP_temp240 ;
 727: 			!VAR_USER_currBitIndex !VAR_TEMP_temp240 = ;
 728: 			!FUNC_LIB_moveMemHeadLeft ;
 729: 		}
 730: 		while ( true ) {
 731: 			bool !VAR_TEMP_temp172 ;
 732: 			int !VAR_TEMP_temp308 ;
 733: 			!VAR_TEMP_temp308 !VAR_USER_currBitIndex = ;
 734: 			int !VAR_TEMP_temp309 ;
 735: 			!VAR_TEMP_temp309 !VAR_USER_desiredBitIndex = ;
 736: 			!VAR_TEMP_temp308 !VAR_TEMP_temp309 !FUNC_LIB_lt = !VAR_TEMP_temp172 ;
 737: 			!VAR_TEMP_temp172 ! = !VAR_TEMP_temp173 ;
 738: 			!VAR_TEMP_temp173 if {
 739: 				break ;
 740: 			}
 741: 			int !VAR_TEMP_temp174 ;
 742: 			!VAR_TEMP_temp174 1 = ;
 743: 			int !VAR_TEMP_temp239 ;
 744: 			int !VAR_TEMP_temp310 ;
 745: 			!VAR_TEMP_temp310 !VAR_USER_currBitIndex = ;
 746: 			!VAR_TEMP_temp310 !VAR_TEMP_temp174 !FUNC_LIB_add = !VAR_TEMP_temp239 ;
 747: 			!VAR_USER_currBitIndex !VAR_TEMP_temp239 = ;
 748: 			!FUNC_LIB_moveMemHeadRight ;
 749: 		}
 750: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp175 ;
 751: 		!VAR_TEMP_temp175 if {
 752: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp176 ;
 753: 			!VAR_TEMP_temp176 if {
 754: 				!FUNC_LIB_setMemBitOne ;
 755: 				int !VAR_TEMP_temp177 ;
 756: 				!VAR_USER_V !FUNC_LIB_neg = !VAR_TEMP_temp177 ;
 757: 				!VAR_USER_V !VAR_TEMP_temp177 = ;
 758: 			}
 759: 			else {
 760: 				!FUNC_LIB_setMemBitZero ;
 761: 			}
 762: 			bool !VAR_TEMP_temp178 ;
 763: 			!VAR_TEMP_temp178 true = ;
 764: 			!VAR_USER_handledSign !VAR_TEMP_temp178 = ;
 765: 		}
 766: 		else {
 767: 			int !VAR_USER_V2 ;
 768: 			int !VAR_TEMP_temp179 ;
 769: 			!VAR_TEMP_temp179 2 = ;
 770: 			int !VAR_TEMP_temp180 ;
 771: 			int !VAR_TEMP_temp311 ;
 772: 			!VAR_TEMP_temp311 !VAR_USER_V = ;
 773: 			!VAR_TEMP_temp311 !VAR_TEMP_temp179 !FUNC_LIB_div = !VAR_TEMP_temp180 ;
 774: 			!VAR_USER_V2 !VAR_TEMP_temp180 = ;
 775: 			int !VAR_USER_bit ;
 776: 			int !VAR_TEMP_temp181 ;
 777: 			!VAR_TEMP_temp181 2 = ;
 778: 			int !VAR_TEMP_temp182 ;
 779: 			int !VAR_TEMP_temp312 ;
 780: 			!VAR_TEMP_temp312 !VAR_USER_V2 = ;
 781: 			!VAR_TEMP_temp181 !VAR_TEMP_temp312 !FUNC_LIB_mul = !VAR_TEMP_temp182 ;
 782: 			int !VAR_TEMP_temp183 ;
 783: 			int !VAR_TEMP_temp313 ;
 784: 			!VAR_TEMP_temp313 !VAR_USER_V = ;
 785: 			!VAR_TEMP_temp313 !VAR_TEMP_temp182 !FUNC_LIB_sub = !VAR_TEMP_temp183 ;
 786: 			!VAR_USER_bit !VAR_TEMP_temp183 = ;
 787: 			int !VAR_TEMP_temp184 ;
 788: 			!VAR_TEMP_temp184 1 = ;
 789: 			int !VAR_TEMP_temp314 ;
 790: 			!VAR_TEMP_temp314 !VAR_USER_bit = ;
 791: 			!VAR_TEMP_temp314 !VAR_TEMP_temp184 !FUNC_LIB_eq = !VAR_TEMP_temp185 ;
 792: 			!VAR_TEMP_temp185 if {
 793: 				!FUNC_LIB_setMemBitOne ;
 794: 			}
 795: 			else {
 796: 				!FUNC_LIB_setMemBitZero ;
 797: 			}
 798: 			!VAR_USER_V !VAR_USER_V2 = ;
 799: 		}
 800: 		int !VAR_TEMP_temp186 ;
 801: 		!VAR_TEMP_temp186 1 = ;
 802: 		int !VAR_TEMP_temp238 ;
 803: 		int !VAR_TEMP_temp315 ;
 804: 		!VAR_TEMP_temp315 !VAR_USER_valIndex = ;
 805: 		!VAR_TEMP_temp315 !VAR_TEMP_temp186 !FUNC_LIB_add = !VAR_TEMP_temp238 ;
 806: 		!VAR_USER_valIndex !VAR_TEMP_temp238 = ;
 807: 	}
 808: 	int !VAR_USER_desiredBitIndex ;
 809: 	int !VAR_TEMP_temp187 ;
 810: 	!VAR_TEMP_temp316 ;
 811: 	!VAR_TEMP_temp316 !VAR_USER_index = ;
 812: 	int !VAR_TEMP_temp317 ;
 813: 	!VAR_TEMP_temp317 !VAR_USER_valIndex = ;
 814: 	!VAR_TEMP_temp316 !VAR_TEMP_temp317 !FUNC_LIB_add = !VAR_TEMP_temp187 ;
 815: 	int !VAR_TEMP_temp188 ;
 816: 	!VAR_TEMP_temp318 ;
 817: 	!VAR_TEMP_temp318 !VAR_USER_index = ;
 818: 	int !VAR_TEMP_temp319 ;
 819: 	!VAR_TEMP_temp319 !VAR_USER_valIndex = ;
 820: 	!VAR_TEMP_temp318 !VAR_TEMP_temp319 !FUNC_LIB_add = !VAR_TEMP_temp188 ;
 821: 	int !VAR_TEMP_temp189 ;
 822: 	!VAR_TEMP_temp187 !VAR_TEMP_temp188 !FUNC_LIB_mul = !VAR_TEMP_temp189 ;
 823: 	int !VAR_TEMP_temp190 ;
 824: 	int !VAR_TEMP_temp320 ;
 825: 	!VAR_TEMP_temp320 !VAR_USER_valIndex = ;
 826: 	!VAR_TEMP_temp189 !VAR_TEMP_temp320 !FUNC_LIB_add = !VAR_TEMP_temp190 ;
 827: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp190 = ;
 828: 	while ( true ) {
 829: 		bool !VAR_TEMP_temp191 ;
 830: 		int !VAR_TEMP_temp321 ;
 831: 		!VAR_TEMP_temp321 !VAR_USER_currBitIndex = ;
 832: 		int !VAR_TEMP_temp322 ;
 833: 		!VAR_TEMP_temp322 !VAR_USER_desiredBitIndex = ;
 834: 		!VAR_TEMP_temp321 !VAR_TEMP_temp322 !FUNC_LIB_lt = !VAR_TEMP_temp191 ;
 835: 		!VAR_TEMP_temp191 ! = !VAR_TEMP_temp192 ;
 836: 		!VAR_TEMP_temp192 if {
 837: 			break ;
 838: 		}
 839: 		int !VAR_TEMP_temp193 ;
 840: 		!VAR_TEMP_temp193 1 = ;
 841: 		int !VAR_TEMP_temp237 ;
 842: 		int !VAR_TEMP_temp323 ;
 843: 		!VAR_TEMP_temp323 !VAR_USER_currBitIndex = ;
 844: 		!VAR_TEMP_temp323 !VAR_TEMP_temp193 !FUNC_LIB_add = !VAR_TEMP_temp237 ;
 845: 		!VAR_USER_currBitIndex !VAR_TEMP_temp237 = ;
 846: 		!FUNC_LIB_moveMemHeadRight ;
 847: 	}
 848: 	!FUNC_LIB_setMemBitBlank ;
 849: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
 850: 	return ;
 851: }
 852: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
 853: 	int !VAR_USER_ans ;
 854: 	int !VAR_TEMP_temp194 ;
 855: 	!VAR_TEMP_temp194 0 = ;
 856: 	!VAR_USER_ans !VAR_TEMP_temp194 = ;
 857: 	int !VAR_USER_currBitIndex ;
 858: 	int !VAR_TEMP_temp195 ;
 859: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp195 ;
 860: 	!VAR_USER_currBitIndex !VAR_TEMP_temp195 = ;
 861: 	int !VAR_USER_desiredBitIndex ;
 862: 	int !VAR_TEMP_temp196 ;
 863: 	int !VAR_TEMP_temp324 ;
 864: 	!VAR_TEMP_temp324 !VAR_USER_index = ;
 865: 	int !VAR_TEMP_temp325 ;
 866: 	!VAR_TEMP_temp325 !VAR_USER_index = ;
 867: 	!VAR_TEMP_temp324 !VAR_TEMP_temp325 !FUNC_LIB_mul = !VAR_TEMP_temp196 ;
 868: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp196 = ;
 869: 	while ( true ) {
 870: 		bool !VAR_TEMP_temp197 ;
 871: 		int !VAR_TEMP_temp326 ;
 872: 		!VAR_TEMP_temp326 !VAR_USER_currBitIndex = ;
 873: 		int !VAR_TEMP_temp327 ;
 874: 		!VAR_TEMP_temp327 !VAR_USER_desiredBitIndex = ;
 875: 		!VAR_TEMP_temp326 !VAR_TEMP_temp327 !FUNC_LIB_gt = !VAR_TEMP_temp197 ;
 876: 		!VAR_TEMP_temp197 ! = !VAR_TEMP_temp198 ;
 877: 		!VAR_TEMP_temp198 if {
 878: 			break ;
 879: 		}
 880: 		int !VAR_TEMP_temp199 ;
 881: 		!VAR_TEMP_temp199 1 = ;
 882: 		int !VAR_TEMP_temp236 ;
 883: 		int !VAR_TEMP_temp328 ;
 884: 		!VAR_TEMP_temp328 !VAR_USER_currBitIndex = ;
 885: 		!VAR_TEMP_temp328 !VAR_TEMP_temp199 !FUNC_LIB_sub = !VAR_TEMP_temp236 ;
 886: 		!VAR_USER_currBitIndex !VAR_TEMP_temp236 = ;
 887: 		!FUNC_LIB_moveMemHeadLeft ;
 888: 	}
 889: 	while ( true ) {
 890: 		bool !VAR_TEMP_temp200 ;
 891: 		int !VAR_TEMP_temp329 ;
 892: 		!VAR_TEMP_temp329 !VAR_USER_currBitIndex = ;
 893: 		int !VAR_TEMP_temp330 ;
 894: 		!VAR_TEMP_temp330 !VAR_USER_desiredBitIndex = ;
 895: 		!VAR_TEMP_temp329 !VAR_TEMP_temp330 !FUNC_LIB_lt = !VAR_TEMP_temp200 ;
 896: 		!VAR_TEMP_temp200 ! = !VAR_TEMP_temp201 ;
 897: 		!VAR_TEMP_temp201 if {
 898: 			break ;
 899: 		}
 900: 		int !VAR_TEMP_temp202 ;
 901: 		!VAR_TEMP_temp202 1 = ;
 902: 		int !VAR_TEMP_temp235 ;
 903: 		int !VAR_TEMP_temp331 ;
 904: 		!VAR_TEMP_temp331 !VAR_USER_currBitIndex = ;
 905: 		!VAR_TEMP_temp331 !VAR_TEMP_temp202 !FUNC_LIB_add = !VAR_TEMP_temp235 ;
 906: 		!VAR_USER_currBitIndex !VAR_TEMP_temp235 = ;
 907: 		!FUNC_LIB_moveMemHeadRight ;
 908: 	}
 909: 	int !VAR_USER_valIndex ;
 910: 	int !VAR_TEMP_temp203 ;
 911: 	!VAR_TEMP_temp203 0 = ;
 912: 	!VAR_USER_valIndex !VAR_TEMP_temp203 = ;
 913: 	bool !VAR_USER_shouldBeNegative ;
 914: 	bool !VAR_TEMP_temp204 ;
 915: 	!VAR_TEMP_temp204 false = ;
 916: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp204 = ;
 917: 	int !VAR_USER_pow2 ;
 918: 	int !VAR_TEMP_temp205 ;
 919: 	!VAR_TEMP_temp205 0 = ;
 920: 	!VAR_USER_pow2 !VAR_TEMP_temp205 = ;
 921: 	while ( true ) {
 922: 		bool !VAR_TEMP_temp206 ;
 923: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp206 ;
 924: 		bool !VAR_TEMP_temp207 ;
 925: 		!VAR_TEMP_temp206 ! = !VAR_TEMP_temp207 ;
 926: 		!VAR_TEMP_temp207 ! = !VAR_TEMP_temp208 ;
 927: 		!VAR_TEMP_temp208 if {
 928: 			break ;
 929: 		}
 930: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp209 ;
 931: 		!VAR_TEMP_temp209 if {
 932: 			!FUNC_LIB_memBitIsOne if {
 933: 				bool !VAR_TEMP_temp210 ;
 934: 				!VAR_TEMP_temp210 true = ;
 935: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp210 = ;
 936: 			}
 937: 		}
 938: 		else {
 939: 			!FUNC_LIB_memBitIsOne if {
 940: 				int !VAR_TEMP_temp234 ;
 941: 				int !VAR_TEMP_temp332 ;
 942: 				!VAR_TEMP_temp332 !VAR_USER_ans = ;
 943: 				int !VAR_TEMP_temp333 ;
 944: 				!VAR_TEMP_temp333 !VAR_USER_pow2 = ;
 945: 				!VAR_TEMP_temp332 !VAR_TEMP_temp333 !FUNC_LIB_add = !VAR_TEMP_temp234 ;
 946: 				!VAR_USER_ans !VAR_TEMP_temp234 = ;
 947: 			}
 948: 		}
 949: 		int !VAR_TEMP_temp211 ;
 950: 		!VAR_TEMP_temp211 1 = ;
 951: 		int !VAR_TEMP_temp233 ;
 952: 		int !VAR_TEMP_temp334 ;
 953: 		!VAR_TEMP_temp334 !VAR_USER_valIndex = ;
 954: 		!VAR_TEMP_temp334 !VAR_TEMP_temp211 !FUNC_LIB_add = !VAR_TEMP_temp233 ;
 955: 		!VAR_USER_valIndex !VAR_TEMP_temp233 = ;
 956: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp212 ;
 957: 		!VAR_TEMP_temp212 if {
 958: 			int !VAR_TEMP_temp213 ;
 959: 			!VAR_TEMP_temp213 1 = ;
 960: 			!VAR_USER_pow2 !VAR_TEMP_temp213 = ;
 961: 		}
 962: 		else {
 963: 			int !VAR_TEMP_temp232 ;
 964: 			int !VAR_TEMP_temp335 ;
 965: 			!VAR_TEMP_temp335 !VAR_USER_pow2 = ;
 966: 			int !VAR_TEMP_temp336 ;
 967: 			!VAR_TEMP_temp336 !VAR_USER_pow2 = ;
 968: 			!VAR_TEMP_temp335 !VAR_TEMP_temp336 !FUNC_LIB_add = !VAR_TEMP_temp232 ;
 969: 			!VAR_USER_pow2 !VAR_TEMP_temp232 = ;
 970: 		}
 971: 		int !VAR_TEMP_temp214 ;
 972: 		int !VAR_TEMP_temp337 ;
 973: 		!VAR_TEMP_temp337 !VAR_USER_index = ;
 974: 		int !VAR_TEMP_temp338 ;
 975: 		!VAR_TEMP_temp338 !VAR_USER_valIndex = ;
 976: 		!VAR_TEMP_temp337 !VAR_TEMP_temp338 !FUNC_LIB_add = !VAR_TEMP_temp214 ;
 977: 		int !VAR_TEMP_temp215 ;
 978: 		int !VAR_TEMP_temp339 ;
 979: 		!VAR_TEMP_temp339 !VAR_USER_index = ;
 980: 		int !VAR_TEMP_temp340 ;
 981: 		!VAR_TEMP_temp340 !VAR_USER_valIndex = ;
 982: 		!VAR_TEMP_temp339 !VAR_TEMP_temp340 !FUNC_LIB_add = !VAR_TEMP_temp215 ;
 983: 		int !VAR_TEMP_temp216 ;
 984: 		!VAR_TEMP_temp214 !VAR_TEMP_temp215 !FUNC_LIB_mul = !VAR_TEMP_temp216 ;
 985: 		int !VAR_TEMP_temp217 ;
 986: 		int !VAR_TEMP_temp341 ;
 987: 		!VAR_TEMP_temp341 !VAR_USER_valIndex = ;
 988: 		!VAR_TEMP_temp216 !VAR_TEMP_temp341 !FUNC_LIB_add = !VAR_TEMP_temp217 ;
 989: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp217 = ;
 990: 		while ( true ) {
 991: 			bool !VAR_TEMP_temp218 ;
 992: 			int !VAR_TEMP_temp342 ;
 993: 			!VAR_TEMP_temp342 !VAR_USER_currBitIndex = ;
 994: 			int !VAR_TEMP_temp343 ;
 995: 			!VAR_TEMP_temp343 !VAR_USER_desiredBitIndex = ;
 996: 			!VAR_TEMP_temp342 !VAR_TEMP_temp343 !FUNC_LIB_lt = !VAR_TEMP_temp218 ;
 997: 			!VAR_TEMP_temp218 ! = !VAR_TEMP_temp219 ;
 998: 			!VAR_TEMP_temp219 if {
 999: 				break ;
1000: 			}
1001: 			int !VAR_TEMP_temp220 ;
1002: 			!VAR_TEMP_temp220 1 = ;
1003: 			int !VAR_TEMP_temp231 ;
1004: 			int !VAR_TEMP_temp344 ;
1005: 			!VAR_TEMP_temp344 !VAR_USER_currBitIndex = ;
1006: 			!VAR_TEMP_temp344 !VAR_TEMP_temp220 !FUNC_LIB_add = !VAR_TEMP_temp231 ;
1007: 			!VAR_USER_currBitIndex !VAR_TEMP_temp231 = ;
1008: 			!FUNC_LIB_moveMemHeadRight ;
1009: 		}
1010: 	}
1011: 	!VAR_USER_shouldBeNegative if {
1012: 		int !VAR_TEMP_temp221 ;
1013: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp221 ;
1014: 		!VAR_USER_ans !VAR_TEMP_temp221 = ;
1015: 	}
1016: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
1017: 	!VAR_USER_ans return ;
1018: }
1019: void !FUNC_USER_what ( int !VAR_USER_x ) {
1020: 	return ;
1021: }
1022: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
1023: 	int !VAR_USER_temp ;
1024: 	int !VAR_TEMP_temp222 ;
1025: 	int !VAR_TEMP_temp345 ;
1026: 	!VAR_TEMP_temp345 !VAR_USER_a = ;
1027: 	int !VAR_TEMP_temp346 ;
1028: 	!VAR_TEMP_temp346 !VAR_USER_b = ;
1029: 	!VAR_TEMP_temp345 !VAR_TEMP_temp346 !FUNC_LIB_mul = !VAR_TEMP_temp222 ;
1030: 	int !VAR_TEMP_temp223 ;
1031: 	int !VAR_TEMP_temp347 ;
1032: 	!VAR_TEMP_temp347 !VAR_USER_c = ;
1033: 	!VAR_TEMP_temp222 !VAR_TEMP_temp347 !FUNC_LIB_div = !VAR_TEMP_temp223 ;
1034: 	!VAR_USER_temp !VAR_TEMP_temp223 = ;
1035: 	int !VAR_USER_x ;
1036: 	int !VAR_TEMP_temp224 ;
1037: 	!VAR_TEMP_temp224 1 = ;
1038: 	int !VAR_TEMP_temp225 ;
1039: 	!VAR_TEMP_temp224 !FUNC_LIB_neg = !VAR_TEMP_temp225 ;
1040: 	int !VAR_TEMP_temp226 ;
1041: 	int !VAR_TEMP_temp348 ;
1042: 	!VAR_TEMP_temp348 !VAR_USER_a = ;
1043: 	!VAR_TEMP_temp348 !VAR_TEMP_temp225 !FUNC_LIB_sub = !VAR_TEMP_temp226 ;
1044: 	!VAR_USER_x !VAR_TEMP_temp226 = ;
1045: 	!VAR_USER_temp return ;
1046: }
1047: int !FUNC_USER_main ( ) {
1048: 	int !VAR_USER_x ;
1049: 	int !VAR_TEMP_temp227 ;
1050: 	!FUNC_LIB_nextInt = !VAR_TEMP_temp227 ;
1051: 	!VAR_USER_x !VAR_TEMP_temp227 = ;
1052: 	int !VAR_USER_y ;
1053: 	int !VAR_TEMP_temp228 ;
1054: 	!VAR_TEMP_temp228 1 = ;
1055: 	int !VAR_TEMP_temp229 ;
1056: 	int !VAR_TEMP_temp349 ;
1057: 	!VAR_TEMP_temp349 !VAR_USER_x = ;
1058: 	!VAR_TEMP_temp349 !VAR_TEMP_temp228 !FUNC_LIB_add = !VAR_TEMP_temp229 ;
1059: 	!VAR_USER_y !VAR_TEMP_temp229 = ;
1060: 	int !VAR_TEMP_temp350 ;
1061: 	!VAR_TEMP_temp350 !VAR_USER_x = ;
1062: 	int !VAR_TEMP_temp351 ;
1063: 	!VAR_TEMP_temp351 !VAR_USER_y = ;
1064: 	!VAR_TEMP_temp350 !VAR_TEMP_temp351 !FUNC_LIB_add = !VAR_TEMP_temp230 ;
1065: 	!VAR_TEMP_temp230 return ;
1066: }

After explicitReturn, 
  0: int !FUNC_LIB_add ( int !VAR_USER_x , int !VAR_USER_y ) {
  1: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp0 !VAR_TEMP_temp2 ;
  2: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
  3: 	!VAR_TEMP_temp0 if {
  4: 		!TAPE_RAX !VAR_USER_y = ;
  5: 		return ;
  6: 	}
  7: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
  8: 	!VAR_TEMP_temp0 if {
  9: 		!TAPE_RAX !VAR_USER_x = ;
 10: 		return ;
 11: 	}
 12: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
 13: 	!VAR_TEMP_temp0 if {
 14: 		!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp1 ;
 15: 		!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 16: 	}
 17: 	else {
 18: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 19: 	}
 20: 	!VAR_TEMP_temp2 if {
 21: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 22: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
 23: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
 24: 		!VAR_TEMP_temp2 if {
 25: 			!VAR_TEMP_temp0 0 = ;
 26: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
 27: 			return ;
 28: 		}
 29: 		else {
 30: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 31: 			!VAR_TEMP_temp1 !VAR_USER_y = ;
 32: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
 33: 			!VAR_TEMP_temp2 if {
 34: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 35: 				!VAR_USER_y !VAR_TEMP_temp0 !FUNC_LIB_basic_sub = !VAR_TEMP_temp1 ;
 36: 				!TAPE_RAX !VAR_TEMP_temp1 = ;
 37: 				return ;
 38: 			}
 39: 			else {
 40: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 41: 				!VAR_USER_y !FUNC_LIB_basic_sub = !VAR_TEMP_temp1 ;
 42: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_neg = !VAR_TEMP_temp2 ;
 43: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
 44: 				return ;
 45: 			}
 46: 		}
 47: 	}
 48: 	else {
 49: 		!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
 50: 		!VAR_TEMP_temp0 if {
 51: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
 52: 			!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 53: 		}
 54: 		else {
 55: 			!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 56: 		}
 57: 		!VAR_TEMP_temp2 if {
 58: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 59: 			!VAR_TEMP_temp1 !VAR_USER_x = ;
 60: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
 61: 			!VAR_TEMP_temp2 if {
 62: 				!VAR_TEMP_temp0 0 = ;
 63: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
 64: 				return ;
 65: 			}
 66: 			else {
 67: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 68: 				!VAR_TEMP_temp1 !VAR_USER_x = ;
 69: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
 70: 				!VAR_TEMP_temp2 if {
 71: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 72: 					!VAR_USER_x !VAR_TEMP_temp0 !FUNC_LIB_basic_sub = !VAR_TEMP_temp1 ;
 73: 					!TAPE_RAX !VAR_TEMP_temp1 = ;
 74: 					return ;
 75: 				}
 76: 				else {
 77: 					!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 78: 					!VAR_USER_x !FUNC_LIB_basic_sub = !VAR_TEMP_temp1 ;
 79: 					!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_neg = !VAR_TEMP_temp2 ;
 80: 					!TAPE_RAX !VAR_TEMP_temp2 = ;
 81: 					return ;
 82: 				}
 83: 			}
 84: 		}
 85: 		else {
 86: 			!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
 87: 			!VAR_TEMP_temp0 if {
 88: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
 89: 				!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
 90: 			}
 91: 			else {
 92: 				!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
 93: 			}
 94: 			!VAR_TEMP_temp2 if {
 95: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
 96: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
 97: 				!VAR_TEMP_temp1 !FUNC_LIB_basic_add = !VAR_TEMP_temp2 ;
 98: 				!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
 99: 				!TAPE_RAX !VAR_TEMP_temp1 = ;
100: 				return ;
101: 			}
102: 			else {
103: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp0 ;
104: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
105: 				return ;
106: 			}
107: 		}
108: 	}
109: }
110: int !FUNC_LIB_sub ( int !VAR_USER_x , int !VAR_USER_y ) {
111: 	declare !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
112: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
113: 	!VAR_TEMP_temp0 if {
114: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
115: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
116: 		return ;
117: 	}
118: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
119: 	!VAR_TEMP_temp0 if {
120: 		!TAPE_RAX !VAR_USER_x = ;
121: 		return ;
122: 	}
123: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
124: 	!VAR_TEMP_temp0 if {
125: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
126: 		!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
127: 	}
128: 	else {
129: 		!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
130: 	}
131: 	!VAR_TEMP_temp2 if {
132: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
133: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
134: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
135: 		!TAPE_RAX !VAR_TEMP_temp2 = ;
136: 		return ;
137: 	}
138: 	else {
139: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
140: 		!VAR_TEMP_temp0 if {
141: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp1 ;
142: 			!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
143: 		}
144: 		else {
145: 			!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
146: 		}
147: 		!VAR_TEMP_temp2 if {
148: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
149: 			!VAR_USER_y !FUNC_LIB_basic_add = !VAR_TEMP_temp1 ;
150: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_neg = !VAR_TEMP_temp2 ;
151: 			!TAPE_RAX !VAR_TEMP_temp2 = ;
152: 			return ;
153: 		}
154: 		else {
155: 			!VAR_USER_x !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
156: 			!VAR_TEMP_temp0 if {
157: 				!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp1 ;
158: 				!VAR_TEMP_temp2 !VAR_TEMP_temp1 = ;
159: 			}
160: 			else {
161: 				!VAR_TEMP_temp2 !VAR_TEMP_temp0 = ;
162: 			}
163: 			!VAR_TEMP_temp2 if {
164: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
165: 				!VAR_USER_x !VAR_TEMP_temp0 !FUNC_LIB_basic_add = !VAR_TEMP_temp1 ;
166: 				!TAPE_RAX !VAR_TEMP_temp1 = ;
167: 				return ;
168: 			}
169: 			else {
170: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
171: 				!VAR_TEMP_temp1 !VAR_USER_x = ;
172: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
173: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
174: 				return ;
175: 			}
176: 		}
177: 	}
178: }
179: int !FUNC_LIB_mul ( int !VAR_USER_x , int !VAR_USER_y ) {
180: 	declare !VAR_USER_ans !VAR_USER_y0 !VAR_USER_y1 !VAR_USER_y2 !VAR_USER_val1 !VAR_TEMP_temp2 !VAR_USER_val2 !VAR_USER_ansNeg !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
181: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
182: 	!VAR_TEMP_temp0 if {
183: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
184: 	}
185: 	else {
186: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
187: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
188: 	}
189: 	!VAR_TEMP_temp1 if {
190: 		!VAR_TEMP_temp0 0 = ;
191: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
192: 		return ;
193: 	}
194: 	!VAR_TEMP_temp0 false = ;
195: 	!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
196: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
197: 	!VAR_TEMP_temp0 if {
198: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
199: 		!VAR_USER_x !VAR_TEMP_temp0 = ;
200: 		!VAR_TEMP_temp0 true = ;
201: 		!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
202: 	}
203: 	!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
204: 	!VAR_TEMP_temp0 if {
205: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
206: 		!VAR_USER_y !VAR_TEMP_temp0 = ;
207: 		!VAR_USER_ansNeg ! = !VAR_TEMP_temp0 ;
208: 		!VAR_USER_ansNeg !VAR_TEMP_temp0 = ;
209: 	}
210: 	!VAR_TEMP_temp0 0 = ;
211: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
212: 	!VAR_USER_y0 !VAR_USER_y = ;
213: 	while ( true ) {
214: 		!VAR_TEMP_temp0 0 = ;
215: 		!VAR_TEMP_temp1 !VAR_USER_y0 = ;
216: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
217: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
218: 		!VAR_TEMP_temp0 if {
219: 			break ;
220: 		}
221: 		!VAR_TEMP_temp0 1 = ;
222: 		!VAR_USER_y1 !VAR_TEMP_temp0 = ;
223: 		!VAR_TEMP_temp0 2 = ;
224: 		!VAR_USER_y2 !VAR_TEMP_temp0 = ;
225: 		!VAR_USER_val1 !VAR_USER_x = ;
226: 		!VAR_TEMP_temp0 !VAR_USER_x = ;
227: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
228: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
229: 		!VAR_USER_val2 !VAR_TEMP_temp2 = ;
230: 		while ( true ) {
231: 			!VAR_TEMP_temp0 !VAR_USER_val2 = ;
232: 			!VAR_TEMP_temp1 !VAR_USER_y0 = ;
233: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
234: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
235: 			!VAR_TEMP_temp0 if {
236: 				break ;
237: 			}
238: 			!VAR_USER_y1 !VAR_USER_y2 = ;
239: 			!VAR_USER_val1 !VAR_USER_val2 = ;
240: 			!VAR_TEMP_temp0 !VAR_USER_y2 = ;
241: 			!VAR_TEMP_temp1 !VAR_USER_y2 = ;
242: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
243: 			!VAR_USER_y2 !VAR_TEMP_temp2 = ;
244: 			!VAR_TEMP_temp0 !VAR_USER_val2 = ;
245: 			!VAR_TEMP_temp1 !VAR_USER_val2 = ;
246: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
247: 			!VAR_USER_val2 !VAR_TEMP_temp2 = ;
248: 		}
249: 		!VAR_TEMP_temp0 !VAR_USER_ans = ;
250: 		!VAR_TEMP_temp1 !VAR_USER_val1 = ;
251: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
252: 		!VAR_USER_ans !VAR_TEMP_temp2 = ;
253: 		!VAR_TEMP_temp0 !VAR_USER_y0 = ;
254: 		!VAR_TEMP_temp1 !VAR_USER_y1 = ;
255: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
256: 		!VAR_USER_y0 !VAR_TEMP_temp2 = ;
257: 	}
258: 	!VAR_USER_ansNeg if {
259: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
260: 		!VAR_USER_ans !VAR_TEMP_temp0 = ;
261: 	}
262: 	!TAPE_RAX !VAR_USER_ans = ;
263: 	return ;
264: }
265: int !FUNC_LIB_div ( int !VAR_USER_x , int !VAR_USER_y ) {
266: 	declare !VAR_TEMP_temp3 !VAR_USER_n !VAR_USER_prevJump !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 !VAR_USER_ans !VAR_USER_jump ;
267: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
268: 	!VAR_TEMP_temp0 if {
269: 		!VAR_TEMP_temp0 0 = ;
270: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
271: 		return ;
272: 	}
273: 	!VAR_TEMP_temp0 0 = ;
274: 	!VAR_TEMP_temp1 0 = ;
275: 	!VAR_TEMP_temp2 !VAR_USER_x = ;
276: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp3 ;
277: 	!VAR_TEMP_temp3 if {
278: 		!VAR_TEMP_temp0 !VAR_USER_y = ;
279: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
280: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 = ;
281: 	}
282: 	else {
283: 		!VAR_TEMP_temp0 !VAR_TEMP_temp3 = ;
284: 	}
285: 	!VAR_TEMP_temp0 if {
286: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
287: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
288: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
289: 		!TAPE_RAX !VAR_TEMP_temp2 = ;
290: 		return ;
291: 	}
292: 	!VAR_TEMP_temp0 0 = ;
293: 	!VAR_TEMP_temp1 !VAR_USER_x = ;
294: 	!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
295: 	!VAR_TEMP_temp2 if {
296: 		!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
297: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
298: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
299: 		!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
300: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
301: 		return ;
302: 	}
303: 	!VAR_TEMP_temp0 0 = ;
304: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
305: 	!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
306: 	!VAR_TEMP_temp2 if {
307: 		!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
308: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
309: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
310: 		!VAR_TEMP_temp2 !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
311: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
312: 		return ;
313: 	}
314: 	!VAR_TEMP_temp0 0 = ;
315: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
316: 	!VAR_USER_n !VAR_USER_x = ;
317: 	while ( true ) {
318: 		!VAR_TEMP_temp0 !VAR_USER_n = ;
319: 		!VAR_TEMP_temp1 !VAR_USER_y = ;
320: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_geq = !VAR_TEMP_temp2 ;
321: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
322: 		!VAR_TEMP_temp0 if {
323: 			break ;
324: 		}
325: 		!VAR_TEMP_temp0 0 = ;
326: 		!VAR_USER_prevJump !VAR_TEMP_temp0 = ;
327: 		!VAR_TEMP_temp0 1 = ;
328: 		!VAR_USER_jump !VAR_TEMP_temp0 = ;
329: 		while ( true ) {
330: 			!VAR_TEMP_temp0 !VAR_USER_ans = ;
331: 			!VAR_TEMP_temp1 !VAR_USER_jump = ;
332: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
333: 			!VAR_TEMP_temp0 !VAR_USER_y = ;
334: 			!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_mul = !VAR_TEMP_temp1 ;
335: 			!VAR_TEMP_temp0 !VAR_USER_x = ;
336: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
337: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
338: 			!VAR_TEMP_temp0 if {
339: 				break ;
340: 			}
341: 			!VAR_USER_prevJump !VAR_USER_jump = ;
342: 			!VAR_TEMP_temp0 !VAR_USER_jump = ;
343: 			!VAR_TEMP_temp1 !VAR_USER_jump = ;
344: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
345: 			!VAR_USER_jump !VAR_TEMP_temp2 = ;
346: 		}
347: 		!VAR_TEMP_temp0 !VAR_USER_ans = ;
348: 		!VAR_TEMP_temp1 !VAR_USER_prevJump = ;
349: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
350: 		!VAR_USER_ans !VAR_TEMP_temp2 = ;
351: 		!VAR_TEMP_temp0 !VAR_USER_y = ;
352: 		!VAR_TEMP_temp1 !VAR_USER_ans = ;
353: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
354: 		!VAR_TEMP_temp0 !VAR_USER_x = ;
355: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
356: 		!VAR_USER_n !VAR_TEMP_temp1 = ;
357: 	}
358: 	!TAPE_RAX !VAR_USER_ans = ;
359: 	return ;
360: }
361: int !FUNC_LIB_mod ( int !VAR_USER_x , int !VAR_USER_y ) {
362: 	declare !VAR_USER_d !VAR_TEMP_temp1 !VAR_TEMP_temp2 !VAR_TEMP_temp0 ;
363: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
364: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
365: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
366: 	!VAR_USER_d !VAR_TEMP_temp2 = ;
367: 	!VAR_TEMP_temp0 !VAR_USER_y = ;
368: 	!VAR_TEMP_temp1 !VAR_USER_d = ;
369: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
370: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
371: 	!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
372: 	!TAPE_RAX !VAR_TEMP_temp1 = ;
373: 	return ;
374: }
375: int !FUNC_LIB_neg ( int !VAR_USER_x ) {
376: 	declare !VAR_TEMP_temp0 ;
377: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
378: 	!VAR_TEMP_temp0 if {
379: 		!VAR_TEMP_temp0 0 = ;
380: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
381: 		return ;
382: 	}
383: 	!VAR_USER_x !FUNC_LIB_basic_neg = !VAR_TEMP_temp0 ;
384: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
385: 	return ;
386: }
387: bool !FUNC_LIB_lt ( int !VAR_USER_x , int !VAR_USER_y ) {
388: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp0 ;
389: 	!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
390: 	!VAR_TEMP_temp0 if {
391: 		!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
392: 		!VAR_TEMP_temp0 if {
393: 			!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
394: 			!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
395: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
396: 			!TAPE_RAX !VAR_TEMP_temp2 = ;
397: 			return ;
398: 		}
399: 		else {
400: 			!VAR_TEMP_temp0 true = ;
401: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
402: 			return ;
403: 		}
404: 	}
405: 	else {
406: 		!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
407: 		!VAR_TEMP_temp0 if {
408: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
409: 			!VAR_TEMP_temp0 if {
410: 				!VAR_TEMP_temp0 false = ;
411: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
412: 				return ;
413: 			}
414: 			else {
415: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
416: 				!VAR_TEMP_temp0 if {
417: 					!VAR_TEMP_temp0 false = ;
418: 					!TAPE_RAX !VAR_TEMP_temp0 = ;
419: 					return ;
420: 				}
421: 				else {
422: 					!VAR_TEMP_temp0 true = ;
423: 					!TAPE_RAX !VAR_TEMP_temp0 = ;
424: 					return ;
425: 				}
426: 			}
427: 		}
428: 		else {
429: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
430: 			!VAR_TEMP_temp0 if {
431: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
432: 			}
433: 			else {
434: 				!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
435: 				!VAR_TEMP_temp1 !VAR_TEMP_temp0 = ;
436: 			}
437: 			!VAR_TEMP_temp1 if {
438: 				!VAR_TEMP_temp0 false = ;
439: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
440: 				return ;
441: 			}
442: 			else {
443: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_lt = !VAR_TEMP_temp0 ;
444: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
445: 				return ;
446: 			}
447: 		}
448: 	}
449: }
450: bool !FUNC_LIB_leq ( int !VAR_USER_x , int !VAR_USER_y ) {
451: 	declare !VAR_TEMP_temp3 !VAR_TEMP_temp1 !VAR_TEMP_temp0 !VAR_TEMP_temp2 ;
452: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
453: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
454: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
455: 	!VAR_TEMP_temp2 if {
456: 		!VAR_TEMP_temp0 !VAR_TEMP_temp2 = ;
457: 	}
458: 	else {
459: 		!VAR_TEMP_temp1 !VAR_USER_x = ;
460: 		!VAR_TEMP_temp2 !VAR_USER_y = ;
461: 		!VAR_TEMP_temp1 !VAR_TEMP_temp2 !FUNC_LIB_lt = !VAR_TEMP_temp3 ;
462: 		!VAR_TEMP_temp0 !VAR_TEMP_temp3 = ;
463: 	}
464: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
465: 	return ;
466: }
467: bool !FUNC_LIB_gt ( int !VAR_USER_x , int !VAR_USER_y ) {
468: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
469: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
470: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
471: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_leq = !VAR_TEMP_temp2 ;
472: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
473: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
474: 	return ;
475: }
476: bool !FUNC_LIB_geq ( int !VAR_USER_x , int !VAR_USER_y ) {
477: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
478: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
479: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
480: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
481: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
482: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
483: 	return ;
484: }
485: bool !FUNC_LIB_eq ( int !VAR_USER_x , int !VAR_USER_y ) {
486: 	declare !VAR_TEMP_temp1 !VAR_TEMP_temp0 ;
487: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
488: 	!VAR_TEMP_temp0 if {
489: 		!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
490: 		!VAR_TEMP_temp0 if {
491: 			!VAR_TEMP_temp0 true = ;
492: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
493: 			return ;
494: 		}
495: 		!VAR_TEMP_temp0 false = ;
496: 		!TAPE_RAX !VAR_TEMP_temp0 = ;
497: 		return ;
498: 	}
499: 	else {
500: 		!VAR_USER_x !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
501: 		!VAR_TEMP_temp0 if {
502: 			!VAR_USER_y !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
503: 			!VAR_TEMP_temp0 if {
504: 				!VAR_USER_x !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
505: 				!VAR_USER_y !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
506: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_basic_eq = !VAR_TEMP_temp2 ;
507: 				!TAPE_RAX !VAR_TEMP_temp2 = ;
508: 				return ;
509: 			}
510: 			!VAR_TEMP_temp0 false = ;
511: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
512: 			return ;
513: 		}
514: 		else {
515: 			!VAR_USER_y !FUNC_LIB_isPos = !VAR_TEMP_temp0 ;
516: 			!VAR_TEMP_temp0 if {
517: 				!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_eq = !VAR_TEMP_temp0 ;
518: 				!TAPE_RAX !VAR_TEMP_temp0 = ;
519: 				return ;
520: 			}
521: 			!VAR_TEMP_temp0 false = ;
522: 			!TAPE_RAX !VAR_TEMP_temp0 = ;
523: 			return ;
524: 		}
525: 	}
526: }
527: bool !FUNC_LIB_neq ( int !VAR_USER_x , int !VAR_USER_y ) {
528: 	declare !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 ;
529: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
530: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
531: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
532: 	!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
533: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
534: 	return ;
535: }
536: int !FUNC_LIB_eor ( int !VAR_USER_x , int !VAR_USER_y ) {
537: 	declare ;
538: 	!VAR_USER_x !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
539: 	!VAR_TEMP_temp0 if {
540: 		!TAPE_RAX !VAR_USER_y = ;
541: 		return ;
542: 	}
543: 	!VAR_USER_y !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
544: 	!VAR_TEMP_temp0 if {
545: 		!TAPE_RAX !VAR_USER_x = ;
546: 		return ;
547: 	}
548: 	!VAR_USER_x !VAR_USER_y !FUNC_LIB_basic_xor = !VAR_TEMP_temp0 ;
549: 	!TAPE_RAX !VAR_TEMP_temp0 = ;
550: 	return ;
551: }
552: void !FUNC_LIB_memset ( int !VAR_USER_index , int !VAR_USER_val ) {
553: 	declare !VAR_TEMP_temp3 !VAR_TEMP_temp0 !VAR_USER_V2 !VAR_TEMP_temp2 !VAR_USER_desiredBitIndex !VAR_USER_currBitIndex !VAR_USER_bit !VAR_USER_V !VAR_TEMP_temp1 !VAR_USER_valIndex !VAR_USER_handledSign ;
554: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp0 ;
555: 	!VAR_USER_currBitIndex !VAR_TEMP_temp0 = ;
556: 	!VAR_TEMP_temp0 false = ;
557: 	!VAR_USER_handledSign !VAR_TEMP_temp0 = ;
558: 	!VAR_TEMP_temp0 0 = ;
559: 	!VAR_USER_valIndex !VAR_TEMP_temp0 = ;
560: 	!VAR_USER_V !VAR_USER_val = ;
561: 	while ( true ) {
562: 		!VAR_USER_V !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
563: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
564: 		!VAR_TEMP_temp1 if {
565: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 = ;
566: 		}
567: 		else {
568: 			!VAR_USER_handledSign ! = !VAR_TEMP_temp1 ;
569: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 = ;
570: 		}
571: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
572: 		!VAR_TEMP_temp1 if {
573: 			break ;
574: 		}
575: 		!VAR_TEMP_temp0 ;
576: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
577: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
578: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
579: 		!VAR_TEMP_temp0 ;
580: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
581: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
582: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp3 ;
583: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
584: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
585: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
586: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp2 = ;
587: 		while ( true ) {
588: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
589: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
590: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
591: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
592: 			!VAR_TEMP_temp0 if {
593: 				break ;
594: 			}
595: 			!VAR_TEMP_temp0 1 = ;
596: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
597: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
598: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
599: 			!FUNC_LIB_moveMemHeadLeft ;
600: 		}
601: 		while ( true ) {
602: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
603: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
604: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
605: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
606: 			!VAR_TEMP_temp0 if {
607: 				break ;
608: 			}
609: 			!VAR_TEMP_temp0 1 = ;
610: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
611: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
612: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
613: 			!FUNC_LIB_moveMemHeadRight ;
614: 		}
615: 		!VAR_USER_handledSign ! = !VAR_TEMP_temp0 ;
616: 		!VAR_TEMP_temp0 if {
617: 			!VAR_USER_V !FUNC_LIB_isNeg = !VAR_TEMP_temp0 ;
618: 			!VAR_TEMP_temp0 if {
619: 				!FUNC_LIB_setMemBitOne ;
620: 				!VAR_USER_V !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
621: 				!VAR_USER_V !VAR_TEMP_temp0 = ;
622: 			}
623: 			else {
624: 				!FUNC_LIB_setMemBitZero ;
625: 			}
626: 			!VAR_TEMP_temp0 true = ;
627: 			!VAR_USER_handledSign !VAR_TEMP_temp0 = ;
628: 		}
629: 		else {
630: 			!VAR_TEMP_temp0 2 = ;
631: 			!VAR_TEMP_temp1 !VAR_USER_V = ;
632: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp2 ;
633: 			!VAR_USER_V2 !VAR_TEMP_temp2 = ;
634: 			!VAR_TEMP_temp0 2 = ;
635: 			!VAR_TEMP_temp1 !VAR_USER_V2 = ;
636: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
637: 			!VAR_TEMP_temp0 !VAR_USER_V = ;
638: 			!VAR_TEMP_temp0 !VAR_TEMP_temp2 !FUNC_LIB_sub = !VAR_TEMP_temp1 ;
639: 			!VAR_USER_bit !VAR_TEMP_temp1 = ;
640: 			!VAR_TEMP_temp0 1 = ;
641: 			!VAR_TEMP_temp1 !VAR_USER_bit = ;
642: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_eq = !VAR_TEMP_temp2 ;
643: 			!VAR_TEMP_temp2 if {
644: 				!FUNC_LIB_setMemBitOne ;
645: 			}
646: 			else {
647: 				!FUNC_LIB_setMemBitZero ;
648: 			}
649: 			!VAR_USER_V !VAR_USER_V2 = ;
650: 		}
651: 		!VAR_TEMP_temp0 1 = ;
652: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
653: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
654: 		!VAR_USER_valIndex !VAR_TEMP_temp2 = ;
655: 	}
656: 	!VAR_TEMP_temp0 ;
657: 	!VAR_TEMP_temp0 !VAR_USER_index = ;
658: 	!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
659: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
660: 	!VAR_TEMP_temp0 ;
661: 	!VAR_TEMP_temp0 !VAR_USER_index = ;
662: 	!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
663: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp3 ;
664: 	!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
665: 	!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
666: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
667: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp2 = ;
668: 	while ( true ) {
669: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
670: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
671: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
672: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
673: 		!VAR_TEMP_temp0 if {
674: 			break ;
675: 		}
676: 		!VAR_TEMP_temp0 1 = ;
677: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
678: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
679: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
680: 		!FUNC_LIB_moveMemHeadRight ;
681: 	}
682: 	!FUNC_LIB_setMemBitBlank ;
683: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
684: 	return ;
685: }
686: int !FUNC_LIB_memget ( int !VAR_USER_index ) {
687: 	declare !VAR_USER_currBitIndex !VAR_USER_desiredBitIndex !VAR_USER_valIndex !VAR_USER_ans !VAR_USER_shouldBeNegative !VAR_USER_pow2 !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 !VAR_TEMP_temp3 ;
688: 	!VAR_TEMP_temp0 0 = ;
689: 	!VAR_USER_ans !VAR_TEMP_temp0 = ;
690: 	!FUNC_LIB_getMemBitIndex = !VAR_TEMP_temp0 ;
691: 	!VAR_USER_currBitIndex !VAR_TEMP_temp0 = ;
692: 	!VAR_TEMP_temp0 !VAR_USER_index = ;
693: 	!VAR_TEMP_temp1 !VAR_USER_index = ;
694: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
695: 	!VAR_USER_desiredBitIndex !VAR_TEMP_temp2 = ;
696: 	while ( true ) {
697: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
698: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
699: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_gt = !VAR_TEMP_temp2 ;
700: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
701: 		!VAR_TEMP_temp0 if {
702: 			break ;
703: 		}
704: 		!VAR_TEMP_temp0 1 = ;
705: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
706: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
707: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
708: 		!FUNC_LIB_moveMemHeadLeft ;
709: 	}
710: 	while ( true ) {
711: 		!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
712: 		!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
713: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
714: 		!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
715: 		!VAR_TEMP_temp0 if {
716: 			break ;
717: 		}
718: 		!VAR_TEMP_temp0 1 = ;
719: 		!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
720: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
721: 		!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
722: 		!FUNC_LIB_moveMemHeadRight ;
723: 	}
724: 	!VAR_TEMP_temp0 0 = ;
725: 	!VAR_USER_valIndex !VAR_TEMP_temp0 = ;
726: 	!VAR_TEMP_temp0 false = ;
727: 	!VAR_USER_shouldBeNegative !VAR_TEMP_temp0 = ;
728: 	!VAR_TEMP_temp0 0 = ;
729: 	!VAR_USER_pow2 !VAR_TEMP_temp0 = ;
730: 	while ( true ) {
731: 		!FUNC_LIB_memBitIsBlank = !VAR_TEMP_temp0 ;
732: 		!VAR_TEMP_temp0 ! = !VAR_TEMP_temp1 ;
733: 		!VAR_TEMP_temp1 ! = !VAR_TEMP_temp0 ;
734: 		!VAR_TEMP_temp0 if {
735: 			break ;
736: 		}
737: 		!VAR_USER_valIndex !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
738: 		!VAR_TEMP_temp0 if {
739: 			!FUNC_LIB_memBitIsOne if {
740: 				!VAR_TEMP_temp0 true = ;
741: 				!VAR_USER_shouldBeNegative !VAR_TEMP_temp0 = ;
742: 			}
743: 		}
744: 		else {
745: 			!FUNC_LIB_memBitIsOne if {
746: 				!VAR_TEMP_temp0 !VAR_USER_ans = ;
747: 				!VAR_TEMP_temp1 !VAR_USER_pow2 = ;
748: 				!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
749: 				!VAR_USER_ans !VAR_TEMP_temp2 = ;
750: 			}
751: 		}
752: 		!VAR_TEMP_temp0 1 = ;
753: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
754: 		!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
755: 		!VAR_USER_valIndex !VAR_TEMP_temp2 = ;
756: 		!VAR_USER_pow2 !FUNC_LIB_isZero = !VAR_TEMP_temp0 ;
757: 		!VAR_TEMP_temp0 if {
758: 			!VAR_TEMP_temp0 1 = ;
759: 			!VAR_USER_pow2 !VAR_TEMP_temp0 = ;
760: 		}
761: 		else {
762: 			!VAR_TEMP_temp0 !VAR_USER_pow2 = ;
763: 			!VAR_TEMP_temp1 !VAR_USER_pow2 = ;
764: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
765: 			!VAR_USER_pow2 !VAR_TEMP_temp2 = ;
766: 		}
767: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
768: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
769: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
770: 		!VAR_TEMP_temp0 !VAR_USER_index = ;
771: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
772: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp3 ;
773: 		!VAR_TEMP_temp2 !VAR_TEMP_temp3 !FUNC_LIB_mul = !VAR_TEMP_temp0 ;
774: 		!VAR_TEMP_temp1 !VAR_USER_valIndex = ;
775: 		!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
776: 		!VAR_USER_desiredBitIndex !VAR_TEMP_temp2 = ;
777: 		while ( true ) {
778: 			!VAR_TEMP_temp0 !VAR_USER_currBitIndex = ;
779: 			!VAR_TEMP_temp1 !VAR_USER_desiredBitIndex = ;
780: 			!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_lt = !VAR_TEMP_temp2 ;
781: 			!VAR_TEMP_temp2 ! = !VAR_TEMP_temp0 ;
782: 			!VAR_TEMP_temp0 if {
783: 				break ;
784: 			}
785: 			!VAR_TEMP_temp0 1 = ;
786: 			!VAR_TEMP_temp1 !VAR_USER_currBitIndex = ;
787: 			!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
788: 			!VAR_USER_currBitIndex !VAR_TEMP_temp2 = ;
789: 			!FUNC_LIB_moveMemHeadRight ;
790: 		}
791: 	}
792: 	!VAR_USER_shouldBeNegative if {
793: 		!VAR_USER_ans !FUNC_LIB_neg = !VAR_TEMP_temp0 ;
794: 		!VAR_USER_ans !VAR_TEMP_temp0 = ;
795: 	}
796: 	!VAR_USER_currBitIndex !FUNC_LIB_setMemBitIndex ;
797: 	!TAPE_RAX !VAR_USER_ans = ;
798: 	return ;
799: }
800: void !FUNC_USER_what ( int !VAR_USER_x ) {
801: 	declare ;
802: 	return ;
803: }
804: int !FUNC_USER_linear ( int !VAR_USER_a , int !VAR_USER_b , int !VAR_USER_c ) {
805: 	declare !VAR_USER_temp !VAR_TEMP_temp2 !VAR_TEMP_temp0 !VAR_TEMP_temp1 !VAR_USER_x ;
806: 	!VAR_TEMP_temp0 !VAR_USER_a = ;
807: 	!VAR_TEMP_temp1 !VAR_USER_b = ;
808: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_mul = !VAR_TEMP_temp2 ;
809: 	!VAR_TEMP_temp0 !VAR_USER_c = ;
810: 	!VAR_TEMP_temp2 !VAR_TEMP_temp0 !FUNC_LIB_div = !VAR_TEMP_temp1 ;
811: 	!VAR_USER_temp !VAR_TEMP_temp1 = ;
812: 	!VAR_TEMP_temp0 1 = ;
813: 	!VAR_TEMP_temp0 !FUNC_LIB_neg = !VAR_TEMP_temp1 ;
814: 	!VAR_TEMP_temp0 !VAR_USER_a = ;
815: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_sub = !VAR_TEMP_temp2 ;
816: 	!VAR_USER_x !VAR_TEMP_temp2 = ;
817: 	!TAPE_RAX !VAR_USER_temp = ;
818: 	return ;
819: }
820: int !FUNC_USER_main ( ) {
821: 	declare !VAR_USER_x !VAR_TEMP_temp1 !VAR_TEMP_temp0 !VAR_TEMP_temp2 !VAR_USER_y ;
822: 	!FUNC_LIB_nextInt = !VAR_TEMP_temp0 ;
823: 	!VAR_USER_x !VAR_TEMP_temp0 = ;
824: 	!VAR_TEMP_temp0 1 = ;
825: 	!VAR_TEMP_temp1 !VAR_USER_x = ;
826: 	!VAR_TEMP_temp1 !VAR_TEMP_temp0 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
827: 	!VAR_USER_y !VAR_TEMP_temp2 = ;
828: 	!VAR_TEMP_temp0 !VAR_USER_x = ;
829: 	!VAR_TEMP_temp1 !VAR_USER_y = ;
830: 	!VAR_TEMP_temp0 !VAR_TEMP_temp1 !FUNC_LIB_add = !VAR_TEMP_temp2 ;
831: 	!TAPE_RAX !VAR_TEMP_temp2 = ;
832: 	return ;
833: }

Done with jumps
   0: jmp 1248 ;
   1: nop ;
   2: pop !TAPE_PARAMS !TAPE_tape0 ;
   3: pop !TAPE_PARAMS !TAPE_tape1 ;
   4: push !TAPE_tape0 !TAPE_PARAMS ;
   5: call !FUNC_LIB_isZero ;
   6: pop !TAPE_RAX !TAPE_tape3 ;
   7: jf !TAPE_tape3 10 ;
   8: !TAPE_RAX !TAPE_tape1 = ;
   9: return ;
  10: nop ;
  11: push !TAPE_tape1 !TAPE_PARAMS ;
  12: call !FUNC_LIB_isZero ;
  13: pop !TAPE_RAX !TAPE_tape3 ;
  14: jf !TAPE_tape3 17 ;
  15: !TAPE_RAX !TAPE_tape0 = ;
  16: return ;
  17: nop ;
  18: push !TAPE_tape0 !TAPE_PARAMS ;
  19: call !FUNC_LIB_isNeg ;
  20: pop !TAPE_RAX !TAPE_tape3 ;
  21: jf !TAPE_tape3 27 ;
  22: push !TAPE_tape1 !TAPE_PARAMS ;
  23: call !FUNC_LIB_isPos ;
  24: pop !TAPE_RAX !TAPE_tape2 ;
  25: !TAPE_tape4 !TAPE_tape2 = ;
  26: jmp 29 ;
  27: nop ;
  28: !TAPE_tape4 !TAPE_tape3 = ;
  29: nop ;
  30: jf !TAPE_tape4 80 ;
  31: push !TAPE_tape0 !TAPE_PARAMS ;
  32: call 596 ;
  33: pop !TAPE_RAX !TAPE_tape3 ;
  34: !TAPE_tape2 !TAPE_tape1 = ;
  35: push !TAPE_tape2 !TAPE_PARAMS ;
  36: push !TAPE_tape3 !TAPE_PARAMS ;
  37: call 750 ;
  38: pop !TAPE_RAX !TAPE_tape4 ;
  39: jf !TAPE_tape4 44 ;
  40: !TAPE_tape3 0 = ;
  41: !TAPE_RAX !TAPE_tape3 = ;
  42: return ;
  43: jmp 78 ;
  44: nop ;
  45: push !TAPE_tape0 !TAPE_PARAMS ;
  46: call 596 ;
  47: pop !TAPE_RAX !TAPE_tape3 ;
  48: !TAPE_tape2 !TAPE_tape1 = ;
  49: push !TAPE_tape2 !TAPE_PARAMS ;
  50: push !TAPE_tape3 !TAPE_PARAMS ;
  51: call 612 ;
  52: pop !TAPE_RAX !TAPE_tape4 ;
  53: jf !TAPE_tape4 64 ;
  54: push !TAPE_tape0 !TAPE_PARAMS ;
  55: call 596 ;
  56: pop !TAPE_RAX !TAPE_tape3 ;
  57: push !TAPE_tape3 !TAPE_PARAMS ;
  58: push !TAPE_tape1 !TAPE_PARAMS ;
  59: call !FUNC_LIB_basic_sub ;
  60: pop !TAPE_RAX !TAPE_tape2 ;
  61: !TAPE_RAX !TAPE_tape2 = ;
  62: return ;
  63: jmp 77 ;
  64: nop ;
  65: push !TAPE_tape0 !TAPE_PARAMS ;
  66: call 596 ;
  67: pop !TAPE_RAX !TAPE_tape3 ;
  68: push !TAPE_tape1 !TAPE_PARAMS ;
  69: call !FUNC_LIB_basic_sub ;
  70: pop !TAPE_RAX !TAPE_tape2 ;
  71: push !TAPE_tape2 !TAPE_PARAMS ;
  72: push !TAPE_tape3 !TAPE_PARAMS ;
  73: call 596 ;
  74: pop !TAPE_RAX !TAPE_tape4 ;
  75: !TAPE_RAX !TAPE_tape4 = ;
  76: return ;
  77: nop ;
  78: nop ;
  79: jmp 182 ;
  80: nop ;
  81: push !TAPE_tape0 !TAPE_PARAMS ;
  82: call !FUNC_LIB_isPos ;
  83: pop !TAPE_RAX !TAPE_tape3 ;
  84: jf !TAPE_tape3 90 ;
  85: push !TAPE_tape1 !TAPE_PARAMS ;
  86: call !FUNC_LIB_isNeg ;
  87: pop !TAPE_RAX !TAPE_tape2 ;
  88: !TAPE_tape4 !TAPE_tape2 = ;
  89: jmp 92 ;
  90: nop ;
  91: !TAPE_tape4 !TAPE_tape3 = ;
  92: nop ;
  93: jf !TAPE_tape4 143 ;
  94: push !TAPE_tape1 !TAPE_PARAMS ;
  95: call 596 ;
  96: pop !TAPE_RAX !TAPE_tape3 ;
  97: !TAPE_tape2 !TAPE_tape0 = ;
  98: push !TAPE_tape2 !TAPE_PARAMS ;
  99: push !TAPE_tape3 !TAPE_PARAMS ;
 100: call 750 ;
 101: pop !TAPE_RAX !TAPE_tape4 ;
 102: jf !TAPE_tape4 107 ;
 103: !TAPE_tape3 0 = ;
 104: !TAPE_RAX !TAPE_tape3 = ;
 105: return ;
 106: jmp 141 ;
 107: nop ;
 108: push !TAPE_tape1 !TAPE_PARAMS ;
 109: call 596 ;
 110: pop !TAPE_RAX !TAPE_tape3 ;
 111: !TAPE_tape2 !TAPE_tape0 = ;
 112: push !TAPE_tape2 !TAPE_PARAMS ;
 113: push !TAPE_tape3 !TAPE_PARAMS ;
 114: call 612 ;
 115: pop !TAPE_RAX !TAPE_tape4 ;
 116: jf !TAPE_tape4 127 ;
 117: push !TAPE_tape1 !TAPE_PARAMS ;
 118: call 596 ;
 119: pop !TAPE_RAX !TAPE_tape3 ;
 120: push !TAPE_tape3 !TAPE_PARAMS ;
 121: push !TAPE_tape0 !TAPE_PARAMS ;
 122: call !FUNC_LIB_basic_sub ;
 123: pop !TAPE_RAX !TAPE_tape2 ;
 124: !TAPE_RAX !TAPE_tape2 = ;
 125: return ;
 126: jmp 140 ;
 127: nop ;
 128: push !TAPE_tape1 !TAPE_PARAMS ;
 129: call 596 ;
 130: pop !TAPE_RAX !TAPE_tape3 ;
 131: push !TAPE_tape0 !TAPE_PARAMS ;
 132: call !FUNC_LIB_basic_sub ;
 133: pop !TAPE_RAX !TAPE_tape2 ;
 134: push !TAPE_tape2 !TAPE_PARAMS ;
 135: push !TAPE_tape3 !TAPE_PARAMS ;
 136: call 596 ;
 137: pop !TAPE_RAX !TAPE_tape4 ;
 138: !TAPE_RAX !TAPE_tape4 = ;
 139: return ;
 140: nop ;
 141: nop ;
 142: jmp 181 ;
 143: nop ;
 144: push !TAPE_tape0 !TAPE_PARAMS ;
 145: call !FUNC_LIB_isNeg ;
 146: pop !TAPE_RAX !TAPE_tape3 ;
 147: jf !TAPE_tape3 153 ;
 148: push !TAPE_tape1 !TAPE_PARAMS ;
 149: call !FUNC_LIB_isNeg ;
 150: pop !TAPE_RAX !TAPE_tape2 ;
 151: !TAPE_tape4 !TAPE_tape2 = ;
 152: jmp 155 ;
 153: nop ;
 154: !TAPE_tape4 !TAPE_tape3 = ;
 155: nop ;
 156: jf !TAPE_tape4 173 ;
 157: push !TAPE_tape0 !TAPE_PARAMS ;
 158: call 596 ;
 159: pop !TAPE_RAX !TAPE_tape3 ;
 160: push !TAPE_tape1 !TAPE_PARAMS ;
 161: call 596 ;
 162: pop !TAPE_RAX !TAPE_tape2 ;
 163: push !TAPE_tape2 !TAPE_PARAMS ;
 164: call !FUNC_LIB_basic_add ;
 165: pop !TAPE_RAX !TAPE_tape4 ;
 166: push !TAPE_tape4 !TAPE_PARAMS ;
 167: push !TAPE_tape3 !TAPE_PARAMS ;
 168: call 596 ;
 169: pop !TAPE_RAX !TAPE_tape2 ;
 170: !TAPE_RAX !TAPE_tape2 = ;
 171: return ;
 172: jmp 180 ;
 173: nop ;
 174: push !TAPE_tape1 !TAPE_PARAMS ;
 175: push !TAPE_tape0 !TAPE_PARAMS ;
 176: call !FUNC_LIB_basic_add ;
 177: pop !TAPE_RAX !TAPE_tape3 ;
 178: !TAPE_RAX !TAPE_tape3 = ;
 179: return ;
 180: nop ;
 181: nop ;
 182: nop ;
 183: nop ;
 184: nop ;
 185: pop !TAPE_PARAMS !TAPE_tape0 ;
 186: pop !TAPE_PARAMS !TAPE_tape1 ;
 187: push !TAPE_tape0 !TAPE_PARAMS ;
 188: call !FUNC_LIB_isZero ;
 189: pop !TAPE_RAX !TAPE_tape2 ;
 190: jf !TAPE_tape2 196 ;
 191: push !TAPE_tape1 !TAPE_PARAMS ;
 192: call 596 ;
 193: pop !TAPE_RAX !TAPE_tape2 ;
 194: !TAPE_RAX !TAPE_tape2 = ;
 195: return ;
 196: nop ;
 197: push !TAPE_tape1 !TAPE_PARAMS ;
 198: call !FUNC_LIB_isZero ;
 199: pop !TAPE_RAX !TAPE_tape2 ;
 200: jf !TAPE_tape2 203 ;
 201: !TAPE_RAX !TAPE_tape0 = ;
 202: return ;
 203: nop ;
 204: push !TAPE_tape0 !TAPE_PARAMS ;
 205: call !FUNC_LIB_isNeg ;
 206: pop !TAPE_RAX !TAPE_tape2 ;
 207: jf !TAPE_tape2 213 ;
 208: push !TAPE_tape1 !TAPE_PARAMS ;
 209: call !FUNC_LIB_isNeg ;
 210: pop !TAPE_RAX !TAPE_tape3 ;
 211: !VAR_TEMP_temp2 !TAPE_tape3 = ;
 212: jmp 215 ;
 213: nop ;
 214: !VAR_TEMP_temp2 !TAPE_tape2 = ;
 215: nop ;
 216: jf !VAR_TEMP_temp2 228 ;
 217: push !TAPE_tape1 !TAPE_PARAMS ;
 218: call 596 ;
 219: pop !TAPE_RAX !TAPE_tape2 ;
 220: !TAPE_tape3 !TAPE_tape0 = ;
 221: push !TAPE_tape2 !TAPE_PARAMS ;
 222: push !TAPE_tape3 !TAPE_PARAMS ;
 223: call 1 ;
 224: pop !TAPE_RAX !VAR_TEMP_temp2 ;
 225: !TAPE_RAX !VAR_TEMP_temp2 = ;
 226: return ;
 227: jmp 292 ;
 228: nop ;
 229: push !TAPE_tape0 !TAPE_PARAMS ;
 230: call !FUNC_LIB_isNeg ;
 231: pop !TAPE_RAX !TAPE_tape2 ;
 232: jf !TAPE_tape2 238 ;
 233: push !TAPE_tape1 !TAPE_PARAMS ;
 234: call !FUNC_LIB_isPos ;
 235: pop !TAPE_RAX !TAPE_tape3 ;
 236: !VAR_TEMP_temp2 !TAPE_tape3 = ;
 237: jmp 240 ;
 238: nop ;
 239: !VAR_TEMP_temp2 !TAPE_tape2 = ;
 240: nop ;
 241: jf !VAR_TEMP_temp2 255 ;
 242: push !TAPE_tape0 !TAPE_PARAMS ;
 243: call 596 ;
 244: pop !TAPE_RAX !TAPE_tape2 ;
 245: push !TAPE_tape1 !TAPE_PARAMS ;
 246: call !FUNC_LIB_basic_add ;
 247: pop !TAPE_RAX !TAPE_tape3 ;
 248: push !TAPE_tape3 !TAPE_PARAMS ;
 249: push !TAPE_tape2 !TAPE_PARAMS ;
 250: call 596 ;
 251: pop !TAPE_RAX !VAR_TEMP_temp2 ;
 252: !TAPE_RAX !VAR_TEMP_temp2 = ;
 253: return ;
 254: jmp 291 ;
 255: nop ;
 256: push !TAPE_tape0 !TAPE_PARAMS ;
 257: call !FUNC_LIB_isPos ;
 258: pop !TAPE_RAX !TAPE_tape2 ;
 259: jf !TAPE_tape2 265 ;
 260: push !TAPE_tape1 !TAPE_PARAMS ;
 261: call !FUNC_LIB_isNeg ;
 262: pop !TAPE_RAX !TAPE_tape3 ;
 263: !VAR_TEMP_temp2 !TAPE_tape3 = ;
 264: jmp 267 ;
 265: nop ;
 266: !VAR_TEMP_temp2 !TAPE_tape2 = ;
 267: nop ;
 268: jf !VAR_TEMP_temp2 279 ;
 269: push !TAPE_tape1 !TAPE_PARAMS ;
 270: call 596 ;
 271: pop !TAPE_RAX !TAPE_tape2 ;
 272: push !TAPE_tape2 !TAPE_PARAMS ;
 273: push !TAPE_tape0 !TAPE_PARAMS ;
 274: call !FUNC_LIB_basic_add ;
 275: pop !TAPE_RAX !TAPE_tape3 ;
 276: !TAPE_RAX !TAPE_tape3 = ;
 277: return ;
 278: jmp 290 ;
 279: nop ;
 280: push !TAPE_tape1 !TAPE_PARAMS ;
 281: call 596 ;
 282: pop !TAPE_RAX !TAPE_tape2 ;
 283: !TAPE_tape3 !TAPE_tape0 = ;
 284: push !TAPE_tape2 !TAPE_PARAMS ;
 285: push !TAPE_tape3 !TAPE_PARAMS ;
 286: call 1 ;
 287: pop !TAPE_RAX !VAR_TEMP_temp2 ;
 288: !TAPE_RAX !VAR_TEMP_temp2 = ;
 289: return ;
 290: nop ;
 291: nop ;
 292: nop ;
 293: nop ;
 294: nop ;
 295: pop !TAPE_PARAMS !TAPE_tape0 ;
 296: pop !TAPE_PARAMS !TAPE_tape1 ;
 297: push !TAPE_tape0 !TAPE_PARAMS ;
 298: call !FUNC_LIB_isZero ;
 299: pop !TAPE_RAX !TAPE_tape10 ;
 300: jf !TAPE_tape10 303 ;
 301: !TAPE_tape11 !TAPE_tape10 = ;
 302: jmp 308 ;
 303: nop ;
 304: push !TAPE_tape1 !TAPE_PARAMS ;
 305: call !FUNC_LIB_isZero ;
 306: pop !TAPE_RAX !TAPE_tape10 ;
 307: !TAPE_tape11 !TAPE_tape10 = ;
 308: nop ;
 309: jf !TAPE_tape11 313 ;
 310: !TAPE_tape10 0 = ;
 311: !TAPE_RAX !TAPE_tape10 = ;
 312: return ;
 313: nop ;
 314: !TAPE_tape10 false = ;
 315: !TAPE_tape9 !TAPE_tape10 = ;
 316: push !TAPE_tape0 !TAPE_PARAMS ;
 317: call !FUNC_LIB_isNeg ;
 318: pop !TAPE_RAX !TAPE_tape10 ;
 319: jf !TAPE_tape10 326 ;
 320: push !TAPE_tape0 !TAPE_PARAMS ;
 321: call 596 ;
 322: pop !TAPE_RAX !TAPE_tape10 ;
 323: !TAPE_tape0 !TAPE_tape10 = ;
 324: !TAPE_tape10 true = ;
 325: !TAPE_tape9 !TAPE_tape10 = ;
 326: nop ;
 327: push !TAPE_tape1 !TAPE_PARAMS ;
 328: call !FUNC_LIB_isNeg ;
 329: pop !TAPE_RAX !TAPE_tape10 ;
 330: jf !TAPE_tape10 337 ;
 331: push !TAPE_tape1 !TAPE_PARAMS ;
 332: call 596 ;
 333: pop !TAPE_RAX !TAPE_tape10 ;
 334: !TAPE_tape1 !TAPE_tape10 = ;
 335: !TAPE_tape9 ! = !TAPE_tape10 ;
 336: !TAPE_tape9 !TAPE_tape10 = ;
 337: nop ;
 338: !TAPE_tape10 0 = ;
 339: !TAPE_tape2 !TAPE_tape10 = ;
 340: !TAPE_tape3 !TAPE_tape1 = ;
 341: jmp 406 ;
 342: !TAPE_tape10 0 = ;
 343: !TAPE_tape11 !TAPE_tape3 = ;
 344: push !TAPE_tape10 !TAPE_PARAMS ;
 345: push !TAPE_tape11 !TAPE_PARAMS ;
 346: call 724 ;
 347: pop !TAPE_RAX !TAPE_tape7 ;
 348: !TAPE_tape7 ! = !TAPE_tape10 ;
 349: jf !TAPE_tape10 351 ;
 350: jmp 407 ;
 351: nop ;
 352: !TAPE_tape10 1 = ;
 353: !TAPE_tape4 !TAPE_tape10 = ;
 354: !TAPE_tape10 2 = ;
 355: !TAPE_tape5 !TAPE_tape10 = ;
 356: !TAPE_tape6 !TAPE_tape0 = ;
 357: !TAPE_tape10 !TAPE_tape0 = ;
 358: !TAPE_tape11 !TAPE_tape0 = ;
 359: push !TAPE_tape11 !TAPE_PARAMS ;
 360: push !TAPE_tape10 !TAPE_PARAMS ;
 361: call 1 ;
 362: pop !TAPE_RAX !TAPE_tape7 ;
 363: !TAPE_tape8 !TAPE_tape7 = ;
 364: jmp 391 ;
 365: !TAPE_tape10 !TAPE_tape8 = ;
 366: !TAPE_tape11 !TAPE_tape3 = ;
 367: push !TAPE_tape11 !TAPE_PARAMS ;
 368: push !TAPE_tape10 !TAPE_PARAMS ;
 369: call 700 ;
 370: pop !TAPE_RAX !TAPE_tape7 ;
 371: !TAPE_tape7 ! = !TAPE_tape10 ;
 372: jf !TAPE_tape10 374 ;
 373: jmp 392 ;
 374: nop ;
 375: !TAPE_tape4 !TAPE_tape5 = ;
 376: !TAPE_tape6 !TAPE_tape8 = ;
 377: !TAPE_tape10 !TAPE_tape5 = ;
 378: !TAPE_tape11 !TAPE_tape5 = ;
 379: push !TAPE_tape11 !TAPE_PARAMS ;
 380: push !TAPE_tape10 !TAPE_PARAMS ;
 381: call 1 ;
 382: pop !TAPE_RAX !TAPE_tape7 ;
 383: !TAPE_tape5 !TAPE_tape7 = ;
 384: !TAPE_tape10 !TAPE_tape8 = ;
 385: !TAPE_tape11 !TAPE_tape8 = ;
 386: push !TAPE_tape11 !TAPE_PARAMS ;
 387: push !TAPE_tape10 !TAPE_PARAMS ;
 388: call 1 ;
 389: pop !TAPE_RAX !TAPE_tape7 ;
 390: !TAPE_tape8 !TAPE_tape7 = ;
 391: nop ;
 392: !TAPE_tape10 !TAPE_tape2 = ;
 393: !TAPE_tape11 !TAPE_tape6 = ;
 394: push !TAPE_tape11 !TAPE_PARAMS ;
 395: push !TAPE_tape10 !TAPE_PARAMS ;
 396: call 1 ;
 397: pop !TAPE_RAX !TAPE_tape7 ;
 398: !TAPE_tape2 !TAPE_tape7 = ;
 399: !TAPE_tape10 !TAPE_tape3 = ;
 400: !TAPE_tape11 !TAPE_tape4 = ;
 401: push !TAPE_tape11 !TAPE_PARAMS ;
 402: push !TAPE_tape10 !TAPE_PARAMS ;
 403: call 184 ;
 404: pop !TAPE_RAX !TAPE_tape7 ;
 405: !TAPE_tape3 !TAPE_tape7 = ;
 406: nop ;
 407: jf !TAPE_tape9 412 ;
 408: push !TAPE_tape2 !TAPE_PARAMS ;
 409: call 596 ;
 410: pop !TAPE_RAX !TAPE_tape10 ;
 411: !TAPE_tape2 !TAPE_tape10 = ;
 412: nop ;
 413: !TAPE_RAX !TAPE_tape2 = ;
 414: return ;
 415: nop ;
 416: nop ;
 417: pop !TAPE_PARAMS !TAPE_tape0 ;
 418: pop !TAPE_PARAMS !TAPE_tape1 ;
 419: push !TAPE_tape0 !TAPE_PARAMS ;
 420: call !FUNC_LIB_isZero ;
 421: pop !TAPE_RAX !TAPE_tape6 ;
 422: jf !TAPE_tape6 426 ;
 423: !TAPE_tape6 0 = ;
 424: !TAPE_RAX !TAPE_tape6 = ;
 425: return ;
 426: nop ;
 427: !TAPE_tape6 0 = ;
 428: !TAPE_tape7 0 = ;
 429: !TAPE_tape5 !TAPE_tape0 = ;
 430: push !TAPE_tape6 !TAPE_PARAMS ;
 431: push !TAPE_tape5 !TAPE_PARAMS ;
 432: call 612 ;
 433: pop !TAPE_RAX !TAPE_tape2 ;
 434: jf !TAPE_tape2 442 ;
 435: !TAPE_tape6 !TAPE_tape1 = ;
 436: push !TAPE_tape7 !TAPE_PARAMS ;
 437: push !TAPE_tape6 !TAPE_PARAMS ;
 438: call 612 ;
 439: pop !TAPE_RAX !TAPE_tape5 ;
 440: !TAPE_tape6 !TAPE_tape5 = ;
 441: jmp 444 ;
 442: nop ;
 443: !TAPE_tape6 !TAPE_tape2 = ;
 444: nop ;
 445: jf !TAPE_tape6 458 ;
 446: push !TAPE_tape0 !TAPE_PARAMS ;
 447: call 596 ;
 448: pop !TAPE_RAX !TAPE_tape6 ;
 449: push !TAPE_tape1 !TAPE_PARAMS ;
 450: call 596 ;
 451: pop !TAPE_RAX !TAPE_tape7 ;
 452: push !TAPE_tape7 !TAPE_PARAMS ;
 453: push !TAPE_tape6 !TAPE_PARAMS ;
 454: call 416 ;
 455: pop !TAPE_RAX !TAPE_tape5 ;
 456: !TAPE_RAX !TAPE_tape5 = ;
 457: return ;
 458: nop ;
 459: !TAPE_tape6 0 = ;
 460: !TAPE_tape7 !TAPE_tape0 = ;
 461: push !TAPE_tape6 !TAPE_PARAMS ;
 462: push !TAPE_tape7 !TAPE_PARAMS ;
 463: call 612 ;
 464: pop !TAPE_RAX !TAPE_tape5 ;
 465: jf !TAPE_tape5 479 ;
 466: push !TAPE_tape0 !TAPE_PARAMS ;
 467: call 596 ;
 468: pop !TAPE_RAX !TAPE_tape6 ;
 469: !TAPE_tape7 !TAPE_tape1 = ;
 470: push !TAPE_tape7 !TAPE_PARAMS ;
 471: push !TAPE_tape6 !TAPE_PARAMS ;
 472: call 416 ;
 473: pop !TAPE_RAX !TAPE_tape5 ;
 474: push !TAPE_tape5 !TAPE_PARAMS ;
 475: call 596 ;
 476: pop !TAPE_RAX !TAPE_tape6 ;
 477: !TAPE_RAX !TAPE_tape6 = ;
 478: return ;
 479: nop ;
 480: !TAPE_tape6 0 = ;
 481: !TAPE_tape7 !TAPE_tape1 = ;
 482: push !TAPE_tape6 !TAPE_PARAMS ;
 483: push !TAPE_tape7 !TAPE_PARAMS ;
 484: call 612 ;
 485: pop !TAPE_RAX !TAPE_tape5 ;
 486: jf !TAPE_tape5 500 ;
 487: push !TAPE_tape1 !TAPE_PARAMS ;
 488: call 596 ;
 489: pop !TAPE_RAX !TAPE_tape6 ;
 490: !TAPE_tape7 !TAPE_tape0 = ;
 491: push !TAPE_tape6 !TAPE_PARAMS ;
 492: push !TAPE_tape7 !TAPE_PARAMS ;
 493: call 416 ;
 494: pop !TAPE_RAX !TAPE_tape5 ;
 495: push !TAPE_tape5 !TAPE_PARAMS ;
 496: call 596 ;
 497: pop !TAPE_RAX !TAPE_tape6 ;
 498: !TAPE_RAX !TAPE_tape6 = ;
 499: return ;
 500: nop ;
 501: !TAPE_tape6 0 = ;
 502: !TAPE_tape8 !TAPE_tape6 = ;
 503: !TAPE_tape3 !TAPE_tape0 = ;
 504: jmp 568 ;
 505: !TAPE_tape6 !TAPE_tape3 = ;
 506: !TAPE_tape7 !TAPE_tape1 = ;
 507: push !TAPE_tape7 !TAPE_PARAMS ;
 508: push !TAPE_tape6 !TAPE_PARAMS ;
 509: call 737 ;
 510: pop !TAPE_RAX !TAPE_tape5 ;
 511: !TAPE_tape5 ! = !TAPE_tape6 ;
 512: jf !TAPE_tape6 514 ;
 513: jmp 569 ;
 514: nop ;
 515: !TAPE_tape6 0 = ;
 516: !TAPE_tape4 !TAPE_tape6 = ;
 517: !TAPE_tape6 1 = ;
 518: !TAPE_tape9 !TAPE_tape6 = ;
 519: jmp 548 ;
 520: !TAPE_tape6 !TAPE_tape8 = ;
 521: !TAPE_tape7 !TAPE_tape9 = ;
 522: push !TAPE_tape7 !TAPE_PARAMS ;
 523: push !TAPE_tape6 !TAPE_PARAMS ;
 524: call 1 ;
 525: pop !TAPE_RAX !TAPE_tape5 ;
 526: !TAPE_tape6 !TAPE_tape1 = ;
 527: push !TAPE_tape5 !TAPE_PARAMS ;
 528: push !TAPE_tape6 !TAPE_PARAMS ;
 529: call 294 ;
 530: pop !TAPE_RAX !TAPE_tape7 ;
 531: !TAPE_tape6 !TAPE_tape0 = ;
 532: push !TAPE_tape6 !TAPE_PARAMS ;
 533: push !TAPE_tape7 !TAPE_PARAMS ;
 534: call 700 ;
 535: pop !TAPE_RAX !TAPE_tape5 ;
 536: !TAPE_tape5 ! = !TAPE_tape6 ;
 537: jf !TAPE_tape6 539 ;
 538: jmp 549 ;
 539: nop ;
 540: !TAPE_tape4 !TAPE_tape9 = ;
 541: !TAPE_tape6 !TAPE_tape9 = ;
 542: !TAPE_tape7 !TAPE_tape9 = ;
 543: push !TAPE_tape7 !TAPE_PARAMS ;
 544: push !TAPE_tape6 !TAPE_PARAMS ;
 545: call 1 ;
 546: pop !TAPE_RAX !TAPE_tape5 ;
 547: !TAPE_tape9 !TAPE_tape5 = ;
 548: nop ;
 549: !TAPE_tape6 !TAPE_tape8 = ;
 550: !TAPE_tape7 !TAPE_tape4 = ;
 551: push !TAPE_tape7 !TAPE_PARAMS ;
 552: push !TAPE_tape6 !TAPE_PARAMS ;
 553: call 1 ;
 554: pop !TAPE_RAX !TAPE_tape5 ;
 555: !TAPE_tape8 !TAPE_tape5 = ;
 556: !TAPE_tape6 !TAPE_tape1 = ;
 557: !TAPE_tape7 !TAPE_tape8 = ;
 558: push !TAPE_tape7 !TAPE_PARAMS ;
 559: push !TAPE_tape6 !TAPE_PARAMS ;
 560: call 294 ;
 561: pop !TAPE_RAX !TAPE_tape5 ;
 562: !TAPE_tape6 !TAPE_tape0 = ;
 563: push !TAPE_tape5 !TAPE_PARAMS ;
 564: push !TAPE_tape6 !TAPE_PARAMS ;
 565: call 184 ;
 566: pop !TAPE_RAX !TAPE_tape7 ;
 567: !TAPE_tape3 !TAPE_tape7 = ;
 568: nop ;
 569: !TAPE_RAX !TAPE_tape8 = ;
 570: return ;
 571: nop ;
 572: nop ;
 573: pop !TAPE_PARAMS !TAPE_tape0 ;
 574: pop !TAPE_PARAMS !TAPE_tape1 ;
 575: !TAPE_tape5 !TAPE_tape0 = ;
 576: !TAPE_tape3 !TAPE_tape1 = ;
 577: push !TAPE_tape3 !TAPE_PARAMS ;
 578: push !TAPE_tape5 !TAPE_PARAMS ;
 579: call 416 ;
 580: pop !TAPE_RAX !TAPE_tape4 ;
 581: !TAPE_tape2 !TAPE_tape4 = ;
 582: !TAPE_tape5 !TAPE_tape1 = ;
 583: !TAPE_tape3 !TAPE_tape2 = ;
 584: push !TAPE_tape3 !TAPE_PARAMS ;
 585: push !TAPE_tape5 !TAPE_PARAMS ;
 586: call 294 ;
 587: pop !TAPE_RAX !TAPE_tape4 ;
 588: !TAPE_tape5 !TAPE_tape0 = ;
 589: push !TAPE_tape4 !TAPE_PARAMS ;
 590: push !TAPE_tape5 !TAPE_PARAMS ;
 591: call 184 ;
 592: pop !TAPE_RAX !TAPE_tape3 ;
 593: !TAPE_RAX !TAPE_tape3 = ;
 594: return ;
 595: nop ;
 596: nop ;
 597: pop !TAPE_PARAMS !TAPE_tape0 ;
 598: push !TAPE_tape0 !TAPE_PARAMS ;
 599: call !FUNC_LIB_isZero ;
 600: pop !TAPE_RAX !TAPE_tape1 ;
 601: jf !TAPE_tape1 605 ;
 602: !TAPE_tape1 0 = ;
 603: !TAPE_RAX !TAPE_tape1 = ;
 604: return ;
 605: nop ;
 606: push !TAPE_tape0 !TAPE_PARAMS ;
 607: call !FUNC_LIB_basic_neg ;
 608: pop !TAPE_RAX !TAPE_tape1 ;
 609: !TAPE_RAX !TAPE_tape1 = ;
 610: return ;
 611: nop ;
 612: nop ;
 613: pop !TAPE_PARAMS !TAPE_tape0 ;
 614: pop !TAPE_PARAMS !TAPE_tape1 ;
 615: push !TAPE_tape0 !TAPE_PARAMS ;
 616: call !FUNC_LIB_isNeg ;
 617: pop !TAPE_RAX !TAPE_tape3 ;
 618: jf !TAPE_tape3 642 ;
 619: push !TAPE_tape1 !TAPE_PARAMS ;
 620: call !FUNC_LIB_isNeg ;
 621: pop !TAPE_RAX !TAPE_tape3 ;
 622: jf !TAPE_tape3 636 ;
 623: push !TAPE_tape1 !TAPE_PARAMS ;
 624: call 596 ;
 625: pop !TAPE_RAX !TAPE_tape3 ;
 626: push !TAPE_tape0 !TAPE_PARAMS ;
 627: call 596 ;
 628: pop !TAPE_RAX !TAPE_tape2 ;
 629: push !TAPE_tape2 !TAPE_PARAMS ;
 630: push !TAPE_tape3 !TAPE_PARAMS ;
 631: call 612 ;
 632: pop !TAPE_RAX !VAR_TEMP_temp2 ;
 633: !TAPE_RAX !VAR_TEMP_temp2 = ;
 634: return ;
 635: jmp 640 ;
 636: nop ;
 637: !TAPE_tape3 true = ;
 638: !TAPE_RAX !TAPE_tape3 = ;
 639: return ;
 640: nop ;
 641: jmp 698 ;
 642: nop ;
 643: push !TAPE_tape0 !TAPE_PARAMS ;
 644: call !FUNC_LIB_isZero ;
 645: pop !TAPE_RAX !TAPE_tape3 ;
 646: jf !TAPE_tape3 671 ;
 647: push !TAPE_tape1 !TAPE_PARAMS ;
 648: call !FUNC_LIB_isNeg ;
 649: pop !TAPE_RAX !TAPE_tape3 ;
 650: jf !TAPE_tape3 655 ;
 651: !TAPE_tape3 false = ;
 652: !TAPE_RAX !TAPE_tape3 = ;
 653: return ;
 654: jmp 669 ;
 655: nop ;
 656: push !TAPE_tape1 !TAPE_PARAMS ;
 657: call !FUNC_LIB_isZero ;
 658: pop !TAPE_RAX !TAPE_tape3 ;
 659: jf !TAPE_tape3 664 ;
 660: !TAPE_tape3 false = ;
 661: !TAPE_RAX !TAPE_tape3 = ;
 662: return ;
 663: jmp 668 ;
 664: nop ;
 665: !TAPE_tape3 true = ;
 666: !TAPE_RAX !TAPE_tape3 = ;
 667: return ;
 668: nop ;
 669: nop ;
 670: jmp 697 ;
 671: nop ;
 672: push !TAPE_tape1 !TAPE_PARAMS ;
 673: call !FUNC_LIB_isNeg ;
 674: pop !TAPE_RAX !TAPE_tape3 ;
 675: jf !TAPE_tape3 678 ;
 676: !TAPE_tape2 !TAPE_tape3 = ;
 677: jmp 683 ;
 678: nop ;
 679: push !TAPE_tape1 !TAPE_PARAMS ;
 680: call !FUNC_LIB_isZero ;
 681: pop !TAPE_RAX !TAPE_tape3 ;
 682: !TAPE_tape2 !TAPE_tape3 = ;
 683: nop ;
 684: jf !TAPE_tape2 689 ;
 685: !TAPE_tape3 false = ;
 686: !TAPE_RAX !TAPE_tape3 = ;
 687: return ;
 688: jmp 696 ;
 689: nop ;
 690: push !TAPE_tape1 !TAPE_PARAMS ;
 691: push !TAPE_tape0 !TAPE_PARAMS ;
 692: call !FUNC_LIB_basic_lt ;
 693: pop !TAPE_RAX !TAPE_tape3 ;
 694: !TAPE_RAX !TAPE_tape3 = ;
 695: return ;
 696: nop ;
 697: nop ;
 698: nop ;
 699: nop ;
 700: nop ;
 701: pop !TAPE_PARAMS !TAPE_tape0 ;
 702: pop !TAPE_PARAMS !TAPE_tape1 ;
 703: !TAPE_tape4 !TAPE_tape0 = ;
 704: !TAPE_tape3 !TAPE_tape1 = ;
 705: push !TAPE_tape3 !TAPE_PARAMS ;
 706: push !TAPE_tape4 !TAPE_PARAMS ;
 707: call 750 ;
 708: pop !TAPE_RAX !TAPE_tape5 ;
 709: jf !TAPE_tape5 712 ;
 710: !TAPE_tape4 !TAPE_tape5 = ;
 711: jmp 720 ;
 712: nop ;
 713: !TAPE_tape3 !TAPE_tape0 = ;
 714: !TAPE_tape5 !TAPE_tape1 = ;
 715: push !TAPE_tape5 !TAPE_PARAMS ;
 716: push !TAPE_tape3 !TAPE_PARAMS ;
 717: call 612 ;
 718: pop !TAPE_RAX !TAPE_tape2 ;
 719: !TAPE_tape4 !TAPE_tape2 = ;
 720: nop ;
 721: !TAPE_RAX !TAPE_tape4 = ;
 722: return ;
 723: nop ;
 724: nop ;
 725: pop !TAPE_PARAMS !TAPE_tape0 ;
 726: pop !TAPE_PARAMS !TAPE_tape1 ;
 727: !TAPE_tape3 !TAPE_tape0 = ;
 728: !TAPE_tape4 !TAPE_tape1 = ;
 729: push !TAPE_tape4 !TAPE_PARAMS ;
 730: push !TAPE_tape3 !TAPE_PARAMS ;
 731: call 700 ;
 732: pop !TAPE_RAX !TAPE_tape2 ;
 733: !TAPE_tape2 ! = !TAPE_tape3 ;
 734: !TAPE_RAX !TAPE_tape3 = ;
 735: return ;
 736: nop ;
 737: nop ;
 738: pop !TAPE_PARAMS !TAPE_tape0 ;
 739: pop !TAPE_PARAMS !TAPE_tape1 ;
 740: !TAPE_tape3 !TAPE_tape0 = ;
 741: !TAPE_tape4 !TAPE_tape1 = ;
 742: push !TAPE_tape4 !TAPE_PARAMS ;
 743: push !TAPE_tape3 !TAPE_PARAMS ;
 744: call 612 ;
 745: pop !TAPE_RAX !TAPE_tape2 ;
 746: !TAPE_tape2 ! = !TAPE_tape3 ;
 747: !TAPE_RAX !TAPE_tape3 = ;
 748: return ;
 749: nop ;
 750: nop ;
 751: pop !TAPE_PARAMS !TAPE_tape0 ;
 752: pop !TAPE_PARAMS !TAPE_tape1 ;
 753: push !TAPE_tape0 !TAPE_PARAMS ;
 754: call !FUNC_LIB_isZero ;
 755: pop !TAPE_RAX !TAPE_tape3 ;
 756: jf !TAPE_tape3 769 ;
 757: push !TAPE_tape1 !TAPE_PARAMS ;
 758: call !FUNC_LIB_isZero ;
 759: pop !TAPE_RAX !TAPE_tape3 ;
 760: jf !TAPE_tape3 764 ;
 761: !TAPE_tape3 true = ;
 762: !TAPE_RAX !TAPE_tape3 = ;
 763: return ;
 764: nop ;
 765: !TAPE_tape3 false = ;
 766: !TAPE_RAX !TAPE_tape3 = ;
 767: return ;
 768: jmp 811 ;
 769: nop ;
 770: push !TAPE_tape0 !TAPE_PARAMS ;
 771: call !FUNC_LIB_isNeg ;
 772: pop !TAPE_RAX !TAPE_tape3 ;
 773: jf !TAPE_tape3 795 ;
 774: push !TAPE_tape1 !TAPE_PARAMS ;
 775: call !FUNC_LIB_isNeg ;
 776: pop !TAPE_RAX !TAPE_tape3 ;
 777: jf !TAPE_tape3 790 ;
 778: push !TAPE_tape0 !TAPE_PARAMS ;
 779: call 596 ;
 780: pop !TAPE_RAX !TAPE_tape3 ;
 781: push !TAPE_tape1 !TAPE_PARAMS ;
 782: call 596 ;
 783: pop !TAPE_RAX !TAPE_tape2 ;
 784: push !TAPE_tape2 !TAPE_PARAMS ;
 785: push !TAPE_tape3 !TAPE_PARAMS ;
 786: call !FUNC_LIB_basic_eq ;
 787: pop !TAPE_RAX !VAR_TEMP_temp2 ;
 788: !TAPE_RAX !VAR_TEMP_temp2 = ;
 789: return ;
 790: nop ;
 791: !TAPE_tape3 false = ;
 792: !TAPE_RAX !TAPE_tape3 = ;
 793: return ;
 794: jmp 810 ;
 795: nop ;
 796: push !TAPE_tape1 !TAPE_PARAMS ;
 797: call !FUNC_LIB_isPos ;
 798: pop !TAPE_RAX !TAPE_tape3 ;
 799: jf !TAPE_tape3 806 ;
 800: push !TAPE_tape1 !TAPE_PARAMS ;
 801: push !TAPE_tape0 !TAPE_PARAMS ;
 802: call !FUNC_LIB_basic_eq ;
 803: pop !TAPE_RAX !TAPE_tape3 ;
 804: !TAPE_RAX !TAPE_tape3 = ;
 805: return ;
 806: nop ;
 807: !TAPE_tape3 false = ;
 808: !TAPE_RAX !TAPE_tape3 = ;
 809: return ;
 810: nop ;
 811: nop ;
 812: nop ;
 813: nop ;
 814: pop !TAPE_PARAMS !TAPE_tape0 ;
 815: pop !TAPE_PARAMS !TAPE_tape1 ;
 816: !TAPE_tape3 !TAPE_tape0 = ;
 817: !TAPE_tape4 !TAPE_tape1 = ;
 818: push !TAPE_tape4 !TAPE_PARAMS ;
 819: push !TAPE_tape3 !TAPE_PARAMS ;
 820: call 750 ;
 821: pop !TAPE_RAX !TAPE_tape2 ;
 822: !TAPE_tape2 ! = !TAPE_tape3 ;
 823: !TAPE_RAX !TAPE_tape3 = ;
 824: return ;
 825: nop ;
 826: nop ;
 827: pop !TAPE_PARAMS !TAPE_tape0 ;
 828: pop !TAPE_PARAMS !TAPE_tape1 ;
 829: push !TAPE_tape0 !TAPE_PARAMS ;
 830: call !FUNC_LIB_isZero ;
 831: pop !TAPE_RAX !VAR_TEMP_temp0 ;
 832: jf !VAR_TEMP_temp0 835 ;
 833: !TAPE_RAX !TAPE_tape1 = ;
 834: return ;
 835: nop ;
 836: push !TAPE_tape1 !TAPE_PARAMS ;
 837: call !FUNC_LIB_isZero ;
 838: pop !TAPE_RAX !VAR_TEMP_temp0 ;
 839: jf !VAR_TEMP_temp0 842 ;
 840: !TAPE_RAX !TAPE_tape0 = ;
 841: return ;
 842: nop ;
 843: push !TAPE_tape1 !TAPE_PARAMS ;
 844: push !TAPE_tape0 !TAPE_PARAMS ;
 845: call !FUNC_LIB_basic_xor ;
 846: pop !TAPE_RAX !VAR_TEMP_temp0 ;
 847: !TAPE_RAX !VAR_TEMP_temp0 = ;
 848: return ;
 849: nop ;
 850: nop ;
 851: pop !TAPE_PARAMS !TAPE_tape0 ;
 852: pop !TAPE_PARAMS !TAPE_tape1 ;
 853: call !FUNC_LIB_getMemBitIndex ;
 854: pop !TAPE_RAX !TAPE_tape3 ;
 855: !TAPE_tape7 !TAPE_tape3 = ;
 856: !TAPE_tape3 false = ;
 857: !TAPE_tape12 !TAPE_tape3 = ;
 858: !TAPE_tape3 0 = ;
 859: !TAPE_tape11 !TAPE_tape3 = ;
 860: !TAPE_tape9 !TAPE_tape1 = ;
 861: jmp 1000 ;
 862: push !TAPE_tape9 !TAPE_PARAMS ;
 863: call !FUNC_LIB_isZero ;
 864: pop !TAPE_RAX !TAPE_tape3 ;
 865: !TAPE_tape3 ! = !TAPE_tape10 ;
 866: jf !TAPE_tape10 869 ;
 867: !TAPE_tape3 !TAPE_tape10 = ;
 868: jmp 872 ;
 869: nop ;
 870: !TAPE_tape12 ! = !TAPE_tape10 ;
 871: !TAPE_tape3 !TAPE_tape10 = ;
 872: nop ;
 873: !TAPE_tape3 ! = !TAPE_tape10 ;
 874: jf !TAPE_tape10 876 ;
 875: jmp 1001 ;
 876: nop ;
 877: !TAPE_tape3 ;
 878: !TAPE_tape3 !TAPE_tape0 = ;
 879: !TAPE_tape10 !TAPE_tape11 = ;
 880: push !TAPE_tape10 !TAPE_PARAMS ;
 881: push !TAPE_tape3 !TAPE_PARAMS ;
 882: call 1 ;
 883: pop !TAPE_RAX !TAPE_tape5 ;
 884: !TAPE_tape3 ;
 885: !TAPE_tape3 !TAPE_tape0 = ;
 886: !TAPE_tape10 !TAPE_tape11 = ;
 887: push !TAPE_tape10 !TAPE_PARAMS ;
 888: push !TAPE_tape3 !TAPE_PARAMS ;
 889: call 1 ;
 890: pop !TAPE_RAX !TAPE_tape2 ;
 891: push !TAPE_tape2 !TAPE_PARAMS ;
 892: push !TAPE_tape5 !TAPE_PARAMS ;
 893: call 294 ;
 894: pop !TAPE_RAX !TAPE_tape3 ;
 895: !TAPE_tape10 !TAPE_tape11 = ;
 896: push !TAPE_tape10 !TAPE_PARAMS ;
 897: push !TAPE_tape3 !TAPE_PARAMS ;
 898: call 1 ;
 899: pop !TAPE_RAX !TAPE_tape5 ;
 900: !TAPE_tape6 !TAPE_tape5 = ;
 901: jmp 920 ;
 902: !TAPE_tape3 !TAPE_tape7 = ;
 903: !TAPE_tape10 !TAPE_tape6 = ;
 904: push !TAPE_tape10 !TAPE_PARAMS ;
 905: push !TAPE_tape3 !TAPE_PARAMS ;
 906: call 724 ;
 907: pop !TAPE_RAX !TAPE_tape5 ;
 908: !TAPE_tape5 ! = !TAPE_tape3 ;
 909: jf !TAPE_tape3 911 ;
 910: jmp 921 ;
 911: nop ;
 912: !TAPE_tape3 1 = ;
 913: !TAPE_tape10 !TAPE_tape7 = ;
 914: push !TAPE_tape3 !TAPE_PARAMS ;
 915: push !TAPE_tape10 !TAPE_PARAMS ;
 916: call 184 ;
 917: pop !TAPE_RAX !TAPE_tape5 ;
 918: !TAPE_tape7 !TAPE_tape5 = ;
 919: call !FUNC_LIB_moveMemHeadLeft ;
 920: nop ;
 921: jmp 940 ;
 922: !TAPE_tape3 !TAPE_tape7 = ;
 923: !TAPE_tape10 !TAPE_tape6 = ;
 924: push !TAPE_tape10 !TAPE_PARAMS ;
 925: push !TAPE_tape3 !TAPE_PARAMS ;
 926: call 612 ;
 927: pop !TAPE_RAX !TAPE_tape5 ;
 928: !TAPE_tape5 ! = !TAPE_tape3 ;
 929: jf !TAPE_tape3 931 ;
 930: jmp 941 ;
 931: nop ;
 932: !TAPE_tape3 1 = ;
 933: !TAPE_tape10 !TAPE_tape7 = ;
 934: push !TAPE_tape3 !TAPE_PARAMS ;
 935: push !TAPE_tape10 !TAPE_PARAMS ;
 936: call 1 ;
 937: pop !TAPE_RAX !TAPE_tape5 ;
 938: !TAPE_tape7 !TAPE_tape5 = ;
 939: call !FUNC_LIB_moveMemHeadRight ;
 940: nop ;
 941: !TAPE_tape12 ! = !TAPE_tape3 ;
 942: jf !TAPE_tape3 959 ;
 943: push !TAPE_tape9 !TAPE_PARAMS ;
 944: call !FUNC_LIB_isNeg ;
 945: pop !TAPE_RAX !TAPE_tape3 ;
 946: jf !TAPE_tape3 953 ;
 947: call !FUNC_LIB_setMemBitOne ;
 948: push !TAPE_tape9 !TAPE_PARAMS ;
 949: call 596 ;
 950: pop !TAPE_RAX !TAPE_tape3 ;
 951: !TAPE_tape9 !TAPE_tape3 = ;
 952: jmp 955 ;
 953: nop ;
 954: call !FUNC_LIB_setMemBitZero ;
 955: nop ;
 956: !TAPE_tape3 true = ;
 957: !TAPE_tape12 !TAPE_tape3 = ;
 958: jmp 992 ;
 959: nop ;
 960: !TAPE_tape3 2 = ;
 961: !TAPE_tape10 !TAPE_tape9 = ;
 962: push !TAPE_tape3 !TAPE_PARAMS ;
 963: push !TAPE_tape10 !TAPE_PARAMS ;
 964: call 416 ;
 965: pop !TAPE_RAX !TAPE_tape5 ;
 966: !TAPE_tape4 !TAPE_tape5 = ;
 967: !TAPE_tape3 2 = ;
 968: !TAPE_tape10 !TAPE_tape4 = ;
 969: push !TAPE_tape10 !TAPE_PARAMS ;
 970: push !TAPE_tape3 !TAPE_PARAMS ;
 971: call 294 ;
 972: pop !TAPE_RAX !TAPE_tape5 ;
 973: !TAPE_tape3 !TAPE_tape9 = ;
 974: push !TAPE_tape5 !TAPE_PARAMS ;
 975: push !TAPE_tape3 !TAPE_PARAMS ;
 976: call 184 ;
 977: pop !TAPE_RAX !TAPE_tape10 ;
 978: !TAPE_tape8 !TAPE_tape10 = ;
 979: !TAPE_tape3 1 = ;
 980: !TAPE_tape10 !TAPE_tape8 = ;
 981: push !TAPE_tape3 !TAPE_PARAMS ;
 982: push !TAPE_tape10 !TAPE_PARAMS ;
 983: call 750 ;
 984: pop !TAPE_RAX !TAPE_tape5 ;
 985: jf !TAPE_tape5 988 ;
 986: call !FUNC_LIB_setMemBitOne ;
 987: jmp 990 ;
 988: nop ;
 989: call !FUNC_LIB_setMemBitZero ;
 990: nop ;
 991: !TAPE_tape9 !TAPE_tape4 = ;
 992: nop ;
 993: !TAPE_tape3 1 = ;
 994: !TAPE_tape10 !TAPE_tape11 = ;
 995: push !TAPE_tape3 !TAPE_PARAMS ;
 996: push !TAPE_tape10 !TAPE_PARAMS ;
 997: call 1 ;
 998: pop !TAPE_RAX !TAPE_tape5 ;
 999: !TAPE_tape11 !TAPE_tape5 = ;
1000: nop ;
1001: !TAPE_tape3 ;
1002: !TAPE_tape3 !TAPE_tape0 = ;
1003: !TAPE_tape10 !TAPE_tape11 = ;
1004: push !TAPE_tape10 !TAPE_PARAMS ;
1005: push !TAPE_tape3 !TAPE_PARAMS ;
1006: call 1 ;
1007: pop !TAPE_RAX !TAPE_tape5 ;
1008: !TAPE_tape3 ;
1009: !TAPE_tape3 !TAPE_tape0 = ;
1010: !TAPE_tape10 !TAPE_tape11 = ;
1011: push !TAPE_tape10 !TAPE_PARAMS ;
1012: push !TAPE_tape3 !TAPE_PARAMS ;
1013: call 1 ;
1014: pop !TAPE_RAX !TAPE_tape2 ;
1015: push !TAPE_tape2 !TAPE_PARAMS ;
1016: push !TAPE_tape5 !TAPE_PARAMS ;
1017: call 294 ;
1018: pop !TAPE_RAX !TAPE_tape3 ;
1019: !TAPE_tape10 !TAPE_tape11 = ;
1020: push !TAPE_tape10 !TAPE_PARAMS ;
1021: push !TAPE_tape3 !TAPE_PARAMS ;
1022: call 1 ;
1023: pop !TAPE_RAX !TAPE_tape5 ;
1024: !TAPE_tape6 !TAPE_tape5 = ;
1025: jmp 1044 ;
1026: !TAPE_tape3 !TAPE_tape7 = ;
1027: !TAPE_tape10 !TAPE_tape6 = ;
1028: push !TAPE_tape10 !TAPE_PARAMS ;
1029: push !TAPE_tape3 !TAPE_PARAMS ;
1030: call 612 ;
1031: pop !TAPE_RAX !TAPE_tape5 ;
1032: !TAPE_tape5 ! = !TAPE_tape3 ;
1033: jf !TAPE_tape3 1035 ;
1034: jmp 1045 ;
1035: nop ;
1036: !TAPE_tape3 1 = ;
1037: !TAPE_tape10 !TAPE_tape7 = ;
1038: push !TAPE_tape3 !TAPE_PARAMS ;
1039: push !TAPE_tape10 !TAPE_PARAMS ;
1040: call 1 ;
1041: pop !TAPE_RAX !TAPE_tape5 ;
1042: !TAPE_tape7 !TAPE_tape5 = ;
1043: call !FUNC_LIB_moveMemHeadRight ;
1044: nop ;
1045: call !FUNC_LIB_setMemBitBlank ;
1046: push !TAPE_tape7 !TAPE_PARAMS ;
1047: call !FUNC_LIB_setMemBitIndex ;
1048: return ;
1049: nop ;
1050: nop ;
1051: pop !TAPE_PARAMS !TAPE_tape0 ;
1052: !TAPE_tape8 0 = ;
1053: !TAPE_tape4 !TAPE_tape8 = ;
1054: call !FUNC_LIB_getMemBitIndex ;
1055: pop !TAPE_RAX !TAPE_tape8 ;
1056: !TAPE_tape1 !TAPE_tape8 = ;
1057: !TAPE_tape8 !TAPE_tape0 = ;
1058: !TAPE_tape9 !TAPE_tape0 = ;
1059: push !TAPE_tape9 !TAPE_PARAMS ;
1060: push !TAPE_tape8 !TAPE_PARAMS ;
1061: call 294 ;
1062: pop !TAPE_RAX !TAPE_tape7 ;
1063: !TAPE_tape2 !TAPE_tape7 = ;
1064: jmp 1083 ;
1065: !TAPE_tape8 !TAPE_tape1 = ;
1066: !TAPE_tape9 !TAPE_tape2 = ;
1067: push !TAPE_tape9 !TAPE_PARAMS ;
1068: push !TAPE_tape8 !TAPE_PARAMS ;
1069: call 724 ;
1070: pop !TAPE_RAX !TAPE_tape7 ;
1071: !TAPE_tape7 ! = !TAPE_tape8 ;
1072: jf !TAPE_tape8 1074 ;
1073: jmp 1084 ;
1074: nop ;
1075: !TAPE_tape8 1 = ;
1076: !TAPE_tape9 !TAPE_tape1 = ;
1077: push !TAPE_tape8 !TAPE_PARAMS ;
1078: push !TAPE_tape9 !TAPE_PARAMS ;
1079: call 184 ;
1080: pop !TAPE_RAX !TAPE_tape7 ;
1081: !TAPE_tape1 !TAPE_tape7 = ;
1082: call !FUNC_LIB_moveMemHeadLeft ;
1083: nop ;
1084: jmp 1103 ;
1085: !TAPE_tape8 !TAPE_tape1 = ;
1086: !TAPE_tape9 !TAPE_tape2 = ;
1087: push !TAPE_tape9 !TAPE_PARAMS ;
1088: push !TAPE_tape8 !TAPE_PARAMS ;
1089: call 612 ;
1090: pop !TAPE_RAX !TAPE_tape7 ;
1091: !TAPE_tape7 ! = !TAPE_tape8 ;
1092: jf !TAPE_tape8 1094 ;
1093: jmp 1104 ;
1094: nop ;
1095: !TAPE_tape8 1 = ;
1096: !TAPE_tape9 !TAPE_tape1 = ;
1097: push !TAPE_tape8 !TAPE_PARAMS ;
1098: push !TAPE_tape9 !TAPE_PARAMS ;
1099: call 1 ;
1100: pop !TAPE_RAX !TAPE_tape7 ;
1101: !TAPE_tape1 !TAPE_tape7 = ;
1102: call !FUNC_LIB_moveMemHeadRight ;
1103: nop ;
1104: !TAPE_tape8 0 = ;
1105: !TAPE_tape3 !TAPE_tape8 = ;
1106: !TAPE_tape8 false = ;
1107: !TAPE_tape5 !TAPE_tape8 = ;
1108: !TAPE_tape8 0 = ;
1109: !TAPE_tape6 !TAPE_tape8 = ;
1110: jmp 1203 ;
1111: call !FUNC_LIB_memBitIsBlank ;
1112: pop !TAPE_RAX !TAPE_tape8 ;
1113: !TAPE_tape8 ! = !TAPE_tape9 ;
1114: !TAPE_tape9 ! = !TAPE_tape8 ;
1115: jf !TAPE_tape8 1117 ;
1116: jmp 1204 ;
1117: nop ;
1118: push !TAPE_tape3 !TAPE_PARAMS ;
1119: call !FUNC_LIB_isZero ;
1120: pop !TAPE_RAX !TAPE_tape8 ;
1121: jf !TAPE_tape8 1127 ;
1122: jf !FUNC_LIB_memBitIsOne 1125 ;
1123: !TAPE_tape8 true = ;
1124: !TAPE_tape5 !TAPE_tape8 = ;
1125: nop ;
1126: jmp 1137 ;
1127: nop ;
1128: jf !FUNC_LIB_memBitIsOne 1136 ;
1129: !TAPE_tape8 !TAPE_tape4 = ;
1130: !TAPE_tape9 !TAPE_tape6 = ;
1131: push !TAPE_tape9 !TAPE_PARAMS ;
1132: push !TAPE_tape8 !TAPE_PARAMS ;
1133: call 1 ;
1134: pop !TAPE_RAX !TAPE_tape7 ;
1135: !TAPE_tape4 !TAPE_tape7 = ;
1136: nop ;
1137: nop ;
1138: !TAPE_tape8 1 = ;
1139: !TAPE_tape9 !TAPE_tape3 = ;
1140: push !TAPE_tape8 !TAPE_PARAMS ;
1141: push !TAPE_tape9 !TAPE_PARAMS ;
1142: call 1 ;
1143: pop !TAPE_RAX !TAPE_tape7 ;
1144: !TAPE_tape3 !TAPE_tape7 = ;
1145: push !TAPE_tape6 !TAPE_PARAMS ;
1146: call !FUNC_LIB_isZero ;
1147: pop !TAPE_RAX !TAPE_tape8 ;
1148: jf !TAPE_tape8 1152 ;
1149: !TAPE_tape8 1 = ;
1150: !TAPE_tape6 !TAPE_tape8 = ;
1151: jmp 1160 ;
1152: nop ;
1153: !TAPE_tape8 !TAPE_tape6 = ;
1154: !TAPE_tape9 !TAPE_tape6 = ;
1155: push !TAPE_tape9 !TAPE_PARAMS ;
1156: push !TAPE_tape8 !TAPE_PARAMS ;
1157: call 1 ;
1158: pop !TAPE_RAX !TAPE_tape7 ;
1159: !TAPE_tape6 !TAPE_tape7 = ;
1160: nop ;
1161: !TAPE_tape8 !TAPE_tape0 = ;
1162: !TAPE_tape9 !TAPE_tape3 = ;
1163: push !TAPE_tape9 !TAPE_PARAMS ;
1164: push !TAPE_tape8 !TAPE_PARAMS ;
1165: call 1 ;
1166: pop !TAPE_RAX !TAPE_tape7 ;
1167: !TAPE_tape8 !TAPE_tape0 = ;
1168: !TAPE_tape9 !TAPE_tape3 = ;
1169: push !TAPE_tape9 !TAPE_PARAMS ;
1170: push !TAPE_tape8 !TAPE_PARAMS ;
1171: call 1 ;
1172: pop !TAPE_RAX !TAPE_tape10 ;
1173: push !TAPE_tape10 !TAPE_PARAMS ;
1174: push !TAPE_tape7 !TAPE_PARAMS ;
1175: call 294 ;
1176: pop !TAPE_RAX !TAPE_tape8 ;
1177: !TAPE_tape9 !TAPE_tape3 = ;
1178: push !TAPE_tape9 !TAPE_PARAMS ;
1179: push !TAPE_tape8 !TAPE_PARAMS ;
1180: call 1 ;
1181: pop !TAPE_RAX !TAPE_tape7 ;
1182: !TAPE_tape2 !TAPE_tape7 = ;
1183: jmp 1202 ;
1184: !TAPE_tape8 !TAPE_tape1 = ;
1185: !TAPE_tape9 !TAPE_tape2 = ;
1186: push !TAPE_tape9 !TAPE_PARAMS ;
1187: push !TAPE_tape8 !TAPE_PARAMS ;
1188: call 612 ;
1189: pop !TAPE_RAX !TAPE_tape7 ;
1190: !TAPE_tape7 ! = !TAPE_tape8 ;
1191: jf !TAPE_tape8 1193 ;
1192: jmp 1203 ;
1193: nop ;
1194: !TAPE_tape8 1 = ;
1195: !TAPE_tape9 !TAPE_tape1 = ;
1196: push !TAPE_tape8 !TAPE_PARAMS ;
1197: push !TAPE_tape9 !TAPE_PARAMS ;
1198: call 1 ;
1199: pop !TAPE_RAX !TAPE_tape7 ;
1200: !TAPE_tape1 !TAPE_tape7 = ;
1201: call !FUNC_LIB_moveMemHeadRight ;
1202: nop ;
1203: nop ;
1204: jf !TAPE_tape5 1209 ;
1205: push !TAPE_tape4 !TAPE_PARAMS ;
1206: call 596 ;
1207: pop !TAPE_RAX !TAPE_tape8 ;
1208: !TAPE_tape4 !TAPE_tape8 = ;
1209: nop ;
1210: push !TAPE_tape1 !TAPE_PARAMS ;
1211: call !FUNC_LIB_setMemBitIndex ;
1212: !TAPE_RAX !TAPE_tape4 = ;
1213: return ;
1214: nop ;
1215: nop ;
1216: pop !TAPE_PARAMS !TAPE_tape0 ;
1217: return ;
1218: nop ;
1219: nop ;
1220: pop !TAPE_PARAMS !TAPE_tape0 ;
1221: pop !TAPE_PARAMS !TAPE_tape1 ;
1222: pop !TAPE_PARAMS !TAPE_tape2 ;
1223: !TAPE_tape5 !TAPE_tape0 = ;
1224: !TAPE_tape6 !TAPE_tape1 = ;
1225: push !TAPE_tape6 !TAPE_PARAMS ;
1226: push !TAPE_tape5 !TAPE_PARAMS ;
1227: call 294 ;
1228: pop !TAPE_RAX !TAPE_tape4 ;
1229: !TAPE_tape5 !TAPE_tape2 = ;
1230: push !TAPE_tape5 !TAPE_PARAMS ;
1231: push !TAPE_tape4 !TAPE_PARAMS ;
1232: call 416 ;
1233: pop !TAPE_RAX !TAPE_tape6 ;
1234: !TAPE_tape3 !TAPE_tape6 = ;
1235: !TAPE_tape5 1 = ;
1236: push !TAPE_tape5 !TAPE_PARAMS ;
1237: call 596 ;
1238: pop !TAPE_RAX !TAPE_tape6 ;
1239: !TAPE_tape5 !TAPE_tape0 = ;
1240: push !TAPE_tape6 !TAPE_PARAMS ;
1241: push !TAPE_tape5 !TAPE_PARAMS ;
1242: call 184 ;
1243: pop !TAPE_RAX !TAPE_tape4 ;
1244: !TAPE_tape7 !TAPE_tape4 = ;
1245: !TAPE_RAX !TAPE_tape3 = ;
1246: return ;
1247: nop ;
1248: nop ;
1249: call !FUNC_LIB_nextInt ;
1250: pop !TAPE_RAX !TAPE_tape2 ;
1251: !TAPE_tape0 !TAPE_tape2 = ;
1252: !TAPE_tape2 1 = ;
1253: !TAPE_tape1 !TAPE_tape0 = ;
1254: push !TAPE_tape2 !TAPE_PARAMS ;
1255: push !TAPE_tape1 !TAPE_PARAMS ;
1256: call 1 ;
1257: pop !TAPE_RAX !TAPE_tape3 ;
1258: !TAPE_tape4 !TAPE_tape3 = ;
1259: !TAPE_tape2 !TAPE_tape0 = ;
1260: !TAPE_tape1 !TAPE_tape4 = ;
1261: push !TAPE_tape1 !TAPE_PARAMS ;
1262: push !TAPE_tape2 !TAPE_PARAMS ;
1263: call 1 ;
1264: pop !TAPE_RAX !TAPE_tape3 ;
1265: !TAPE_RAX !TAPE_tape3 = ;
1266: return ;
1267: nop ;
