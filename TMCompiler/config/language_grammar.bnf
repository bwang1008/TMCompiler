# reference https://cs.wmich.edu/~gupta/teaching/cs4851/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm
# and https://cs.au.dk/~amoeller/RegAut/JavaBNF.html
<compilation-unit> ::= <function-definitions>

### Functions

<function-definitions> ::= <function-definition>
						 | <function-definition> <function-definitions>

<function-definition> ::= <function-header> <compound-statement>

<function-header> ::= <return-type> <identifier> "(" ")"
					| <return-type> <identifier> "(" <formal-parameter-list> ")"

<formal-parameter-list> ::= <formal-parameter>
						  | <formal-parameter> "," <formal-parameter-list>

<formal-parameter> ::= <type> <identifier>

<return-type> ::= "void"
			    | <type>

<type> ::= <built-in-type>

<built-in-type> ::= "int"
				   | "bool"

### Statements

<statements> ::= <statement>
			   | <statement> <statements>

<statement> ::= <local-variable-declaration-statement>
				| <expression-statement>
				| <compound-statement>
				| <selection-statement>
				| <iteration-statement>
				| <jump-statement>

# ex: int x, y = 0, z;
<local-variable-declaration-statement> ::= <local-variable-declaration> ";"
<local-variable-declaration> ::= <type> <variable-declarators>
<variable-declarators> ::= <variable-declarator>
						 | <variable-declarator> "," <variable-declarators>
# ex: y = 0
<variable-declarator> ::= <identifier>
					   | <identifier> "=" <expression>

<expression-statement> ::= ";"
						 | <expression> ";"

<compound-statement> ::= "{" "}"
					   | "{" <statements> "}"

<selection-statement> ::= "if" "(" <expression> ")" <statement>
						| "if" "(" <expression> ")" <statement> "else" <statement>

<iteration-statement> ::= "while" "(" <expression> ")" <statement>
						| "do" <statement> "while" "(" <expression> ")" ";"
						| "for" "(" <for-init> ";" <expression> ";" <expression> ")" <statement>

<for-init> ::= <local-variable-declaration>
			 | <statement-expression-list>

<statement-expression-list> ::= <statement-expression>
							| <statement-expression> <statement-expression-list>

<statement-expression> ::= <assignment-expression>
						 | <method-invocation>

<jump-statement> ::= "continue" ";"
				   | "break" ";"
				   | "return" <expression-statement>


### Expressions

# to preserve order of operations, we start from lowest-precedence to highest
# see https://introcs.cs.princeton.edu/java/11precedence/
# mostly from https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm
<expression> ::= <assignment-expression>

# assignment-expression means an assignment, or anything with higher precedence
# purposely different from C BNF: C uses <unary-expression> <assignment-operations> <assignment-expression>
# this is because this grammar does not have ++ nor --
<assignment-expression> ::= <conditional-expression>
						  | <left-hand-side> <assignment-operator> <assignment-expression>

<left-hand-side> ::= <identifier>
				   | <identifier> "[" <expression> "]"

<assignment-operator> ::= "="
						| "*" "="
						| "/" "="
						| "%" "="
						| "+" "="
						| "-" "="
						| "&" "="
						| "^" "="
						| "|" "="

<conditional-expression> ::= <logical-or-expression>
						   | <logical-or-expression> "?" <expression> ":" <conditional-expression>

<logical-or-expression> ::= <logical-and-expression>
						  | <logical-or-expression> "|" "|" <logical-and-expression>

<logical-and-expression> ::= <bitwise-or-expression>
						   | <logical-and-expression> "&" "&" <bitwise-or-expression>

# ???
<bitwise-or-expression> ::= <xor-expression>
						  | <bitwise-or-expression> "|" <xor-expression>

<xor-expression> ::= <bitwise-and-expression>
				   | <xor-expression> "^" <bitwise-and-expression>

<bitwise-and-expression> ::= <equality-expression>
						   | <bitwise-and-expression> "^" <equality-expression>

<equality-expression> ::= <relational-expression>
						| <equality-expression> "=" "=" <relational-expression>
						| <equality-expression> "!" "=" <relational-expression>


<relational-expression> ::= <additive-expression>
						  | <relational-expression> "<" <additive-expression>
						  | <relational-expression> ">" <additive-expression>
						  | <relational-expression> "<" "=" <additive-expression>
						  | <relational-expression> ">" "=" <additive-expression>
 
<additive-expression> ::= <multiplicative-expression>
						| <additive-expression> "+" <multiplicative-expression>
						| <additive-expression> "-" <multiplicative-expression>

<multiplicative-expression> ::= <unary-expression>
							  | <multiplicative-expression> "*" <unary-expression>
							  | <multiplicative-expression> "/" <unary-expression>
							  | <multiplicative-expression> "%" <unary-expression>

<unary-expression> ::= <postfix-expression>
					 | <unary-operator> <multiplicative-expression>

<unary-operator> ::= "+"
				   | "-"
				   | "!"

<postfix-expression> ::= <primary-expression>
					   | <postfix-expression "[" <expression> "]"
					   | <method-invocation>

<method-invocation> ::= <postfix-expression "(" ")"
					  | <postfix-expression "(" <argument-list> ")"

<argument-list> ::= <expression>
				  | <expression> "," <argument-list>

<primary-expression> ::= <identifier>
					   | <constant>
					   | "(" <expression> ")"

